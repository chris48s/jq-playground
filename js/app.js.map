{"version":3,"file":"js/app.js","mappings":"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C/CS,EAAKzlD,KAAK,CAAC+kD,EAAQ9/C,KAAM,IAAMosC,IAEvC,CACJ,KAEC,CACD,GAAmB,iBAARnuC,GACPA,EAAI4rC,OAAOlvC,QACc,iBAAlBsD,EAAI4rC,OAAO,GAAiB,CACnC,MAAMkX,EAAuC,IAAtB9iD,EAAI4rC,OAAOlvC,OAAe,KAAO,cACxDywC,EAASrwC,KAAK,CACV,qBACA,YACIgmD,EACA,MACA9iD,EAAI4rC,OAAO,GAAG93B,KACd,2BACA,QAAc9T,EAAI4rC,OAAO,GAAG8W,aAExC,CACAV,EAAa9R,EAASC,EAAQ,MAAOnwC,GACrCuiD,EAAKzlD,KAAK,CAAC,MAAO,SACtB,CACJ,CACA,IAAK,MAAMimD,KAAO7S,EAAQ+D,QACtB,IAAK,MAAOj0C,EAAKu5B,KAAWnzB,OAAOoV,QAAQunC,GACnCjpD,MAAMD,QAAQ0/B,KAAYooB,EAAUhyC,IAAI3P,KACxC+iD,EAAI/iD,GAAOu5B,EAAOA,EAAO78B,OAAS,IAI9C,MAAO,CAACwzC,EAASqS,EACrB,C,mICl+B6B,IAAIlzC,IAAI,IAC9B,KACH,aACA,gBACA,QACA,iBACA,WACA,oBACA,SACA,OACA,MACA,UACA,WACA,cACA,UACA,aACA,SACA,YACA,YACA,YACA,eAGA,OACA,UACA,UACA,aACA,cACA,uBACA,WACA,WACA,cACA,mBACA,sBACA,cACA,SACA,OACA,gB,sICvCyB,IAAIA,IAAI,IAC9B,KACH,2BACA,aACA,UACA,cACA,uBACA,aACA,gBACA,UACA,aACA,QACA,aACA,cACA,UACA,WACA,gBACA,cACA,eACA,kBACA,aACA,kBACA,eACA,eACA,kBACA,aACA,gBACA,gBACA,eACA,cACA,iBACA,YACA,iBACA,aACA,qBACA,qBACA,wBACA,6BACA,sBACA,gBACA,oBACA,oBACA,cACA,SACA,UACA,SACA,kBACA,eACA,gBACA,oBACA,wBACA,mBACA,mBACA,YACA,QACA,aACA,iBAGA,SACA,YACA,YACA,eACA,eACA,OACA,UACA,UACA,aACA,YACA,aACA,gBACA,OACA,OACA,aACA,mBACA,eACA,UACA,cACA,eAIA,gBACA,wBACA,2BACA,cAcA,OAGA,cACA,cACA,aACA,aACA,eACA,UACA,UACA,UACA,QACA,wBACA,QACA,aACA,aACA,uBACA,OACA,UACA,YAEA,OACA,SACA,SACA,UACA,eACA,SACA,OACA,cACA,YACA,MACA,WACA,YACA,kBACA,UACA,gBACA,UACA,cACA,cACA,MACA,uBACA,gBACA,WACA,yBAGA,QACA,UACA,UACA,UACA,UACA,UAEA,OACA,OACA,UACA,OACA,cACA,cACA,iBACA,UACA,kBAEA,WACA,cACA,mBACA,sBACA,aACA,UACA,UACA,UACA,WACA,kBACA,oBACA,4BACA,UACA,aACA,YACA,eACA,iBACA,WACA,gB,iJCnLyB,IAAIA,IAAI,IAC9B,KACH,OACA,cACA,WACA,QACA,e,mKCFyB,IAAIA,IAAI,IAC9B,KACH,OACA,cAKA,WACA,cACA,aACA,gBACA,WACA,kBACA,aACA,WACA,cACA,mBACA,sBAGA,SACA,YAMA,OACA,UACA,UACA,e,8ICnCyB,IAAIA,IAAI,IAC9B,KACH,aACA,OACA,cACA,UACA,UACA,UACA,WACA,gBACA,YACA,aACA,cACA,QACA,gB,2JCbyB,IAAIA,IAAI,IAC9B,KACH,aACA,OACA,cACA,kB,gJCLyB,IAAIA,IAAI,IAC9B,KACH,OACA,cACA,WACA,cACA,S,wJCNyB,IAAIA,IAAI,IAC9B,KACH,WACA,cACA,aACA,gBACA,WACA,OACA,gB,gJCRyB,IAAIA,IAAI,IAC9B,KAIH,UACA,aACA,UACA,QACA,wBACA,QACA,e,sICbyB,IAAIA,IAAI,IAC9B,KACH,OACA,cACA,UACA,UACA,UACA,QACA,wBACA,QACA,aACA,aACA,aACA,gBACA,gB,kKCVyB,IAAIA,IAAI,IAC9B,KACH,OACA,cACA,WACA,cACA,mBACA,sBACA,aACA,UACA,WACA,OACA,MACA,SACA,SACA,QAEA,UACA,UACA,kBAGA,UACA,aACA,SACA,YAEA,YACA,eACA,aAEA,OACA,UACA,UACA,aA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,WACA,cACA,OACA,gB,mLCNyB,IAAIA,IAAI,IAC9B,KAIH,aAkEoB,CACpB,iBACA,gBACA,aACA,OACA,qBACA,sBACA,oBACFmqB,KAAKuT,GAAMA,EAAE1M,gB,6HChFc,IAAIhxB,IAAI,IAAI,O,sICCZ,IAAIA,IAAI,IAC9B,KACH,WACA,WACA,cACA,cACA,aACA,WACA,OACA,gB,0JCPyB,IAAIA,IAAI,IAC9B,KACH,OACA,cACA,SACA,YACA,OACA,UACA,UACA,aACA,QACA,aACA,QACA,wBACA,WACA,kBACA,WACA,cACA,SACA,SACA,OACA,MACA,aACA,gBACA,WACA,cACA,QACA,Y,sIC7ByB,IAAIA,IAAI,IAC9B,KACH,WACA,WACA,cACA,aACA,gBACA,SACA,YACA,WACA,cAGA,OACA,cACA,QACA,aACA,gB,mJChByB,IAAIA,IAAI,IAC9B,O,gJCyEsB,IAAIA,IAAI,IAC9B,KACH,OACA,cACA,cACA,SACA,WACA,mBACA,aACA,QACA,WACA,WACA,YACA,QACA,U,gJCxFyB,IAAIA,IAAI,IAC9B,KACH,WACA,WACA,cACA,gB,+JCFyB,IAAIA,IAAI,IAC9B,KACH,aAIA,SACA,YACA,YACA,YACA,eACA,aAEA,OACA,UACA,UACA,aACA,UAEA,QACA,wBACA,QACA,aACA,aACA,OACA,SACA,MACA,SACA,OACA,cACA,WACA,cACA,mBACA,sBACA,aACA,WACA,kBACA,WACA,cACA,SACA,cACA,OACA,QACA,e,0JC7CyB,IAAIA,IAAI,IAC9B,KACH,OACA,cACA,WACA,gBAEmB,IAAIA,IAAI,CAC3B,KACA,OACA,SACA,QACA,WACA,MACA,KACA,OACA,QACA,OACA,QACA,OACA,MACA,MACA,KACA,cACA,WACA,cACA,kB,2JC1ByB,IAAIA,IAAI,IAC9B,KACH,OACA,cACA,WACA,cACA,gBACA,aACA,WACA,kBACA,QACA,mB,2JCVyB,IAAIA,IAAI,IAC9B,KACH,SACA,YACA,OACA,cACA,UACA,UACA,UACA,WACA,SACA,cACA,S,wJCTyB,IAAIA,IAA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","sources":["webpack://jq-playground/./node_modules/jsesc/jsesc.js","webpack://jq-playground/./node_modules/path-browserify/index.js","webpack://jq-playground/./node_modules/process/browser.js","webpack://jq-playground/./node_modules/web-tree-sitter/tree-sitter.js","webpack://jq-playground/./node_modules/yamljs/lib/Dumper.js","webpack://jq-playground/./node_modules/yamljs/lib/Escaper.js","webpack://jq-playground/./node_modules/yamljs/lib/Exception/DumpException.js","webpack://jq-playground/./node_modules/yamljs/lib/Exception/ParseException.js","webpack://jq-playground/./node_modules/yamljs/lib/Exception/ParseMore.js","webpack://jq-playground/./node_modules/yamljs/lib/Inline.js","webpack://jq-playground/./node_modules/yamljs/lib/Parser.js","webpack://jq-playground/./node_modules/yamljs/lib/Pattern.js","webpack://jq-playground/./node_modules/yamljs/lib/Unescaper.js","webpack://jq-playground/./node_modules/yamljs/lib/Utils.js","webpack://jq-playground/./node_modules/yamljs/lib/Yaml.js","webpack://jq-playground/./src/js/app.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/Query.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/Headers.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/curl/url.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/curl/form.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/Request.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/Warnings.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/curl/auth.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/curl/opts.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/ansible.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/c.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/cfml.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/clojure.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/csharp.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/dart.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/elixir.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/go.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/har.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/http.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/httpie.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/java/httpurlconnection.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/java/java.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/java/jsoup.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/java/okhttp.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/axios.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/got.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/http.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/javascript.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/jquery.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/ky.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/request.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/superagent.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/javascript/xhr.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/json.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/julia.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/kotlin.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/lua.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/matlab/matlab.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/objectivec.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/ocaml.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/perl.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/php/guzzle.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/php/php.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/php/requests.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/powershell.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/python/http.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/python/python.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/r/httr.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/r/httr2.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/ruby/httparty.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/ruby/ruby.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/rust.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/swift.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/generators/wget.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/parse.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/shell/Word.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/shell/tokenizer.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/shell/webParser.js","webpack://jq-playground/./node_modules/curlconverter/dist/src/utils.js","webpack://jq-playground/webpack/bootstrap","webpack://jq-playground/webpack/runtime/async module","webpack://jq-playground/webpack/runtime/define property getters","webpack://jq-playground/webpack/runtime/hasOwnProperty shorthand","webpack://jq-playground/webpack/startup"],"sourcesContent":["'use strict';\n\nconst object = {};\nconst hasOwnProperty = object.hasOwnProperty;\nconst forOwn = (object, callback) => {\n\tfor (const key in object) {\n\t\tif (hasOwnProperty.call(object, key)) {\n\t\t\tcallback(key, object[key]);\n\t\t}\n\t}\n};\n\nconst extend = (destination, source) => {\n\tif (!source) {\n\t\treturn destination;\n\t}\n\tforOwn(source, (key, value) => {\n\t\tdestination[key] = value;\n\t});\n\treturn destination;\n};\n\nconst forEach = (array, callback) => {\n\tconst length = array.length;\n\tlet index = -1;\n\twhile (++index < length) {\n\t\tcallback(array[index]);\n\t}\n};\n\nconst fourHexEscape = (hex) => {\n\treturn '\\\\u' + ('0000' + hex).slice(-4);\n}\n\nconst hexadecimal = (code, lowercase) => {\n\tlet hexadecimal = code.toString(16);\n\tif (lowercase) return hexadecimal;\n\treturn hexadecimal.toUpperCase();\n};\n\nconst toString = object.toString;\nconst isArray = Array.isArray;\nconst isBuffer = (value) => {\n\treturn typeof Buffer === 'function' && Buffer.isBuffer(value);\n};\nconst isObject = (value) => {\n\t// This is a very simple check, but it’s good enough for what we need.\n\treturn toString.call(value) == '[object Object]';\n};\nconst isString = (value) => {\n\treturn typeof value == 'string' ||\n\t\ttoString.call(value) == '[object String]';\n};\nconst isNumber = (value) => {\n\treturn typeof value == 'number' ||\n\t\ttoString.call(value) == '[object Number]';\n};\nconst isFunction = (value) => {\n\treturn typeof value == 'function';\n};\nconst isMap = (value) => {\n\treturn toString.call(value) == '[object Map]';\n};\nconst isSet = (value) => {\n\treturn toString.call(value) == '[object Set]';\n};\n\n/*--------------------------------------------------------------------------*/\n\n// https://mathiasbynens.be/notes/javascript-escapes#single\nconst singleEscapes = {\n\t'\\\\': '\\\\\\\\',\n\t'\\b': '\\\\b',\n\t'\\f': '\\\\f',\n\t'\\n': '\\\\n',\n\t'\\r': '\\\\r',\n\t'\\t': '\\\\t'\n\t// `\\v` is omitted intentionally, because in IE < 9, '\\v' == 'v'.\n\t// '\\v': '\\\\x0B'\n};\nconst regexSingleEscape = /[\\\\\\b\\f\\n\\r\\t]/;\n\nconst regexDigit = /[0-9]/;\nconst regexWhitespace = /[\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n\nconst escapeEverythingRegex = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])|([\\uD800-\\uDFFF])|(['\"`])|[^]/g;\nconst escapeNonAsciiRegex = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])|([\\uD800-\\uDFFF])|(['\"`])|[^ !#-&\\(-\\[\\]-_a-~]/g;\n\nconst jsesc = (argument, options) => {\n\tconst increaseIndentation = () => {\n\t\toldIndent = indent;\n\t\t++options.indentLevel;\n\t\tindent = options.indent.repeat(options.indentLevel)\n\t};\n\t// Handle options\n\tconst defaults = {\n\t\t'escapeEverything': false,\n\t\t'minimal': false,\n\t\t'isScriptContext': false,\n\t\t'quotes': 'single',\n\t\t'wrap': false,\n\t\t'es6': false,\n\t\t'json': false,\n\t\t'compact': true,\n\t\t'lowercaseHex': false,\n\t\t'numbers': 'decimal',\n\t\t'indent': '\\t',\n\t\t'indentLevel': 0,\n\t\t'__inline1__': false,\n\t\t'__inline2__': false\n\t};\n\tconst json = options && options.json;\n\tif (json) {\n\t\tdefaults.quotes = 'double';\n\t\tdefaults.wrap = true;\n\t}\n\toptions = extend(defaults, options);\n\tif (\n\t\toptions.quotes != 'single' &&\n\t\toptions.quotes != 'double' &&\n\t\toptions.quotes != 'backtick'\n\t) {\n\t\toptions.quotes = 'single';\n\t}\n\tconst quote = options.quotes == 'double' ?\n\t\t'\"' :\n\t\t(options.quotes == 'backtick' ?\n\t\t\t'`' :\n\t\t\t'\\''\n\t\t);\n\tconst compact = options.compact;\n\tconst lowercaseHex = options.lowercaseHex;\n\tlet indent = options.indent.repeat(options.indentLevel);\n\tlet oldIndent = '';\n\tconst inline1 = options.__inline1__;\n\tconst inline2 = options.__inline2__;\n\tconst newLine = compact ? '' : '\\n';\n\tlet result;\n\tlet isEmpty = true;\n\tconst useBinNumbers = options.numbers == 'binary';\n\tconst useOctNumbers = options.numbers == 'octal';\n\tconst useDecNumbers = options.numbers == 'decimal';\n\tconst useHexNumbers = options.numbers == 'hexadecimal';\n\n\tif (json && argument && isFunction(argument.toJSON)) {\n\t\targument = argument.toJSON();\n\t}\n\n\tif (!isString(argument)) {\n\t\tif (isMap(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Map()';\n\t\t\t}\n\t\t\tif (!compact) {\n\t\t\t\toptions.__inline1__ = true;\n\t\t\t\toptions.__inline2__ = false;\n\t\t\t}\n\t\t\treturn 'new Map(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isSet(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Set()';\n\t\t\t}\n\t\t\treturn 'new Set(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isBuffer(argument)) {\n\t\t\tif (argument.length == 0) {\n\t\t\t\treturn 'Buffer.from([])';\n\t\t\t}\n\t\t\treturn 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isArray(argument)) {\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tif (inline1) {\n\t\t\t\toptions.__inline1__ = false;\n\t\t\t\toptions.__inline2__ = true;\n\t\t\t}\n\t\t\tif (!inline2) {\n\t\t\t\tincreaseIndentation();\n\t\t\t}\n\t\t\tforEach(argument, (value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tif (inline2) {\n\t\t\t\t\toptions.__inline2__ = false;\n\t\t\t\t}\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact || inline2 ? '' : indent) +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '[]';\n\t\t\t}\n\t\t\tif (inline2) {\n\t\t\t\treturn '[' + result.join(', ') + ']';\n\t\t\t}\n\t\t\treturn '[' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + ']';\n\t\t} else if (isNumber(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// Some number values (e.g. `Infinity`) cannot be represented in JSON.\n\t\t\t\treturn JSON.stringify(argument);\n\t\t\t}\n\t\t\tif (useDecNumbers) {\n\t\t\t\treturn String(argument);\n\t\t\t}\n\t\t\tif (useHexNumbers) {\n\t\t\t\tlet hexadecimal = argument.toString(16);\n\t\t\t\tif (!lowercaseHex) {\n\t\t\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t\t\t}\n\t\t\t\treturn '0x' + hexadecimal;\n\t\t\t}\n\t\t\tif (useBinNumbers) {\n\t\t\t\treturn '0b' + argument.toString(2);\n\t\t\t}\n\t\t\tif (useOctNumbers) {\n\t\t\t\treturn '0o' + argument.toString(8);\n\t\t\t}\n\t\t} else if (!isObject(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// For some values (e.g. `undefined`, `function` objects),\n\t\t\t\t// `JSON.stringify(value)` returns `undefined` (which isn’t valid\n\t\t\t\t// JSON) instead of `'null'`.\n\t\t\t\treturn JSON.stringify(argument) || 'null';\n\t\t\t}\n\t\t\treturn String(argument);\n\t\t} else { // it’s an object\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tincreaseIndentation();\n\t\t\tforOwn(argument, (key, value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact ? '' : indent) +\n\t\t\t\t\tjsesc(key, options) + ':' +\n\t\t\t\t\t(compact ? '' : ' ') +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '{}';\n\t\t\t}\n\t\t\treturn '{' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + '}';\n\t\t}\n\t}\n\n\tconst regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;\n\tresult = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {\n\t\tif (pair) {\n\t\t\tif (options.minimal) return pair;\n\t\t\tconst first = pair.charCodeAt(0);\n\t\t\tconst second = pair.charCodeAt(1);\n\t\t\tif (options.es6) {\n\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\tconst codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\tconst hex = hexadecimal(codePoint, lowercaseHex);\n\t\t\t\treturn '\\\\u{' + hex + '}';\n\t\t\t}\n\t\t\treturn fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));\n\t\t}\n\n\t\tif (lone) {\n\t\t\treturn fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));\n\t\t}\n\n\t\tif (\n\t\t\tchar == '\\0' &&\n\t\t\t!json &&\n\t\t\t!regexDigit.test(string.charAt(index + 1))\n\t\t) {\n\t\t\treturn '\\\\0';\n\t\t}\n\n\t\tif (quoteChar) {\n\t\t\tif (quoteChar == quote || options.escapeEverything) {\n\t\t\t\treturn '\\\\' + quoteChar;\n\t\t\t}\n\t\t\treturn quoteChar;\n\t\t}\n\n\t\tif (regexSingleEscape.test(char)) {\n\t\t\t// no need for a `hasOwnProperty` check here\n\t\t\treturn singleEscapes[char];\n\t\t}\n\n\t\tif (options.minimal && !regexWhitespace.test(char)) {\n\t\t\treturn char;\n\t\t}\n\n\t\tconst hex = hexadecimal(char.charCodeAt(0), lowercaseHex);\n\t\tif (json || hex.length > 2) {\n\t\t\treturn fourHexEscape(hex);\n\t\t}\n\n\t\treturn '\\\\x' + ('00' + hex).slice(-2);\n\t});\n\n\tif (quote == '`') {\n\t\tresult = result.replace(/\\$\\{/g, '\\\\${');\n\t}\n\tif (options.isScriptContext) {\n\t\t// https://mathiasbynens.be/notes/etago\n\t\tresult = result\n\t\t\t.replace(/<\\/(script|style)/gi, '<\\\\/$1')\n\t\t\t.replace(/<!--/g, json ? '\\\\u003C!--' : '\\\\x3C!--');\n\t}\n\tif (options.wrap) {\n\t\tresult = quote + result + quote;\n\t}\n\treturn result;\n};\n\njsesc.version = '3.0.2';\n\nmodule.exports = jsesc;\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// include: shell.js\n// The Module object: Our interface to the outside world. We import\n// and export values on it. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(moduleArg) => Promise<Module>\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to check if Module already exists (e.g. case 3 above).\n// Substitution will be replaced with actual code on later stage of the build,\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module = typeof Module != \"undefined\" ? Module : {};\n\n// Determine the runtime environment we are in. You can customize this by\n// setting the ENVIRONMENT setting at compile time (see settings.js).\n// Attempt to auto-detect the environment\nvar ENVIRONMENT_IS_WEB = typeof window == \"object\";\n\nvar ENVIRONMENT_IS_WORKER = typeof importScripts == \"function\";\n\n// N.b. Electron.js environment is simultaneously a NODE-environment, but\n// also a web environment.\nvar ENVIRONMENT_IS_NODE = typeof process == \"object\" && typeof process.versions == \"object\" && typeof process.versions.node == \"string\";\n\nif (ENVIRONMENT_IS_NODE) {}\n\n// --pre-jses are emitted after the Module integration code, so that they can\n// refer to Module (if they choose; they can also define Module)\n// include: /src/lib/binding_web/prefix.js\nvar TreeSitter = function() {\n  var initPromise;\n  var document = typeof window == \"object\" ? {\n    currentScript: window.document.currentScript\n  } : null;\n  class Parser {\n    constructor() {\n      this.initialize();\n    }\n    initialize() {\n      throw new Error(\"cannot construct a Parser before calling `init()`\");\n    }\n    static init(moduleOptions) {\n      if (initPromise) return initPromise;\n      Module = Object.assign({}, Module, moduleOptions);\n      return initPromise = new Promise(resolveInitPromise => {\n        // end include: /src/lib/binding_web/prefix.js\n        // Sometimes an existing Module object exists with properties\n        // meant to overwrite the default module functionality. Here\n        // we collect those properties and reapply _after_ we configure\n        // the current environment's defaults to avoid having to be so\n        // defensive during initialization.\n        var moduleOverrides = Object.assign({}, Module);\n        var arguments_ = [];\n        var thisProgram = \"./this.program\";\n        var quit_ = (status, toThrow) => {\n          throw toThrow;\n        };\n        // `/` should be present at the end if `scriptDirectory` is not empty\n        var scriptDirectory = \"\";\n        function locateFile(path) {\n          if (Module[\"locateFile\"]) {\n            return Module[\"locateFile\"](path, scriptDirectory);\n          }\n          return scriptDirectory + path;\n        }\n        // Hooks that are implemented differently in different runtime environments.\n        var readAsync, readBinary;\n        if (ENVIRONMENT_IS_NODE) {\n          // These modules will usually be used on Node.js. Load them eagerly to avoid\n          // the complexity of lazy-loading.\n          var fs = require(\"fs\");\n          var nodePath = require(\"path\");\n          scriptDirectory = __dirname + \"/\";\n          // include: node_shell_read.js\n          readBinary = filename => {\n            // We need to re-wrap `file://` strings to URLs. Normalizing isn't\n            // necessary in that case, the path should already be absolute.\n            filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n            var ret = fs.readFileSync(filename);\n            return ret;\n          };\n          readAsync = (filename, binary = true) => {\n            // See the comment in the `readBinary` function.\n            filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n            return new Promise((resolve, reject) => {\n              fs.readFile(filename, binary ? undefined : \"utf8\", (err, data) => {\n                if (err) reject(err); else resolve(binary ? data.buffer : data);\n              });\n            });\n          };\n          // end include: node_shell_read.js\n          if (!Module[\"thisProgram\"] && process.argv.length > 1) {\n            thisProgram = process.argv[1].replace(/\\\\/g, \"/\");\n          }\n          arguments_ = process.argv.slice(2);\n          if (typeof module != \"undefined\") {\n            module[\"exports\"] = Module;\n          }\n          quit_ = (status, toThrow) => {\n            process.exitCode = status;\n            throw toThrow;\n          };\n        } else // Note that this includes Node.js workers when relevant (pthreads is enabled).\n        // Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and\n        // ENVIRONMENT_IS_NODE.\n        if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n          if (ENVIRONMENT_IS_WORKER) {\n            // Check worker, not web, since window could be polyfilled\n            scriptDirectory = self.location.href;\n          } else if (typeof document != \"undefined\" && document.currentScript) {\n            // web\n            scriptDirectory = document.currentScript.src;\n          }\n          // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n          // otherwise, slice off the final part of the url to find the script directory.\n          // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n          // and scriptDirectory will correctly be replaced with an empty string.\n          // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),\n          // they are removed because they could contain a slash.\n          if (scriptDirectory.startsWith(\"blob:\")) {\n            scriptDirectory = \"\";\n          } else {\n            scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1);\n          }\n          {\n            // include: web_or_worker_shell_read.js\n            if (ENVIRONMENT_IS_WORKER) {\n              readBinary = url => {\n                var xhr = new XMLHttpRequest;\n                xhr.open(\"GET\", url, false);\n                xhr.responseType = \"arraybuffer\";\n                xhr.send(null);\n                return new Uint8Array(/** @type{!ArrayBuffer} */ (xhr.response));\n              };\n            }\n            readAsync = url => {\n              // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.\n              // See https://github.com/github/fetch/pull/92#issuecomment-140665932\n              // Cordova or Electron apps are typically loaded from a file:// url.\n              // So use XHR on webview if URL is a file URL.\n              if (isFileURI(url)) {\n                return new Promise((reject, resolve) => {\n                  var xhr = new XMLHttpRequest;\n                  xhr.open(\"GET\", url, true);\n                  xhr.responseType = \"arraybuffer\";\n                  xhr.onload = () => {\n                    if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {\n                      // file URLs can return 0\n                      resolve(xhr.response);\n                    }\n                    reject(xhr.status);\n                  };\n                  xhr.onerror = reject;\n                  xhr.send(null);\n                });\n              }\n              return fetch(url, {\n                credentials: \"same-origin\"\n              }).then(response => {\n                if (response.ok) {\n                  return response.arrayBuffer();\n                }\n                return Promise.reject(new Error(response.status + \" : \" + response.url));\n              });\n            };\n          }\n        } else // end include: web_or_worker_shell_read.js\n        {}\n        var out = Module[\"print\"] || console.log.bind(console);\n        var err = Module[\"printErr\"] || console.error.bind(console);\n        // Merge back in the overrides\n        Object.assign(Module, moduleOverrides);\n        // Free the object hierarchy contained in the overrides, this lets the GC\n        // reclaim data used.\n        moduleOverrides = null;\n        // Emit code to handle expected values on the Module object. This applies Module.x\n        // to the proper local x. This has two benefits: first, we only emit it if it is\n        // expected to arrive, and second, by using a local everywhere else that can be\n        // minified.\n        if (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n        if (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n        if (Module[\"quit\"]) quit_ = Module[\"quit\"];\n        // perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message\n        // end include: shell.js\n        // include: preamble.js\n        // === Preamble library stuff ===\n        // Documentation for the public APIs defined in this file must be updated in:\n        //    site/source/docs/api_reference/preamble.js.rst\n        // A prebuilt local version of the documentation is available at:\n        //    site/build/text/docs/api_reference/preamble.js.txt\n        // You can also build docs locally as HTML or other formats in site/\n        // An online HTML version (which may be of a different version of Emscripten)\n        //    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n        var dynamicLibraries = Module[\"dynamicLibraries\"] || [];\n        var wasmBinary;\n        if (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n        // Wasm globals\n        var wasmMemory;\n        //========================================\n        // Runtime essentials\n        //========================================\n        // whether we are quitting the application. no code should run after this.\n        // set in exit() and abort()\n        var ABORT = false;\n        // set by exit() and abort().  Passed to 'onExit' handler.\n        // NOTE: This is also used as the process return code code in shell environments\n        // but only when noExitRuntime is false.\n        var EXITSTATUS;\n        // Memory management\n        var /** @type {!Int8Array} */ HEAP8, /** @type {!Uint8Array} */ HEAPU8, /** @type {!Int16Array} */ HEAP16, /** @type {!Uint16Array} */ HEAPU16, /** @type {!Int32Array} */ HEAP32, /** @type {!Uint32Array} */ HEAPU32, /** @type {!Float32Array} */ HEAPF32, /** @type {!Float64Array} */ HEAPF64;\n        var HEAP_DATA_VIEW;\n        // include: runtime_shared.js\n        function updateMemoryViews() {\n          var b = wasmMemory.buffer;\n          Module[\"HEAP_DATA_VIEW\"] = HEAP_DATA_VIEW = new DataView(b);\n          Module[\"HEAP8\"] = HEAP8 = new Int8Array(b);\n          Module[\"HEAP16\"] = HEAP16 = new Int16Array(b);\n          Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(b);\n          Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(b);\n          Module[\"HEAP32\"] = HEAP32 = new Int32Array(b);\n          Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(b);\n          Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(b);\n          Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(b);\n        }\n        // end include: runtime_shared.js\n        // In non-standalone/normal mode, we create the memory here.\n        // include: runtime_init_memory.js\n        // Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)\n        // check for full engine support (use string 'subarray' to avoid closure compiler confusion)\n        if (Module[\"wasmMemory\"]) {\n          wasmMemory = Module[\"wasmMemory\"];\n        } else {\n          var INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 33554432;\n          wasmMemory = new WebAssembly.Memory({\n            \"initial\": INITIAL_MEMORY / 65536,\n            // In theory we should not need to emit the maximum if we want \"unlimited\"\n            // or 4GB of memory, but VMs error on that atm, see\n            // https://github.com/emscripten-core/emscripten/issues/14130\n            // And in the pthreads case we definitely need to emit a maximum. So\n            // always emit one.\n            \"maximum\": 2147483648 / 65536\n          });\n        }\n        updateMemoryViews();\n        // end include: runtime_init_memory.js\n        // include: runtime_stack_check.js\n        // end include: runtime_stack_check.js\n        // include: runtime_assertions.js\n        // end include: runtime_assertions.js\n        var __ATPRERUN__ = [];\n        // functions called before the runtime is initialized\n        var __ATINIT__ = [];\n        // functions called during startup\n        var __ATMAIN__ = [];\n        // functions called during shutdown\n        var __ATPOSTRUN__ = [];\n        // functions called after the main() is called\n        var __RELOC_FUNCS__ = [];\n        var runtimeInitialized = false;\n        function preRun() {\n          if (Module[\"preRun\"]) {\n            if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [ Module[\"preRun\"] ];\n            while (Module[\"preRun\"].length) {\n              addOnPreRun(Module[\"preRun\"].shift());\n            }\n          }\n          callRuntimeCallbacks(__ATPRERUN__);\n        }\n        function initRuntime() {\n          runtimeInitialized = true;\n          callRuntimeCallbacks(__RELOC_FUNCS__);\n          callRuntimeCallbacks(__ATINIT__);\n        }\n        function preMain() {\n          callRuntimeCallbacks(__ATMAIN__);\n        }\n        function postRun() {\n          if (Module[\"postRun\"]) {\n            if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [ Module[\"postRun\"] ];\n            while (Module[\"postRun\"].length) {\n              addOnPostRun(Module[\"postRun\"].shift());\n            }\n          }\n          callRuntimeCallbacks(__ATPOSTRUN__);\n        }\n        function addOnPreRun(cb) {\n          __ATPRERUN__.unshift(cb);\n        }\n        function addOnInit(cb) {\n          __ATINIT__.unshift(cb);\n        }\n        function addOnPostRun(cb) {\n          __ATPOSTRUN__.unshift(cb);\n        }\n        // include: runtime_math.js\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\n        // end include: runtime_math.js\n        // A counter of dependencies for calling run(). If we need to\n        // do asynchronous work before running, increment this and\n        // decrement it. Incrementing must happen in a place like\n        // Module.preRun (used by emcc to add file preloading).\n        // Note that you can add dependencies in preRun, even though\n        // it happens right before run - run will be postponed until\n        // the dependencies are met.\n        var runDependencies = 0;\n        var runDependencyWatcher = null;\n        var dependenciesFulfilled = null;\n        // overridden to take different actions when all run dependencies are fulfilled\n        function getUniqueRunDependency(id) {\n          return id;\n        }\n        function addRunDependency(id) {\n          runDependencies++;\n          Module[\"monitorRunDependencies\"]?.(runDependencies);\n        }\n        function removeRunDependency(id) {\n          runDependencies--;\n          Module[\"monitorRunDependencies\"]?.(runDependencies);\n          if (runDependencies == 0) {\n            if (runDependencyWatcher !== null) {\n              clearInterval(runDependencyWatcher);\n              runDependencyWatcher = null;\n            }\n            if (dependenciesFulfilled) {\n              var callback = dependenciesFulfilled;\n              dependenciesFulfilled = null;\n              callback();\n            }\n          }\n        }\n        /** @param {string|number=} what */ function abort(what) {\n          Module[\"onAbort\"]?.(what);\n          what = \"Aborted(\" + what + \")\";\n          // TODO(sbc): Should we remove printing and leave it up to whoever\n          // catches the exception?\n          err(what);\n          ABORT = true;\n          EXITSTATUS = 1;\n          what += \". Build with -sASSERTIONS for more info.\";\n          // Use a wasm runtime error, because a JS error might be seen as a foreign\n          // exception, which means we'd run destructors on it. We need the error to\n          // simply make the program stop.\n          // FIXME This approach does not work in Wasm EH because it currently does not assume\n          // all RuntimeErrors are from traps; it decides whether a RuntimeError is from\n          // a trap or not based on a hidden field within the object. So at the moment\n          // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that\n          // allows this in the wasm spec.\n          // Suppress closure compiler warning here. Closure compiler's builtin extern\n          // definition for WebAssembly.RuntimeError claims it takes no arguments even\n          // though it can.\n          // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.\n          /** @suppress {checkTypes} */ var e = new WebAssembly.RuntimeError(what);\n          // Throw the error whether or not MODULARIZE is set because abort is used\n          // in code paths apart from instantiation where an exception is expected\n          // to be thrown when abort is called.\n          throw e;\n        }\n        // include: memoryprofiler.js\n        // end include: memoryprofiler.js\n        // include: URIUtils.js\n        // Prefix of data URIs emitted by SINGLE_FILE and related options.\n        var dataURIPrefix = \"data:application/octet-stream;base64,\";\n        /**\n * Indicates whether filename is a base64 data URI.\n * @noinline\n */ var isDataURI = filename => filename.startsWith(dataURIPrefix);\n        /**\n * Indicates whether filename is delivered via file protocol (as opposed to http/https)\n * @noinline\n */ var isFileURI = filename => filename.startsWith(\"file://\");\n        // end include: URIUtils.js\n        // include: runtime_exceptions.js\n        // end include: runtime_exceptions.js\n        function findWasmBinary() {\n          var f = \"tree-sitter.wasm\";\n          if (!isDataURI(f)) {\n            return locateFile(f);\n          }\n          return f;\n        }\n        var wasmBinaryFile;\n        function getBinarySync(file) {\n          if (file == wasmBinaryFile && wasmBinary) {\n            return new Uint8Array(wasmBinary);\n          }\n          if (readBinary) {\n            return readBinary(file);\n          }\n          throw \"both async and sync fetching of the wasm failed\";\n        }\n        function getBinaryPromise(binaryFile) {\n          // If we don't have the binary yet, load it asynchronously using readAsync.\n          if (!wasmBinary) {\n            // Fetch the binary using readAsync\n            return readAsync(binaryFile).then(response => new Uint8Array(/** @type{!ArrayBuffer} */ (response)), // Fall back to getBinarySync if readAsync fails\n            () => getBinarySync(binaryFile));\n          }\n          // Otherwise, getBinarySync should be able to get it synchronously\n          return Promise.resolve().then(() => getBinarySync(binaryFile));\n        }\n        function instantiateArrayBuffer(binaryFile, imports, receiver) {\n          return getBinaryPromise(binaryFile).then(binary => WebAssembly.instantiate(binary, imports)).then(receiver, reason => {\n            err(`failed to asynchronously prepare wasm: ${reason}`);\n            abort(reason);\n          });\n        }\n        function instantiateAsync(binary, binaryFile, imports, callback) {\n          if (!binary && typeof WebAssembly.instantiateStreaming == \"function\" && !isDataURI(binaryFile) && // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.\n          !isFileURI(binaryFile) && // Avoid instantiateStreaming() on Node.js environment for now, as while\n          // Node.js v18.1.0 implements it, it does not have a full fetch()\n          // implementation yet.\n          // Reference:\n          //   https://github.com/emscripten-core/emscripten/pull/16917\n          !ENVIRONMENT_IS_NODE && typeof fetch == \"function\") {\n            return fetch(binaryFile, {\n              credentials: \"same-origin\"\n            }).then(response => {\n              // Suppress closure warning here since the upstream definition for\n              // instantiateStreaming only allows Promise<Repsponse> rather than\n              // an actual Response.\n              // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.\n              /** @suppress {checkTypes} */ var result = WebAssembly.instantiateStreaming(response, imports);\n              return result.then(callback, function(reason) {\n                // We expect the most common failure cause to be a bad MIME type for the binary,\n                // in which case falling back to ArrayBuffer instantiation should work.\n                err(`wasm streaming compile failed: ${reason}`);\n                err(\"falling back to ArrayBuffer instantiation\");\n                return instantiateArrayBuffer(binaryFile, imports, callback);\n              });\n            });\n          }\n          return instantiateArrayBuffer(binaryFile, imports, callback);\n        }\n        function getWasmImports() {\n          // prepare imports\n          return {\n            \"env\": wasmImports,\n            \"wasi_snapshot_preview1\": wasmImports,\n            \"GOT.mem\": new Proxy(wasmImports, GOTHandler),\n            \"GOT.func\": new Proxy(wasmImports, GOTHandler)\n          };\n        }\n        // Create the wasm instance.\n        // Receives the wasm imports, returns the exports.\n        function createWasm() {\n          var info = getWasmImports();\n          // Load the wasm module and create an instance of using native support in the JS engine.\n          // handle a generated wasm instance, receiving its exports and\n          // performing other necessary setup\n          /** @param {WebAssembly.Module=} module*/ function receiveInstance(instance, module) {\n            wasmExports = instance.exports;\n            wasmExports = relocateExports(wasmExports, 1024);\n            var metadata = getDylinkMetadata(module);\n            if (metadata.neededDynlibs) {\n              dynamicLibraries = metadata.neededDynlibs.concat(dynamicLibraries);\n            }\n            mergeLibSymbols(wasmExports, \"main\");\n            LDSO.init();\n            loadDylibs();\n            addOnInit(wasmExports[\"__wasm_call_ctors\"]);\n            __RELOC_FUNCS__.push(wasmExports[\"__wasm_apply_data_relocs\"]);\n            removeRunDependency(\"wasm-instantiate\");\n            return wasmExports;\n          }\n          // wait for the pthread pool (if any)\n          addRunDependency(\"wasm-instantiate\");\n          // Prefer streaming instantiation if available.\n          function receiveInstantiationResult(result) {\n            // 'result' is a ResultObject object which has both the module and instance.\n            // receiveInstance() will swap in the exports (to Module.asm) so they can be called\n            receiveInstance(result[\"instance\"], result[\"module\"]);\n          }\n          // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\n          // to manually instantiate the Wasm module themselves. This allows pages to\n          // run the instantiation parallel to any other async startup actions they are\n          // performing.\n          // Also pthreads and wasm workers initialize the wasm instance through this\n          // path.\n          if (Module[\"instantiateWasm\"]) {\n            try {\n              return Module[\"instantiateWasm\"](info, receiveInstance);\n            } catch (e) {\n              err(`Module.instantiateWasm callback failed with error: ${e}`);\n              return false;\n            }\n          }\n          if (!wasmBinaryFile) wasmBinaryFile = findWasmBinary();\n          instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult);\n          return {};\n        }\n        // include: runtime_debug.js\n        // end include: runtime_debug.js\n        // === Body ===\n        var ASM_CONSTS = {};\n        // end include: preamble.js\n        /** @constructor */ function ExitStatus(status) {\n          this.name = \"ExitStatus\";\n          this.message = `Program terminated with exit(${status})`;\n          this.status = status;\n        }\n        var GOT = {};\n        var currentModuleWeakSymbols = new Set([]);\n        var GOTHandler = {\n          get(obj, symName) {\n            var rtn = GOT[symName];\n            if (!rtn) {\n              rtn = GOT[symName] = new WebAssembly.Global({\n                \"value\": \"i32\",\n                \"mutable\": true\n              });\n            }\n            if (!currentModuleWeakSymbols.has(symName)) {\n              // Any non-weak reference to a symbol marks it as `required`, which\n              // enabled `reportUndefinedSymbols` to report undefeind symbol errors\n              // correctly.\n              rtn.required = true;\n            }\n            return rtn;\n          }\n        };\n        var LE_HEAP_LOAD_F32 = byteOffset => HEAP_DATA_VIEW.getFloat32(byteOffset, true);\n        var LE_HEAP_LOAD_F64 = byteOffset => HEAP_DATA_VIEW.getFloat64(byteOffset, true);\n        var LE_HEAP_LOAD_I16 = byteOffset => HEAP_DATA_VIEW.getInt16(byteOffset, true);\n        var LE_HEAP_LOAD_I32 = byteOffset => HEAP_DATA_VIEW.getInt32(byteOffset, true);\n        var LE_HEAP_LOAD_U32 = byteOffset => HEAP_DATA_VIEW.getUint32(byteOffset, true);\n        var LE_HEAP_STORE_F32 = (byteOffset, value) => HEAP_DATA_VIEW.setFloat32(byteOffset, value, true);\n        var LE_HEAP_STORE_F64 = (byteOffset, value) => HEAP_DATA_VIEW.setFloat64(byteOffset, value, true);\n        var LE_HEAP_STORE_I16 = (byteOffset, value) => HEAP_DATA_VIEW.setInt16(byteOffset, value, true);\n        var LE_HEAP_STORE_I32 = (byteOffset, value) => HEAP_DATA_VIEW.setInt32(byteOffset, value, true);\n        var LE_HEAP_STORE_U32 = (byteOffset, value) => HEAP_DATA_VIEW.setUint32(byteOffset, value, true);\n        var callRuntimeCallbacks = callbacks => {\n          while (callbacks.length > 0) {\n            // Pass the module as the first argument.\n            callbacks.shift()(Module);\n          }\n        };\n        var UTF8Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder : undefined;\n        /**\n     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given\n     * array that contains uint8 values, returns a copy of that string as a\n     * Javascript String object.\n     * heapOrArray is either a regular array, or a JavaScript typed array view.\n     * @param {number} idx\n     * @param {number=} maxBytesToRead\n     * @return {string}\n     */ var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => {\n          var endIdx = idx + maxBytesToRead;\n          var endPtr = idx;\n          // TextDecoder needs to know the byte length in advance, it doesn't stop on\n          // null terminator by itself.  Also, use the length info to avoid running tiny\n          // strings through TextDecoder, since .subarray() allocates garbage.\n          // (As a tiny code save trick, compare endPtr against endIdx using a negation,\n          // so that undefined means Infinity)\n          while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n          if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n            return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n          }\n          var str = \"\";\n          // If building with TextDecoder, we have already computed the string length\n          // above, so test loop end condition against that\n          while (idx < endPtr) {\n            // For UTF8 byte structure, see:\n            // http://en.wikipedia.org/wiki/UTF-8#Description\n            // https://www.ietf.org/rfc/rfc2279.txt\n            // https://tools.ietf.org/html/rfc3629\n            var u0 = heapOrArray[idx++];\n            if (!(u0 & 128)) {\n              str += String.fromCharCode(u0);\n              continue;\n            }\n            var u1 = heapOrArray[idx++] & 63;\n            if ((u0 & 224) == 192) {\n              str += String.fromCharCode(((u0 & 31) << 6) | u1);\n              continue;\n            }\n            var u2 = heapOrArray[idx++] & 63;\n            if ((u0 & 240) == 224) {\n              u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n            } else {\n              u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);\n            }\n            if (u0 < 65536) {\n              str += String.fromCharCode(u0);\n            } else {\n              var ch = u0 - 65536;\n              str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));\n            }\n          }\n          return str;\n        };\n        var getDylinkMetadata = binary => {\n          var offset = 0;\n          var end = 0;\n          function getU8() {\n            return binary[offset++];\n          }\n          function getLEB() {\n            var ret = 0;\n            var mul = 1;\n            while (1) {\n              var byte = binary[offset++];\n              ret += ((byte & 127) * mul);\n              mul *= 128;\n              if (!(byte & 128)) break;\n            }\n            return ret;\n          }\n          function getString() {\n            var len = getLEB();\n            offset += len;\n            return UTF8ArrayToString(binary, offset - len, len);\n          }\n          /** @param {string=} message */ function failIf(condition, message) {\n            if (condition) throw new Error(message);\n          }\n          var name = \"dylink.0\";\n          if (binary instanceof WebAssembly.Module) {\n            var dylinkSection = WebAssembly.Module.customSections(binary, name);\n            if (dylinkSection.length === 0) {\n              name = \"dylink\";\n              dylinkSection = WebAssembly.Module.customSections(binary, name);\n            }\n            failIf(dylinkSection.length === 0, \"need dylink section\");\n            binary = new Uint8Array(dylinkSection[0]);\n            end = binary.length;\n          } else {\n            var int32View = new Uint32Array(new Uint8Array(binary.subarray(0, 24)).buffer);\n            var magicNumberFound = int32View[0] == 1836278016 || int32View[0] == 6386541;\n            failIf(!magicNumberFound, \"need to see wasm magic number\");\n            // \\0asm\n            // we should see the dylink custom section right after the magic number and wasm version\n            failIf(binary[8] !== 0, \"need the dylink section to be first\");\n            offset = 9;\n            var section_size = getLEB();\n            //section size\n            end = offset + section_size;\n            name = getString();\n          }\n          var customSection = {\n            neededDynlibs: [],\n            tlsExports: new Set,\n            weakImports: new Set\n          };\n          if (name == \"dylink\") {\n            customSection.memorySize = getLEB();\n            customSection.memoryAlign = getLEB();\n            customSection.tableSize = getLEB();\n            customSection.tableAlign = getLEB();\n            // shared libraries this module needs. We need to load them first, so that\n            // current module could resolve its imports. (see tools/shared.py\n            // WebAssembly.make_shared_library() for \"dylink\" section extension format)\n            var neededDynlibsCount = getLEB();\n            for (var i = 0; i < neededDynlibsCount; ++i) {\n              var libname = getString();\n              customSection.neededDynlibs.push(libname);\n            }\n          } else {\n            failIf(name !== \"dylink.0\");\n            var WASM_DYLINK_MEM_INFO = 1;\n            var WASM_DYLINK_NEEDED = 2;\n            var WASM_DYLINK_EXPORT_INFO = 3;\n            var WASM_DYLINK_IMPORT_INFO = 4;\n            var WASM_SYMBOL_TLS = 256;\n            var WASM_SYMBOL_BINDING_MASK = 3;\n            var WASM_SYMBOL_BINDING_WEAK = 1;\n            while (offset < end) {\n              var subsectionType = getU8();\n              var subsectionSize = getLEB();\n              if (subsectionType === WASM_DYLINK_MEM_INFO) {\n                customSection.memorySize = getLEB();\n                customSection.memoryAlign = getLEB();\n                customSection.tableSize = getLEB();\n                customSection.tableAlign = getLEB();\n              } else if (subsectionType === WASM_DYLINK_NEEDED) {\n                var neededDynlibsCount = getLEB();\n                for (var i = 0; i < neededDynlibsCount; ++i) {\n                  libname = getString();\n                  customSection.neededDynlibs.push(libname);\n                }\n              } else if (subsectionType === WASM_DYLINK_EXPORT_INFO) {\n                var count = getLEB();\n                while (count--) {\n                  var symname = getString();\n                  var flags = getLEB();\n                  if (flags & WASM_SYMBOL_TLS) {\n                    customSection.tlsExports.add(symname);\n                  }\n                }\n              } else if (subsectionType === WASM_DYLINK_IMPORT_INFO) {\n                var count = getLEB();\n                while (count--) {\n                  var modname = getString();\n                  var symname = getString();\n                  var flags = getLEB();\n                  if ((flags & WASM_SYMBOL_BINDING_MASK) == WASM_SYMBOL_BINDING_WEAK) {\n                    customSection.weakImports.add(symname);\n                  }\n                }\n              } else {\n                // unknown subsection\n                offset += subsectionSize;\n              }\n            }\n          }\n          return customSection;\n        };\n        /**\n     * @param {number} ptr\n     * @param {string} type\n     */ function getValue(ptr, type = \"i8\") {\n          if (type.endsWith(\"*\")) type = \"*\";\n          switch (type) {\n           case \"i1\":\n            return HEAP8[ptr];\n\n           case \"i8\":\n            return HEAP8[ptr];\n\n           case \"i16\":\n            return LE_HEAP_LOAD_I16(((ptr) >> 1) * 2);\n\n           case \"i32\":\n            return LE_HEAP_LOAD_I32(((ptr) >> 2) * 4);\n\n           case \"i64\":\n            abort(\"to do getValue(i64) use WASM_BIGINT\");\n\n           case \"float\":\n            return LE_HEAP_LOAD_F32(((ptr) >> 2) * 4);\n\n           case \"double\":\n            return LE_HEAP_LOAD_F64(((ptr) >> 3) * 8);\n\n           case \"*\":\n            return LE_HEAP_LOAD_U32(((ptr) >> 2) * 4);\n\n           default:\n            abort(`invalid type for getValue: ${type}`);\n          }\n        }\n        var newDSO = (name, handle, syms) => {\n          var dso = {\n            refcount: Infinity,\n            name: name,\n            exports: syms,\n            global: true\n          };\n          LDSO.loadedLibsByName[name] = dso;\n          if (handle != undefined) {\n            LDSO.loadedLibsByHandle[handle] = dso;\n          }\n          return dso;\n        };\n        var LDSO = {\n          loadedLibsByName: {},\n          loadedLibsByHandle: {},\n          init() {\n            newDSO(\"__main__\", 0, wasmImports);\n          }\n        };\n        var ___heap_base = 78112;\n        var zeroMemory = (address, size) => {\n          HEAPU8.fill(0, address, address + size);\n          return address;\n        };\n        var alignMemory = (size, alignment) => Math.ceil(size / alignment) * alignment;\n        var getMemory = size => {\n          // After the runtime is initialized, we must only use sbrk() normally.\n          if (runtimeInitialized) {\n            // Currently we don't support freeing of static data when modules are\n            // unloaded via dlclose.  This function is tagged as `noleakcheck` to\n            // avoid having this reported as leak.\n            return zeroMemory(_malloc(size), size);\n          }\n          var ret = ___heap_base;\n          // Keep __heap_base stack aligned.\n          var end = ret + alignMemory(size, 16);\n          ___heap_base = end;\n          GOT[\"__heap_base\"].value = end;\n          return ret;\n        };\n        var isInternalSym = symName => [ \"__cpp_exception\", \"__c_longjmp\", \"__wasm_apply_data_relocs\", \"__dso_handle\", \"__tls_size\", \"__tls_align\", \"__set_stack_limits\", \"_emscripten_tls_init\", \"__wasm_init_tls\", \"__wasm_call_ctors\", \"__start_em_asm\", \"__stop_em_asm\", \"__start_em_js\", \"__stop_em_js\" ].includes(symName) || symName.startsWith(\"__em_js__\");\n        var uleb128Encode = (n, target) => {\n          if (n < 128) {\n            target.push(n);\n          } else {\n            target.push((n % 128) | 128, n >> 7);\n          }\n        };\n        var sigToWasmTypes = sig => {\n          var typeNames = {\n            \"i\": \"i32\",\n            \"j\": \"i64\",\n            \"f\": \"f32\",\n            \"d\": \"f64\",\n            \"e\": \"externref\",\n            \"p\": \"i32\"\n          };\n          var type = {\n            parameters: [],\n            results: sig[0] == \"v\" ? [] : [ typeNames[sig[0]] ]\n          };\n          for (var i = 1; i < sig.length; ++i) {\n            type.parameters.push(typeNames[sig[i]]);\n          }\n          return type;\n        };\n        var generateFuncType = (sig, target) => {\n          var sigRet = sig.slice(0, 1);\n          var sigParam = sig.slice(1);\n          var typeCodes = {\n            \"i\": 127,\n            // i32\n            \"p\": 127,\n            // i32\n            \"j\": 126,\n            // i64\n            \"f\": 125,\n            // f32\n            \"d\": 124,\n            // f64\n            \"e\": 111\n          };\n          // Parameters, length + signatures\n          target.push(96);\n          /* form: func */ uleb128Encode(sigParam.length, target);\n          for (var i = 0; i < sigParam.length; ++i) {\n            target.push(typeCodes[sigParam[i]]);\n          }\n          // Return values, length + signatures\n          // With no multi-return in MVP, either 0 (void) or 1 (anything else)\n          if (sigRet == \"v\") {\n            target.push(0);\n          } else {\n            target.push(1, typeCodes[sigRet]);\n          }\n        };\n        var convertJsFunctionToWasm = (func, sig) => {\n          // If the type reflection proposal is available, use the new\n          // \"WebAssembly.Function\" constructor.\n          // Otherwise, construct a minimal wasm module importing the JS function and\n          // re-exporting it.\n          if (typeof WebAssembly.Function == \"function\") {\n            return new WebAssembly.Function(sigToWasmTypes(sig), func);\n          }\n          // The module is static, with the exception of the type section, which is\n          // generated based on the signature passed in.\n          var typeSectionBody = [ 1 ];\n          // count: 1\n          generateFuncType(sig, typeSectionBody);\n          // Rest of the module is static\n          var bytes = [ 0, 97, 115, 109, // magic (\"\\0asm\")\n          1, 0, 0, 0, // version: 1\n          1 ];\n          // Write the overall length of the type section followed by the body\n          uleb128Encode(typeSectionBody.length, bytes);\n          bytes.push(...typeSectionBody);\n          // The rest of the module is static\n          bytes.push(2, 7, // import section\n          // (import \"e\" \"f\" (func 0 (type 0)))\n          1, 1, 101, 1, 102, 0, 0, 7, 5, // export section\n          // (export \"f\" (func 0 (type 0)))\n          1, 1, 102, 0, 0);\n          // We can compile this wasm module synchronously because it is very small.\n          // This accepts an import (at \"e.f\"), that it reroutes to an export (at \"f\")\n          var module = new WebAssembly.Module(new Uint8Array(bytes));\n          var instance = new WebAssembly.Instance(module, {\n            \"e\": {\n              \"f\": func\n            }\n          });\n          var wrappedFunc = instance.exports[\"f\"];\n          return wrappedFunc;\n        };\n        var wasmTableMirror = [];\n        /** @type {WebAssembly.Table} */ var wasmTable = new WebAssembly.Table({\n          \"initial\": 28,\n          \"element\": \"anyfunc\"\n        });\n        var getWasmTableEntry = funcPtr => {\n          var func = wasmTableMirror[funcPtr];\n          if (!func) {\n            if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;\n            wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);\n          }\n          return func;\n        };\n        var updateTableMap = (offset, count) => {\n          if (functionsInTableMap) {\n            for (var i = offset; i < offset + count; i++) {\n              var item = getWasmTableEntry(i);\n              // Ignore null values.\n              if (item) {\n                functionsInTableMap.set(item, i);\n              }\n            }\n          }\n        };\n        var functionsInTableMap;\n        var getFunctionAddress = func => {\n          // First, create the map if this is the first use.\n          if (!functionsInTableMap) {\n            functionsInTableMap = new WeakMap;\n            updateTableMap(0, wasmTable.length);\n          }\n          return functionsInTableMap.get(func) || 0;\n        };\n        var freeTableIndexes = [];\n        var getEmptyTableSlot = () => {\n          // Reuse a free index if there is one, otherwise grow.\n          if (freeTableIndexes.length) {\n            return freeTableIndexes.pop();\n          }\n          // Grow the table\n          try {\n            wasmTable.grow(1);\n          } catch (err) {\n            if (!(err instanceof RangeError)) {\n              throw err;\n            }\n            throw \"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.\";\n          }\n          return wasmTable.length - 1;\n        };\n        var setWasmTableEntry = (idx, func) => {\n          wasmTable.set(idx, func);\n          // With ABORT_ON_WASM_EXCEPTIONS wasmTable.get is overridden to return wrapped\n          // functions so we need to call it here to retrieve the potential wrapper correctly\n          // instead of just storing 'func' directly into wasmTableMirror\n          wasmTableMirror[idx] = wasmTable.get(idx);\n        };\n        /** @param {string=} sig */ var addFunction = (func, sig) => {\n          // Check if the function is already in the table, to ensure each function\n          // gets a unique index.\n          var rtn = getFunctionAddress(func);\n          if (rtn) {\n            return rtn;\n          }\n          // It's not in the table, add it now.\n          var ret = getEmptyTableSlot();\n          // Set the new value.\n          try {\n            // Attempting to call this with JS function will cause of table.set() to fail\n            setWasmTableEntry(ret, func);\n          } catch (err) {\n            if (!(err instanceof TypeError)) {\n              throw err;\n            }\n            var wrapped = convertJsFunctionToWasm(func, sig);\n            setWasmTableEntry(ret, wrapped);\n          }\n          functionsInTableMap.set(func, ret);\n          return ret;\n        };\n        var updateGOT = (exports, replace) => {\n          for (var symName in exports) {\n            if (isInternalSym(symName)) {\n              continue;\n            }\n            var value = exports[symName];\n            if (symName.startsWith(\"orig$\")) {\n              symName = symName.split(\"$\")[1];\n              replace = true;\n            }\n            GOT[symName] ||= new WebAssembly.Global({\n              \"value\": \"i32\",\n              \"mutable\": true\n            });\n            if (replace || GOT[symName].value == 0) {\n              if (typeof value == \"function\") {\n                GOT[symName].value = addFunction(value);\n              } else if (typeof value == \"number\") {\n                GOT[symName].value = value;\n              } else {\n                err(`unhandled export type for '${symName}': ${typeof value}`);\n              }\n            }\n          }\n        };\n        /** @param {boolean=} replace */ var relocateExports = (exports, memoryBase, replace) => {\n          var relocated = {};\n          for (var e in exports) {\n            var value = exports[e];\n            if (typeof value == \"object\") {\n              // a breaking change in the wasm spec, globals are now objects\n              // https://github.com/WebAssembly/mutable-global/issues/1\n              value = value.value;\n            }\n            if (typeof value == \"number\") {\n              value += memoryBase;\n            }\n            relocated[e] = value;\n          }\n          updateGOT(relocated, replace);\n          return relocated;\n        };\n        var isSymbolDefined = symName => {\n          // Ignore 'stub' symbols that are auto-generated as part of the original\n          // `wasmImports` used to instantiate the main module.\n          var existing = wasmImports[symName];\n          if (!existing || existing.stub) {\n            return false;\n          }\n          return true;\n        };\n        var dynCallLegacy = (sig, ptr, args) => {\n          sig = sig.replace(/p/g, \"i\");\n          var f = Module[\"dynCall_\" + sig];\n          return f(ptr, ...args);\n        };\n        var dynCall = (sig, ptr, args = []) => {\n          // Without WASM_BIGINT support we cannot directly call function with i64 as\n          // part of their signature, so we rely on the dynCall functions generated by\n          // wasm-emscripten-finalize\n          if (sig.includes(\"j\")) {\n            return dynCallLegacy(sig, ptr, args);\n          }\n          var rtn = getWasmTableEntry(ptr)(...args);\n          return rtn;\n        };\n        var stackSave = () => _emscripten_stack_get_current();\n        var stackRestore = val => __emscripten_stack_restore(val);\n        var createInvokeFunction = sig => (ptr, ...args) => {\n          var sp = stackSave();\n          try {\n            return dynCall(sig, ptr, args);\n          } catch (e) {\n            stackRestore(sp);\n            // Create a try-catch guard that rethrows the Emscripten EH exception.\n            // Exceptions thrown from C++ will be a pointer (number) and longjmp\n            // will throw the number Infinity. Use the compact and fast \"e !== e+0\"\n            // test to check if e was not a Number.\n            if (e !== e + 0) throw e;\n            _setThrew(1, 0);\n          }\n        };\n        var resolveGlobalSymbol = (symName, direct = false) => {\n          var sym;\n          // First look for the orig$ symbol which is the symbol without i64\n          // legalization performed.\n          if (direct && (\"orig$\" + symName in wasmImports)) {\n            symName = \"orig$\" + symName;\n          }\n          if (isSymbolDefined(symName)) {\n            sym = wasmImports[symName];\n          } else // Asm.js-style exception handling: invoke wrapper generation\n          if (symName.startsWith(\"invoke_\")) {\n            // Create (and cache) new invoke_ functions on demand.\n            sym = wasmImports[symName] = createInvokeFunction(symName.split(\"_\")[1]);\n          }\n          return {\n            sym: sym,\n            name: symName\n          };\n        };\n        /**\n     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the\n     * emscripten HEAP, returns a copy of that string as a Javascript String object.\n     *\n     * @param {number} ptr\n     * @param {number=} maxBytesToRead - An optional length that specifies the\n     *   maximum number of bytes to read. You can omit this parameter to scan the\n     *   string until the first 0 byte. If maxBytesToRead is passed, and the string\n     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the\n     *   string will cut short at that byte index (i.e. maxBytesToRead will not\n     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing\n     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw\n     *   JS JIT optimizations off, so it is worth to consider consistently using one\n     * @return {string}\n     */ var UTF8ToString = (ptr, maxBytesToRead) => ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n        /**\n      * @param {string=} libName\n      * @param {Object=} localScope\n      * @param {number=} handle\n      */ var loadWebAssemblyModule = (binary, flags, libName, localScope, handle) => {\n          var metadata = getDylinkMetadata(binary);\n          currentModuleWeakSymbols = metadata.weakImports;\n          // loadModule loads the wasm module after all its dependencies have been loaded.\n          // can be called both sync/async.\n          function loadModule() {\n            // The first thread to load a given module needs to allocate the static\n            // table and memory regions.  Later threads re-use the same table region\n            // and can ignore the memory region (since memory is shared between\n            // threads already).\n            // If `handle` is specified than it is assumed that the calling thread has\n            // exclusive access to it for the duration of this function.  See the\n            // locking in `dynlink.c`.\n            var firstLoad = !handle || !HEAP8[(handle) + (8)];\n            if (firstLoad) {\n              // alignments are powers of 2\n              var memAlign = Math.pow(2, metadata.memoryAlign);\n              // prepare memory\n              var memoryBase = metadata.memorySize ? alignMemory(getMemory(metadata.memorySize + memAlign), memAlign) : 0;\n              // TODO: add to cleanups\n              var tableBase = metadata.tableSize ? wasmTable.length : 0;\n              if (handle) {\n                HEAP8[(handle) + (8)] = 1;\n                LE_HEAP_STORE_U32((((handle) + (12)) >> 2) * 4, memoryBase);\n                LE_HEAP_STORE_I32((((handle) + (16)) >> 2) * 4, metadata.memorySize);\n                LE_HEAP_STORE_U32((((handle) + (20)) >> 2) * 4, tableBase);\n                LE_HEAP_STORE_I32((((handle) + (24)) >> 2) * 4, metadata.tableSize);\n              }\n            } else {\n              memoryBase = LE_HEAP_LOAD_U32((((handle) + (12)) >> 2) * 4);\n              tableBase = LE_HEAP_LOAD_U32((((handle) + (20)) >> 2) * 4);\n            }\n            var tableGrowthNeeded = tableBase + metadata.tableSize - wasmTable.length;\n            if (tableGrowthNeeded > 0) {\n              wasmTable.grow(tableGrowthNeeded);\n            }\n            // This is the export map that we ultimately return.  We declare it here\n            // so it can be used within resolveSymbol.  We resolve symbols against\n            // this local symbol map in the case there they are not present on the\n            // global Module object.  We need this fallback because Modules sometime\n            // need to import their own symbols\n            var moduleExports;\n            function resolveSymbol(sym) {\n              var resolved = resolveGlobalSymbol(sym).sym;\n              if (!resolved && localScope) {\n                resolved = localScope[sym];\n              }\n              if (!resolved) {\n                resolved = moduleExports[sym];\n              }\n              return resolved;\n            }\n            // TODO kill ↓↓↓ (except \"symbols local to this module\", it will likely be\n            // not needed if we require that if A wants symbols from B it has to link\n            // to B explicitly: similarly to -Wl,--no-undefined)\n            // wasm dynamic libraries are pure wasm, so they cannot assist in\n            // their own loading. When side module A wants to import something\n            // provided by a side module B that is loaded later, we need to\n            // add a layer of indirection, but worse, we can't even tell what\n            // to add the indirection for, without inspecting what A's imports\n            // are. To do that here, we use a JS proxy (another option would\n            // be to inspect the binary directly).\n            var proxyHandler = {\n              get(stubs, prop) {\n                // symbols that should be local to this module\n                switch (prop) {\n                 case \"__memory_base\":\n                  return memoryBase;\n\n                 case \"__table_base\":\n                  return tableBase;\n                }\n                if (prop in wasmImports && !wasmImports[prop].stub) {\n                  // No stub needed, symbol already exists in symbol table\n                  return wasmImports[prop];\n                }\n                // Return a stub function that will resolve the symbol\n                // when first called.\n                if (!(prop in stubs)) {\n                  var resolved;\n                  stubs[prop] = (...args) => {\n                    resolved ||= resolveSymbol(prop);\n                    return resolved(...args);\n                  };\n                }\n                return stubs[prop];\n              }\n            };\n            var proxy = new Proxy({}, proxyHandler);\n            var info = {\n              \"GOT.mem\": new Proxy({}, GOTHandler),\n              \"GOT.func\": new Proxy({}, GOTHandler),\n              \"env\": proxy,\n              \"wasi_snapshot_preview1\": proxy\n            };\n            function postInstantiation(module, instance) {\n              // add new entries to functionsInTableMap\n              updateTableMap(tableBase, metadata.tableSize);\n              moduleExports = relocateExports(instance.exports, memoryBase);\n              if (!flags.allowUndefined) {\n                reportUndefinedSymbols();\n              }\n              function addEmAsm(addr, body) {\n                var args = [];\n                var arity = 0;\n                for (;arity < 16; arity++) {\n                  if (body.indexOf(\"$\" + arity) != -1) {\n                    args.push(\"$\" + arity);\n                  } else {\n                    break;\n                  }\n                }\n                args = args.join(\",\");\n                var func = `(${args}) => { ${body} };`;\n                ASM_CONSTS[start] = eval(func);\n              }\n              // Add any EM_ASM function that exist in the side module\n              if (\"__start_em_asm\" in moduleExports) {\n                var start = moduleExports[\"__start_em_asm\"];\n                var stop = moduleExports[\"__stop_em_asm\"];\n                while (start < stop) {\n                  var jsString = UTF8ToString(start);\n                  addEmAsm(start, jsString);\n                  start = HEAPU8.indexOf(0, start) + 1;\n                }\n              }\n              function addEmJs(name, cSig, body) {\n                // The signature here is a C signature (e.g. \"(int foo, char* bar)\").\n                // See `create_em_js` in emcc.py` for the build-time version of this\n                // code.\n                var jsArgs = [];\n                cSig = cSig.slice(1, -1);\n                if (cSig != \"void\") {\n                  cSig = cSig.split(\",\");\n                  for (var i in cSig) {\n                    var jsArg = cSig[i].split(\" \").pop();\n                    jsArgs.push(jsArg.replace(\"*\", \"\"));\n                  }\n                }\n                var func = `(${jsArgs}) => ${body};`;\n                moduleExports[name] = eval(func);\n              }\n              for (var name in moduleExports) {\n                if (name.startsWith(\"__em_js__\")) {\n                  var start = moduleExports[name];\n                  var jsString = UTF8ToString(start);\n                  // EM_JS strings are stored in the data section in the form\n                  // SIG<::>BODY.\n                  var parts = jsString.split(\"<::>\");\n                  addEmJs(name.replace(\"__em_js__\", \"\"), parts[0], parts[1]);\n                  delete moduleExports[name];\n                }\n              }\n              // initialize the module\n              var applyRelocs = moduleExports[\"__wasm_apply_data_relocs\"];\n              if (applyRelocs) {\n                if (runtimeInitialized) {\n                  applyRelocs();\n                } else {\n                  __RELOC_FUNCS__.push(applyRelocs);\n                }\n              }\n              var init = moduleExports[\"__wasm_call_ctors\"];\n              if (init) {\n                if (runtimeInitialized) {\n                  init();\n                } else {\n                  // we aren't ready to run compiled code yet\n                  __ATINIT__.push(init);\n                }\n              }\n              return moduleExports;\n            }\n            if (flags.loadAsync) {\n              if (binary instanceof WebAssembly.Module) {\n                var instance = new WebAssembly.Instance(binary, info);\n                return Promise.resolve(postInstantiation(binary, instance));\n              }\n              return WebAssembly.instantiate(binary, info).then(result => postInstantiation(result.module, result.instance));\n            }\n            var module = binary instanceof WebAssembly.Module ? binary : new WebAssembly.Module(binary);\n            var instance = new WebAssembly.Instance(module, info);\n            return postInstantiation(module, instance);\n          }\n          // now load needed libraries and the module itself.\n          if (flags.loadAsync) {\n            return metadata.neededDynlibs.reduce((chain, dynNeeded) => chain.then(() => loadDynamicLibrary(dynNeeded, flags, localScope)), Promise.resolve()).then(loadModule);\n          }\n          metadata.neededDynlibs.forEach(needed => loadDynamicLibrary(needed, flags, localScope));\n          return loadModule();\n        };\n        var mergeLibSymbols = (exports, libName) => {\n          // add symbols into global namespace TODO: weak linking etc.\n          for (var [sym, exp] of Object.entries(exports)) {\n            // When RTLD_GLOBAL is enabled, the symbols defined by this shared object\n            // will be made available for symbol resolution of subsequently loaded\n            // shared objects.\n            // We should copy the symbols (which include methods and variables) from\n            // SIDE_MODULE to MAIN_MODULE.\n            const setImport = target => {\n              if (!isSymbolDefined(target)) {\n                wasmImports[target] = exp;\n              }\n            };\n            setImport(sym);\n            // Special case for handling of main symbol:  If a side module exports\n            // `main` that also acts a definition for `__main_argc_argv` and vice\n            // versa.\n            const main_alias = \"__main_argc_argv\";\n            if (sym == \"main\") {\n              setImport(main_alias);\n            }\n            if (sym == main_alias) {\n              setImport(\"main\");\n            }\n            if (sym.startsWith(\"dynCall_\") && !Module.hasOwnProperty(sym)) {\n              Module[sym] = exp;\n            }\n          }\n        };\n        /** @param {boolean=} noRunDep */ var asyncLoad = (url, onload, onerror, noRunDep) => {\n          var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : \"\";\n          readAsync(url).then(arrayBuffer => {\n            onload(new Uint8Array(arrayBuffer));\n            if (dep) removeRunDependency(dep);\n          }, err => {\n            if (onerror) {\n              onerror();\n            } else {\n              throw `Loading data file \"${url}\" failed.`;\n            }\n          });\n          if (dep) addRunDependency(dep);\n        };\n        /**\n       * @param {number=} handle\n       * @param {Object=} localScope\n       */ function loadDynamicLibrary(libName, flags = {\n          global: true,\n          nodelete: true\n        }, localScope, handle) {\n          // when loadDynamicLibrary did not have flags, libraries were loaded\n          // globally & permanently\n          var dso = LDSO.loadedLibsByName[libName];\n          if (dso) {\n            // the library is being loaded or has been loaded already.\n            if (!flags.global) {\n              if (localScope) {\n                Object.assign(localScope, dso.exports);\n              }\n            } else if (!dso.global) {\n              // The library was previously loaded only locally but not\n              // we have a request with global=true.\n              dso.global = true;\n              mergeLibSymbols(dso.exports, libName);\n            }\n            // same for \"nodelete\"\n            if (flags.nodelete && dso.refcount !== Infinity) {\n              dso.refcount = Infinity;\n            }\n            dso.refcount++;\n            if (handle) {\n              LDSO.loadedLibsByHandle[handle] = dso;\n            }\n            return flags.loadAsync ? Promise.resolve(true) : true;\n          }\n          // allocate new DSO\n          dso = newDSO(libName, handle, \"loading\");\n          dso.refcount = flags.nodelete ? Infinity : 1;\n          dso.global = flags.global;\n          // libName -> libData\n          function loadLibData() {\n            // for wasm, we can use fetch for async, but for fs mode we can only imitate it\n            if (handle) {\n              var data = LE_HEAP_LOAD_U32((((handle) + (28)) >> 2) * 4);\n              var dataSize = LE_HEAP_LOAD_U32((((handle) + (32)) >> 2) * 4);\n              if (data && dataSize) {\n                var libData = HEAP8.slice(data, data + dataSize);\n                return flags.loadAsync ? Promise.resolve(libData) : libData;\n              }\n            }\n            var libFile = locateFile(libName);\n            if (flags.loadAsync) {\n              return new Promise(function(resolve, reject) {\n                asyncLoad(libFile, resolve, reject);\n              });\n            }\n            // load the binary synchronously\n            if (!readBinary) {\n              throw new Error(`${libFile}: file not found, and synchronous loading of external files is not available`);\n            }\n            return readBinary(libFile);\n          }\n          // libName -> exports\n          function getExports() {\n            // module not preloaded - load lib data and create new module from it\n            if (flags.loadAsync) {\n              return loadLibData().then(libData => loadWebAssemblyModule(libData, flags, libName, localScope, handle));\n            }\n            return loadWebAssemblyModule(loadLibData(), flags, libName, localScope, handle);\n          }\n          // module for lib is loaded - update the dso & global namespace\n          function moduleLoaded(exports) {\n            if (dso.global) {\n              mergeLibSymbols(exports, libName);\n            } else if (localScope) {\n              Object.assign(localScope, exports);\n            }\n            dso.exports = exports;\n          }\n          if (flags.loadAsync) {\n            return getExports().then(exports => {\n              moduleLoaded(exports);\n              return true;\n            });\n          }\n          moduleLoaded(getExports());\n          return true;\n        }\n        var reportUndefinedSymbols = () => {\n          for (var [symName, entry] of Object.entries(GOT)) {\n            if (entry.value == 0) {\n              var value = resolveGlobalSymbol(symName, true).sym;\n              if (!value && !entry.required) {\n                // Ignore undefined symbols that are imported as weak.\n                continue;\n              }\n              if (typeof value == \"function\") {\n                /** @suppress {checkTypes} */ entry.value = addFunction(value, value.sig);\n              } else if (typeof value == \"number\") {\n                entry.value = value;\n              } else {\n                throw new Error(`bad export type for '${symName}': ${typeof value}`);\n              }\n            }\n          }\n        };\n        var loadDylibs = () => {\n          if (!dynamicLibraries.length) {\n            reportUndefinedSymbols();\n            return;\n          }\n          // Load binaries asynchronously\n          addRunDependency(\"loadDylibs\");\n          dynamicLibraries.reduce((chain, lib) => chain.then(() => loadDynamicLibrary(lib, {\n            loadAsync: true,\n            global: true,\n            nodelete: true,\n            allowUndefined: true\n          })), Promise.resolve()).then(() => {\n            // we got them all, wonderful\n            reportUndefinedSymbols();\n            removeRunDependency(\"loadDylibs\");\n          });\n        };\n        var noExitRuntime = Module[\"noExitRuntime\"] || true;\n        /**\n     * @param {number} ptr\n     * @param {number} value\n     * @param {string} type\n     */ function setValue(ptr, value, type = \"i8\") {\n          if (type.endsWith(\"*\")) type = \"*\";\n          switch (type) {\n           case \"i1\":\n            HEAP8[ptr] = value;\n            break;\n\n           case \"i8\":\n            HEAP8[ptr] = value;\n            break;\n\n           case \"i16\":\n            LE_HEAP_STORE_I16(((ptr) >> 1) * 2, value);\n            break;\n\n           case \"i32\":\n            LE_HEAP_STORE_I32(((ptr) >> 2) * 4, value);\n            break;\n\n           case \"i64\":\n            abort(\"to do setValue(i64) use WASM_BIGINT\");\n\n           case \"float\":\n            LE_HEAP_STORE_F32(((ptr) >> 2) * 4, value);\n            break;\n\n           case \"double\":\n            LE_HEAP_STORE_F64(((ptr) >> 3) * 8, value);\n            break;\n\n           case \"*\":\n            LE_HEAP_STORE_U32(((ptr) >> 2) * 4, value);\n            break;\n\n           default:\n            abort(`invalid type for setValue: ${type}`);\n          }\n        }\n        var ___memory_base = new WebAssembly.Global({\n          \"value\": \"i32\",\n          \"mutable\": false\n        }, 1024);\n        var ___stack_pointer = new WebAssembly.Global({\n          \"value\": \"i32\",\n          \"mutable\": true\n        }, 78112);\n        var ___table_base = new WebAssembly.Global({\n          \"value\": \"i32\",\n          \"mutable\": false\n        }, 1);\n        var __abort_js = () => {\n          abort(\"\");\n        };\n        __abort_js.sig = \"v\";\n        var nowIsMonotonic = 1;\n        var __emscripten_get_now_is_monotonic = () => nowIsMonotonic;\n        __emscripten_get_now_is_monotonic.sig = \"i\";\n        var __emscripten_memcpy_js = (dest, src, num) => HEAPU8.copyWithin(dest, src, src + num);\n        __emscripten_memcpy_js.sig = \"vppp\";\n        var _emscripten_date_now = () => Date.now();\n        _emscripten_date_now.sig = \"d\";\n        var _emscripten_get_now;\n        // Modern environment where performance.now() is supported:\n        // N.B. a shorter form \"_emscripten_get_now = performance.now;\" is\n        // unfortunately not allowed even in current browsers (e.g. FF Nightly 75).\n        _emscripten_get_now = () => performance.now();\n        _emscripten_get_now.sig = \"d\";\n        var getHeapMax = () => // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate\n        // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side\n        // for any code that deals with heap sizes, which would require special\n        // casing all heap size related code to treat 0 specially.\n        2147483648;\n        var growMemory = size => {\n          var b = wasmMemory.buffer;\n          var pages = (size - b.byteLength + 65535) / 65536;\n          try {\n            // round size grow request up to wasm page size (fixed 64KB per spec)\n            wasmMemory.grow(pages);\n            // .grow() takes a delta compared to the previous size\n            updateMemoryViews();\n            return 1;\n          } /*success*/ catch (e) {}\n        };\n        // implicit 0 return to save code size (caller will cast \"undefined\" into 0\n        // anyhow)\n        var _emscripten_resize_heap = requestedSize => {\n          var oldSize = HEAPU8.length;\n          // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.\n          requestedSize >>>= 0;\n          // With multithreaded builds, races can happen (another thread might increase the size\n          // in between), so return a failure, and let the caller retry.\n          // Memory resize rules:\n          // 1.  Always increase heap size to at least the requested size, rounded up\n          //     to next page multiple.\n          // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap\n          //     geometrically: increase the heap size according to\n          //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most\n          //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).\n          // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap\n          //     linearly: increase the heap size by at least\n          //     MEMORY_GROWTH_LINEAR_STEP bytes.\n          // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by\n          //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest\n          // 4.  If we were unable to allocate as much memory, it may be due to\n          //     over-eager decision to excessively reserve due to (3) above.\n          //     Hence if an allocation fails, cut down on the amount of excess\n          //     growth, in an attempt to succeed to perform a smaller allocation.\n          // A limit is set for how much we can grow. We should not exceed that\n          // (the wasm binary specifies it, so if we tried, we'd fail anyhow).\n          var maxHeapSize = getHeapMax();\n          if (requestedSize > maxHeapSize) {\n            return false;\n          }\n          var alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\n          // Loop through potential heap size increases. If we attempt a too eager\n          // reservation that fails, cut down on the attempted size and reserve a\n          // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)\n          for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n            var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n            // ensure geometric growth\n            // but limit overreserving (default to capping at +96MB overgrowth at most)\n            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n            var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n            var replacement = growMemory(newSize);\n            if (replacement) {\n              return true;\n            }\n          }\n          return false;\n        };\n        _emscripten_resize_heap.sig = \"ip\";\n        var _fd_close = fd => 52;\n        _fd_close.sig = \"ii\";\n        var convertI32PairToI53Checked = (lo, hi) => ((hi + 2097152) >>> 0 < 4194305 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;\n        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n          var offset = convertI32PairToI53Checked(offset_low, offset_high);\n          return 70;\n        }\n        _fd_seek.sig = \"iiiiip\";\n        var printCharBuffers = [ null, [], [] ];\n        var printChar = (stream, curr) => {\n          var buffer = printCharBuffers[stream];\n          if (curr === 0 || curr === 10) {\n            (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n            buffer.length = 0;\n          } else {\n            buffer.push(curr);\n          }\n        };\n        var _fd_write = (fd, iov, iovcnt, pnum) => {\n          // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0\n          var num = 0;\n          for (var i = 0; i < iovcnt; i++) {\n            var ptr = LE_HEAP_LOAD_U32(((iov) >> 2) * 4);\n            var len = LE_HEAP_LOAD_U32((((iov) + (4)) >> 2) * 4);\n            iov += 8;\n            for (var j = 0; j < len; j++) {\n              printChar(fd, HEAPU8[ptr + j]);\n            }\n            num += len;\n          }\n          LE_HEAP_STORE_U32(((pnum) >> 2) * 4, num);\n          return 0;\n        };\n        _fd_write.sig = \"iippp\";\n        function _tree_sitter_log_callback(isLexMessage, messageAddress) {\n          if (currentLogCallback) {\n            const message = UTF8ToString(messageAddress);\n            currentLogCallback(message, isLexMessage !== 0);\n          }\n        }\n        function _tree_sitter_parse_callback(inputBufferAddress, index, row, column, lengthAddress) {\n          const INPUT_BUFFER_SIZE = 10 * 1024;\n          const string = currentParseCallback(index, {\n            row: row,\n            column: column\n          });\n          if (typeof string === \"string\") {\n            setValue(lengthAddress, string.length, \"i32\");\n            stringToUTF16(string, inputBufferAddress, INPUT_BUFFER_SIZE);\n          } else {\n            setValue(lengthAddress, 0, \"i32\");\n          }\n        }\n        var runtimeKeepaliveCounter = 0;\n        var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;\n        var _proc_exit = code => {\n          EXITSTATUS = code;\n          if (!keepRuntimeAlive()) {\n            Module[\"onExit\"]?.(code);\n            ABORT = true;\n          }\n          quit_(code, new ExitStatus(code));\n        };\n        _proc_exit.sig = \"vi\";\n        /** @param {boolean|number=} implicit */ var exitJS = (status, implicit) => {\n          EXITSTATUS = status;\n          _proc_exit(status);\n        };\n        var handleException = e => {\n          // Certain exception types we do not treat as errors since they are used for\n          // internal control flow.\n          // 1. ExitStatus, which is thrown by exit()\n          // 2. \"unwind\", which is thrown by emscripten_unwind_to_js_event_loop() and others\n          //    that wish to return to JS event loop.\n          if (e instanceof ExitStatus || e == \"unwind\") {\n            return EXITSTATUS;\n          }\n          quit_(1, e);\n        };\n        var lengthBytesUTF8 = str => {\n          var len = 0;\n          for (var i = 0; i < str.length; ++i) {\n            // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code\n            // unit, not a Unicode code point of the character! So decode\n            // UTF16->UTF32->UTF8.\n            // See http://unicode.org/faq/utf_bom.html#utf16-3\n            var c = str.charCodeAt(i);\n            // possibly a lead surrogate\n            if (c <= 127) {\n              len++;\n            } else if (c <= 2047) {\n              len += 2;\n            } else if (c >= 55296 && c <= 57343) {\n              len += 4;\n              ++i;\n            } else {\n              len += 3;\n            }\n          }\n          return len;\n        };\n        var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {\n          // Parameter maxBytesToWrite is not optional. Negative values, 0, null,\n          // undefined and false each don't write out any bytes.\n          if (!(maxBytesToWrite > 0)) return 0;\n          var startIdx = outIdx;\n          var endIdx = outIdx + maxBytesToWrite - 1;\n          // -1 for string null terminator.\n          for (var i = 0; i < str.length; ++i) {\n            // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code\n            // unit, not a Unicode code point of the character! So decode\n            // UTF16->UTF32->UTF8.\n            // See http://unicode.org/faq/utf_bom.html#utf16-3\n            // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description\n            // and https://www.ietf.org/rfc/rfc2279.txt\n            // and https://tools.ietf.org/html/rfc3629\n            var u = str.charCodeAt(i);\n            // possibly a lead surrogate\n            if (u >= 55296 && u <= 57343) {\n              var u1 = str.charCodeAt(++i);\n              u = 65536 + ((u & 1023) << 10) | (u1 & 1023);\n            }\n            if (u <= 127) {\n              if (outIdx >= endIdx) break;\n              heap[outIdx++] = u;\n            } else if (u <= 2047) {\n              if (outIdx + 1 >= endIdx) break;\n              heap[outIdx++] = 192 | (u >> 6);\n              heap[outIdx++] = 128 | (u & 63);\n            } else if (u <= 65535) {\n              if (outIdx + 2 >= endIdx) break;\n              heap[outIdx++] = 224 | (u >> 12);\n              heap[outIdx++] = 128 | ((u >> 6) & 63);\n              heap[outIdx++] = 128 | (u & 63);\n            } else {\n              if (outIdx + 3 >= endIdx) break;\n              heap[outIdx++] = 240 | (u >> 18);\n              heap[outIdx++] = 128 | ((u >> 12) & 63);\n              heap[outIdx++] = 128 | ((u >> 6) & 63);\n              heap[outIdx++] = 128 | (u & 63);\n            }\n          }\n          // Null-terminate the pointer to the buffer.\n          heap[outIdx] = 0;\n          return outIdx - startIdx;\n        };\n        var stringToUTF8 = (str, outPtr, maxBytesToWrite) => stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n        var stackAlloc = sz => __emscripten_stack_alloc(sz);\n        var stringToUTF8OnStack = str => {\n          var size = lengthBytesUTF8(str) + 1;\n          var ret = stackAlloc(size);\n          stringToUTF8(str, ret, size);\n          return ret;\n        };\n        var stringToUTF16 = (str, outPtr, maxBytesToWrite) => {\n          // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n          maxBytesToWrite ??= 2147483647;\n          if (maxBytesToWrite < 2) return 0;\n          maxBytesToWrite -= 2;\n          // Null terminator.\n          var startPtr = outPtr;\n          var numCharsToWrite = (maxBytesToWrite < str.length * 2) ? (maxBytesToWrite / 2) : str.length;\n          for (var i = 0; i < numCharsToWrite; ++i) {\n            // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\n            var codeUnit = str.charCodeAt(i);\n            // possibly a lead surrogate\n            LE_HEAP_STORE_I16(((outPtr) >> 1) * 2, codeUnit);\n            outPtr += 2;\n          }\n          // Null-terminate the pointer to the HEAP.\n          LE_HEAP_STORE_I16(((outPtr) >> 1) * 2, 0);\n          return outPtr - startPtr;\n        };\n        var AsciiToString = ptr => {\n          var str = \"\";\n          while (1) {\n            var ch = HEAPU8[ptr++];\n            if (!ch) return str;\n            str += String.fromCharCode(ch);\n          }\n        };\n        var wasmImports = {\n          /** @export */ __heap_base: ___heap_base,\n          /** @export */ __indirect_function_table: wasmTable,\n          /** @export */ __memory_base: ___memory_base,\n          /** @export */ __stack_pointer: ___stack_pointer,\n          /** @export */ __table_base: ___table_base,\n          /** @export */ _abort_js: __abort_js,\n          /** @export */ _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n          /** @export */ _emscripten_memcpy_js: __emscripten_memcpy_js,\n          /** @export */ emscripten_get_now: _emscripten_get_now,\n          /** @export */ emscripten_resize_heap: _emscripten_resize_heap,\n          /** @export */ fd_close: _fd_close,\n          /** @export */ fd_seek: _fd_seek,\n          /** @export */ fd_write: _fd_write,\n          /** @export */ memory: wasmMemory,\n          /** @export */ tree_sitter_log_callback: _tree_sitter_log_callback,\n          /** @export */ tree_sitter_parse_callback: _tree_sitter_parse_callback\n        };\n        var wasmExports = createWasm();\n        var ___wasm_call_ctors = () => (___wasm_call_ctors = wasmExports[\"__wasm_call_ctors\"])();\n        var ___wasm_apply_data_relocs = () => (___wasm_apply_data_relocs = wasmExports[\"__wasm_apply_data_relocs\"])();\n        var _malloc = Module[\"_malloc\"] = a0 => (_malloc = Module[\"_malloc\"] = wasmExports[\"malloc\"])(a0);\n        var _calloc = Module[\"_calloc\"] = (a0, a1) => (_calloc = Module[\"_calloc\"] = wasmExports[\"calloc\"])(a0, a1);\n        var _realloc = Module[\"_realloc\"] = (a0, a1) => (_realloc = Module[\"_realloc\"] = wasmExports[\"realloc\"])(a0, a1);\n        var _free = Module[\"_free\"] = a0 => (_free = Module[\"_free\"] = wasmExports[\"free\"])(a0);\n        var _ts_language_symbol_count = Module[\"_ts_language_symbol_count\"] = a0 => (_ts_language_symbol_count = Module[\"_ts_language_symbol_count\"] = wasmExports[\"ts_language_symbol_count\"])(a0);\n        var _ts_language_state_count = Module[\"_ts_language_state_count\"] = a0 => (_ts_language_state_count = Module[\"_ts_language_state_count\"] = wasmExports[\"ts_language_state_count\"])(a0);\n        var _ts_language_version = Module[\"_ts_language_version\"] = a0 => (_ts_language_version = Module[\"_ts_language_version\"] = wasmExports[\"ts_language_version\"])(a0);\n        var _ts_language_field_count = Module[\"_ts_language_field_count\"] = a0 => (_ts_language_field_count = Module[\"_ts_language_field_count\"] = wasmExports[\"ts_language_field_count\"])(a0);\n        var _ts_language_next_state = Module[\"_ts_language_next_state\"] = (a0, a1, a2) => (_ts_language_next_state = Module[\"_ts_language_next_state\"] = wasmExports[\"ts_language_next_state\"])(a0, a1, a2);\n        var _ts_language_symbol_name = Module[\"_ts_language_symbol_name\"] = (a0, a1) => (_ts_language_symbol_name = Module[\"_ts_language_symbol_name\"] = wasmExports[\"ts_language_symbol_name\"])(a0, a1);\n        var _ts_language_symbol_for_name = Module[\"_ts_language_symbol_for_name\"] = (a0, a1, a2, a3) => (_ts_language_symbol_for_name = Module[\"_ts_language_symbol_for_name\"] = wasmExports[\"ts_language_symbol_for_name\"])(a0, a1, a2, a3);\n        var _strncmp = Module[\"_strncmp\"] = (a0, a1, a2) => (_strncmp = Module[\"_strncmp\"] = wasmExports[\"strncmp\"])(a0, a1, a2);\n        var _ts_language_symbol_type = Module[\"_ts_language_symbol_type\"] = (a0, a1) => (_ts_language_symbol_type = Module[\"_ts_language_symbol_type\"] = wasmExports[\"ts_language_symbol_type\"])(a0, a1);\n        var _ts_language_field_name_for_id = Module[\"_ts_language_field_name_for_id\"] = (a0, a1) => (_ts_language_field_name_for_id = Module[\"_ts_language_field_name_for_id\"] = wasmExports[\"ts_language_field_name_for_id\"])(a0, a1);\n        var _ts_lookahead_iterator_new = Module[\"_ts_lookahead_iterator_new\"] = (a0, a1) => (_ts_lookahead_iterator_new = Module[\"_ts_lookahead_iterator_new\"] = wasmExports[\"ts_lookahead_iterator_new\"])(a0, a1);\n        var _ts_lookahead_iterator_delete = Module[\"_ts_lookahead_iterator_delete\"] = a0 => (_ts_lookahead_iterator_delete = Module[\"_ts_lookahead_iterator_delete\"] = wasmExports[\"ts_lookahead_iterator_delete\"])(a0);\n        var _ts_lookahead_iterator_reset_state = Module[\"_ts_lookahead_iterator_reset_state\"] = (a0, a1) => (_ts_lookahead_iterator_reset_state = Module[\"_ts_lookahead_iterator_reset_state\"] = wasmExports[\"ts_lookahead_iterator_reset_state\"])(a0, a1);\n        var _ts_lookahead_iterator_reset = Module[\"_ts_lookahead_iterator_reset\"] = (a0, a1, a2) => (_ts_lookahead_iterator_reset = Module[\"_ts_lookahead_iterator_reset\"] = wasmExports[\"ts_lookahead_iterator_reset\"])(a0, a1, a2);\n        var _ts_lookahead_iterator_next = Module[\"_ts_lookahead_iterator_next\"] = a0 => (_ts_lookahead_iterator_next = Module[\"_ts_lookahead_iterator_next\"] = wasmExports[\"ts_lookahead_iterator_next\"])(a0);\n        var _ts_lookahead_iterator_current_symbol = Module[\"_ts_lookahead_iterator_current_symbol\"] = a0 => (_ts_lookahead_iterator_current_symbol = Module[\"_ts_lookahead_iterator_current_symbol\"] = wasmExports[\"ts_lookahead_iterator_current_symbol\"])(a0);\n        var _memset = Module[\"_memset\"] = (a0, a1, a2) => (_memset = Module[\"_memset\"] = wasmExports[\"memset\"])(a0, a1, a2);\n        var _memcpy = Module[\"_memcpy\"] = (a0, a1, a2) => (_memcpy = Module[\"_memcpy\"] = wasmExports[\"memcpy\"])(a0, a1, a2);\n        var _ts_parser_delete = Module[\"_ts_parser_delete\"] = a0 => (_ts_parser_delete = Module[\"_ts_parser_delete\"] = wasmExports[\"ts_parser_delete\"])(a0);\n        var _ts_parser_reset = Module[\"_ts_parser_reset\"] = a0 => (_ts_parser_reset = Module[\"_ts_parser_reset\"] = wasmExports[\"ts_parser_reset\"])(a0);\n        var _ts_parser_set_language = Module[\"_ts_parser_set_language\"] = (a0, a1) => (_ts_parser_set_language = Module[\"_ts_parser_set_language\"] = wasmExports[\"ts_parser_set_language\"])(a0, a1);\n        var _ts_parser_timeout_micros = Module[\"_ts_parser_timeout_micros\"] = a0 => (_ts_parser_timeout_micros = Module[\"_ts_parser_timeout_micros\"] = wasmExports[\"ts_parser_timeout_micros\"])(a0);\n        var _ts_parser_set_timeout_micros = Module[\"_ts_parser_set_timeout_micros\"] = (a0, a1, a2) => (_ts_parser_set_timeout_micros = Module[\"_ts_parser_set_timeout_micros\"] = wasmExports[\"ts_parser_set_timeout_micros\"])(a0, a1, a2);\n        var _ts_parser_set_included_ranges = Module[\"_ts_parser_set_included_ranges\"] = (a0, a1, a2) => (_ts_parser_set_included_ranges = Module[\"_ts_parser_set_included_ranges\"] = wasmExports[\"ts_parser_set_included_ranges\"])(a0, a1, a2);\n        var _memmove = Module[\"_memmove\"] = (a0, a1, a2) => (_memmove = Module[\"_memmove\"] = wasmExports[\"memmove\"])(a0, a1, a2);\n        var _memcmp = Module[\"_memcmp\"] = (a0, a1, a2) => (_memcmp = Module[\"_memcmp\"] = wasmExports[\"memcmp\"])(a0, a1, a2);\n        var _ts_query_new = Module[\"_ts_query_new\"] = (a0, a1, a2, a3, a4) => (_ts_query_new = Module[\"_ts_query_new\"] = wasmExports[\"ts_query_new\"])(a0, a1, a2, a3, a4);\n        var _ts_query_delete = Module[\"_ts_query_delete\"] = a0 => (_ts_query_delete = Module[\"_ts_query_delete\"] = wasmExports[\"ts_query_delete\"])(a0);\n        var _iswspace = Module[\"_iswspace\"] = a0 => (_iswspace = Module[\"_iswspace\"] = wasmExports[\"iswspace\"])(a0);\n        var _iswalnum = Module[\"_iswalnum\"] = a0 => (_iswalnum = Module[\"_iswalnum\"] = wasmExports[\"iswalnum\"])(a0);\n        var _ts_query_pattern_count = Module[\"_ts_query_pattern_count\"] = a0 => (_ts_query_pattern_count = Module[\"_ts_query_pattern_count\"] = wasmExports[\"ts_query_pattern_count\"])(a0);\n        var _ts_query_capture_count = Module[\"_ts_query_capture_count\"] = a0 => (_ts_query_capture_count = Module[\"_ts_query_capture_count\"] = wasmExports[\"ts_query_capture_count\"])(a0);\n        var _ts_query_string_count = Module[\"_ts_query_string_count\"] = a0 => (_ts_query_string_count = Module[\"_ts_query_string_count\"] = wasmExports[\"ts_query_string_count\"])(a0);\n        var _ts_query_capture_name_for_id = Module[\"_ts_query_capture_name_for_id\"] = (a0, a1, a2) => (_ts_query_capture_name_for_id = Module[\"_ts_query_capture_name_for_id\"] = wasmExports[\"ts_query_capture_name_for_id\"])(a0, a1, a2);\n        var _ts_query_string_value_for_id = Module[\"_ts_query_string_value_for_id\"] = (a0, a1, a2) => (_ts_query_string_value_for_id = Module[\"_ts_query_string_value_for_id\"] = wasmExports[\"ts_query_string_value_for_id\"])(a0, a1, a2);\n        var _ts_query_predicates_for_pattern = Module[\"_ts_query_predicates_for_pattern\"] = (a0, a1, a2) => (_ts_query_predicates_for_pattern = Module[\"_ts_query_predicates_for_pattern\"] = wasmExports[\"ts_query_predicates_for_pattern\"])(a0, a1, a2);\n        var _ts_query_disable_capture = Module[\"_ts_query_disable_capture\"] = (a0, a1, a2) => (_ts_query_disable_capture = Module[\"_ts_query_disable_capture\"] = wasmExports[\"ts_query_disable_capture\"])(a0, a1, a2);\n        var _ts_tree_copy = Module[\"_ts_tree_copy\"] = a0 => (_ts_tree_copy = Module[\"_ts_tree_copy\"] = wasmExports[\"ts_tree_copy\"])(a0);\n        var _ts_tree_delete = Module[\"_ts_tree_delete\"] = a0 => (_ts_tree_delete = Module[\"_ts_tree_delete\"] = wasmExports[\"ts_tree_delete\"])(a0);\n        var _ts_init = Module[\"_ts_init\"] = () => (_ts_init = Module[\"_ts_init\"] = wasmExports[\"ts_init\"])();\n        var _ts_parser_new_wasm = Module[\"_ts_parser_new_wasm\"] = () => (_ts_parser_new_wasm = Module[\"_ts_parser_new_wasm\"] = wasmExports[\"ts_parser_new_wasm\"])();\n        var _ts_parser_enable_logger_wasm = Module[\"_ts_parser_enable_logger_wasm\"] = (a0, a1) => (_ts_parser_enable_logger_wasm = Module[\"_ts_parser_enable_logger_wasm\"] = wasmExports[\"ts_parser_enable_logger_wasm\"])(a0, a1);\n        var _ts_parser_parse_wasm = Module[\"_ts_parser_parse_wasm\"] = (a0, a1, a2, a3, a4) => (_ts_parser_parse_wasm = Module[\"_ts_parser_parse_wasm\"] = wasmExports[\"ts_parser_parse_wasm\"])(a0, a1, a2, a3, a4);\n        var _ts_parser_included_ranges_wasm = Module[\"_ts_parser_included_ranges_wasm\"] = a0 => (_ts_parser_included_ranges_wasm = Module[\"_ts_parser_included_ranges_wasm\"] = wasmExports[\"ts_parser_included_ranges_wasm\"])(a0);\n        var _ts_language_type_is_named_wasm = Module[\"_ts_language_type_is_named_wasm\"] = (a0, a1) => (_ts_language_type_is_named_wasm = Module[\"_ts_language_type_is_named_wasm\"] = wasmExports[\"ts_language_type_is_named_wasm\"])(a0, a1);\n        var _ts_language_type_is_visible_wasm = Module[\"_ts_language_type_is_visible_wasm\"] = (a0, a1) => (_ts_language_type_is_visible_wasm = Module[\"_ts_language_type_is_visible_wasm\"] = wasmExports[\"ts_language_type_is_visible_wasm\"])(a0, a1);\n        var _ts_tree_root_node_wasm = Module[\"_ts_tree_root_node_wasm\"] = a0 => (_ts_tree_root_node_wasm = Module[\"_ts_tree_root_node_wasm\"] = wasmExports[\"ts_tree_root_node_wasm\"])(a0);\n        var _ts_tree_root_node_with_offset_wasm = Module[\"_ts_tree_root_node_with_offset_wasm\"] = a0 => (_ts_tree_root_node_with_offset_wasm = Module[\"_ts_tree_root_node_with_offset_wasm\"] = wasmExports[\"ts_tree_root_node_with_offset_wasm\"])(a0);\n        var _ts_tree_edit_wasm = Module[\"_ts_tree_edit_wasm\"] = a0 => (_ts_tree_edit_wasm = Module[\"_ts_tree_edit_wasm\"] = wasmExports[\"ts_tree_edit_wasm\"])(a0);\n        var _ts_tree_included_ranges_wasm = Module[\"_ts_tree_included_ranges_wasm\"] = a0 => (_ts_tree_included_ranges_wasm = Module[\"_ts_tree_included_ranges_wasm\"] = wasmExports[\"ts_tree_included_ranges_wasm\"])(a0);\n        var _ts_tree_get_changed_ranges_wasm = Module[\"_ts_tree_get_changed_ranges_wasm\"] = (a0, a1) => (_ts_tree_get_changed_ranges_wasm = Module[\"_ts_tree_get_changed_ranges_wasm\"] = wasmExports[\"ts_tree_get_changed_ranges_wasm\"])(a0, a1);\n        var _ts_tree_cursor_new_wasm = Module[\"_ts_tree_cursor_new_wasm\"] = a0 => (_ts_tree_cursor_new_wasm = Module[\"_ts_tree_cursor_new_wasm\"] = wasmExports[\"ts_tree_cursor_new_wasm\"])(a0);\n        var _ts_tree_cursor_delete_wasm = Module[\"_ts_tree_cursor_delete_wasm\"] = a0 => (_ts_tree_cursor_delete_wasm = Module[\"_ts_tree_cursor_delete_wasm\"] = wasmExports[\"ts_tree_cursor_delete_wasm\"])(a0);\n        var _ts_tree_cursor_reset_wasm = Module[\"_ts_tree_cursor_reset_wasm\"] = a0 => (_ts_tree_cursor_reset_wasm = Module[\"_ts_tree_cursor_reset_wasm\"] = wasmExports[\"ts_tree_cursor_reset_wasm\"])(a0);\n        var _ts_tree_cursor_reset_to_wasm = Module[\"_ts_tree_cursor_reset_to_wasm\"] = (a0, a1) => (_ts_tree_cursor_reset_to_wasm = Module[\"_ts_tree_cursor_reset_to_wasm\"] = wasmExports[\"ts_tree_cursor_reset_to_wasm\"])(a0, a1);\n        var _ts_tree_cursor_goto_first_child_wasm = Module[\"_ts_tree_cursor_goto_first_child_wasm\"] = a0 => (_ts_tree_cursor_goto_first_child_wasm = Module[\"_ts_tree_cursor_goto_first_child_wasm\"] = wasmExports[\"ts_tree_cursor_goto_first_child_wasm\"])(a0);\n        var _ts_tree_cursor_goto_last_child_wasm = Module[\"_ts_tree_cursor_goto_last_child_wasm\"] = a0 => (_ts_tree_cursor_goto_last_child_wasm = Module[\"_ts_tree_cursor_goto_last_child_wasm\"] = wasmExports[\"ts_tree_cursor_goto_last_child_wasm\"])(a0);\n        var _ts_tree_cursor_goto_first_child_for_index_wasm = Module[\"_ts_tree_cursor_goto_first_child_for_index_wasm\"] = a0 => (_ts_tree_cursor_goto_first_child_for_index_wasm = Module[\"_ts_tree_cursor_goto_first_child_for_index_wasm\"] = wasmExports[\"ts_tree_cursor_goto_first_child_for_index_wasm\"])(a0);\n        var _ts_tree_cursor_goto_first_child_for_position_wasm = Module[\"_ts_tree_cursor_goto_first_child_for_position_wasm\"] = a0 => (_ts_tree_cursor_goto_first_child_for_position_wasm = Module[\"_ts_tree_cursor_goto_first_child_for_position_wasm\"] = wasmExports[\"ts_tree_cursor_goto_first_child_for_position_wasm\"])(a0);\n        var _ts_tree_cursor_goto_next_sibling_wasm = Module[\"_ts_tree_cursor_goto_next_sibling_wasm\"] = a0 => (_ts_tree_cursor_goto_next_sibling_wasm = Module[\"_ts_tree_cursor_goto_next_sibling_wasm\"] = wasmExports[\"ts_tree_cursor_goto_next_sibling_wasm\"])(a0);\n        var _ts_tree_cursor_goto_previous_sibling_wasm = Module[\"_ts_tree_cursor_goto_previous_sibling_wasm\"] = a0 => (_ts_tree_cursor_goto_previous_sibling_wasm = Module[\"_ts_tree_cursor_goto_previous_sibling_wasm\"] = wasmExports[\"ts_tree_cursor_goto_previous_sibling_wasm\"])(a0);\n        var _ts_tree_cursor_goto_descendant_wasm = Module[\"_ts_tree_cursor_goto_descendant_wasm\"] = (a0, a1) => (_ts_tree_cursor_goto_descendant_wasm = Module[\"_ts_tree_cursor_goto_descendant_wasm\"] = wasmExports[\"ts_tree_cursor_goto_descendant_wasm\"])(a0, a1);\n        var _ts_tree_cursor_goto_parent_wasm = Module[\"_ts_tree_cursor_goto_parent_wasm\"] = a0 => (_ts_tree_cursor_goto_parent_wasm = Module[\"_ts_tree_cursor_goto_parent_wasm\"] = wasmExports[\"ts_tree_cursor_goto_parent_wasm\"])(a0);\n        var _ts_tree_cursor_current_node_type_id_wasm = Module[\"_ts_tree_cursor_current_node_type_id_wasm\"] = a0 => (_ts_tree_cursor_current_node_type_id_wasm = Module[\"_ts_tree_cursor_current_node_type_id_wasm\"] = wasmExports[\"ts_tree_cursor_current_node_type_id_wasm\"])(a0);\n        var _ts_tree_cursor_current_node_state_id_wasm = Module[\"_ts_tree_cursor_current_node_state_id_wasm\"] = a0 => (_ts_tree_cursor_current_node_state_id_wasm = Module[\"_ts_tree_cursor_current_node_state_id_wasm\"] = wasmExports[\"ts_tree_cursor_current_node_state_id_wasm\"])(a0);\n        var _ts_tree_cursor_current_node_is_named_wasm = Module[\"_ts_tree_cursor_current_node_is_named_wasm\"] = a0 => (_ts_tree_cursor_current_node_is_named_wasm = Module[\"_ts_tree_cursor_current_node_is_named_wasm\"] = wasmExports[\"ts_tree_cursor_current_node_is_named_wasm\"])(a0);\n        var _ts_tree_cursor_current_node_is_missing_wasm = Module[\"_ts_tree_cursor_current_node_is_missing_wasm\"] = a0 => (_ts_tree_cursor_current_node_is_missing_wasm = Module[\"_ts_tree_cursor_current_node_is_missing_wasm\"] = wasmExports[\"ts_tree_cursor_current_node_is_missing_wasm\"])(a0);\n        var _ts_tree_cursor_current_node_id_wasm = Module[\"_ts_tree_cursor_current_node_id_wasm\"] = a0 => (_ts_tree_cursor_current_node_id_wasm = Module[\"_ts_tree_cursor_current_node_id_wasm\"] = wasmExports[\"ts_tree_cursor_current_node_id_wasm\"])(a0);\n        var _ts_tree_cursor_start_position_wasm = Module[\"_ts_tree_cursor_start_position_wasm\"] = a0 => (_ts_tree_cursor_start_position_wasm = Module[\"_ts_tree_cursor_start_position_wasm\"] = wasmExports[\"ts_tree_cursor_start_position_wasm\"])(a0);\n        var _ts_tree_cursor_end_position_wasm = Module[\"_ts_tree_cursor_end_position_wasm\"] = a0 => (_ts_tree_cursor_end_position_wasm = Module[\"_ts_tree_cursor_end_position_wasm\"] = wasmExports[\"ts_tree_cursor_end_position_wasm\"])(a0);\n        var _ts_tree_cursor_start_index_wasm = Module[\"_ts_tree_cursor_start_index_wasm\"] = a0 => (_ts_tree_cursor_start_index_wasm = Module[\"_ts_tree_cursor_start_index_wasm\"] = wasmExports[\"ts_tree_cursor_start_index_wasm\"])(a0);\n        var _ts_tree_cursor_end_index_wasm = Module[\"_ts_tree_cursor_end_index_wasm\"] = a0 => (_ts_tree_cursor_end_index_wasm = Module[\"_ts_tree_cursor_end_index_wasm\"] = wasmExports[\"ts_tree_cursor_end_index_wasm\"])(a0);\n        var _ts_tree_cursor_current_field_id_wasm = Module[\"_ts_tree_cursor_current_field_id_wasm\"] = a0 => (_ts_tree_cursor_current_field_id_wasm = Module[\"_ts_tree_cursor_current_field_id_wasm\"] = wasmExports[\"ts_tree_cursor_current_field_id_wasm\"])(a0);\n        var _ts_tree_cursor_current_depth_wasm = Module[\"_ts_tree_cursor_current_depth_wasm\"] = a0 => (_ts_tree_cursor_current_depth_wasm = Module[\"_ts_tree_cursor_current_depth_wasm\"] = wasmExports[\"ts_tree_cursor_current_depth_wasm\"])(a0);\n        var _ts_tree_cursor_current_descendant_index_wasm = Module[\"_ts_tree_cursor_current_descendant_index_wasm\"] = a0 => (_ts_tree_cursor_current_descendant_index_wasm = Module[\"_ts_tree_cursor_current_descendant_index_wasm\"] = wasmExports[\"ts_tree_cursor_current_descendant_index_wasm\"])(a0);\n        var _ts_tree_cursor_current_node_wasm = Module[\"_ts_tree_cursor_current_node_wasm\"] = a0 => (_ts_tree_cursor_current_node_wasm = Module[\"_ts_tree_cursor_current_node_wasm\"] = wasmExports[\"ts_tree_cursor_current_node_wasm\"])(a0);\n        var _ts_node_symbol_wasm = Module[\"_ts_node_symbol_wasm\"] = a0 => (_ts_node_symbol_wasm = Module[\"_ts_node_symbol_wasm\"] = wasmExports[\"ts_node_symbol_wasm\"])(a0);\n        var _ts_node_field_name_for_child_wasm = Module[\"_ts_node_field_name_for_child_wasm\"] = (a0, a1) => (_ts_node_field_name_for_child_wasm = Module[\"_ts_node_field_name_for_child_wasm\"] = wasmExports[\"ts_node_field_name_for_child_wasm\"])(a0, a1);\n        var _ts_node_children_by_field_id_wasm = Module[\"_ts_node_children_by_field_id_wasm\"] = (a0, a1) => (_ts_node_children_by_field_id_wasm = Module[\"_ts_node_children_by_field_id_wasm\"] = wasmExports[\"ts_node_children_by_field_id_wasm\"])(a0, a1);\n        var _ts_node_first_child_for_byte_wasm = Module[\"_ts_node_first_child_for_byte_wasm\"] = a0 => (_ts_node_first_child_for_byte_wasm = Module[\"_ts_node_first_child_for_byte_wasm\"] = wasmExports[\"ts_node_first_child_for_byte_wasm\"])(a0);\n        var _ts_node_first_named_child_for_byte_wasm = Module[\"_ts_node_first_named_child_for_byte_wasm\"] = a0 => (_ts_node_first_named_child_for_byte_wasm = Module[\"_ts_node_first_named_child_for_byte_wasm\"] = wasmExports[\"ts_node_first_named_child_for_byte_wasm\"])(a0);\n        var _ts_node_grammar_symbol_wasm = Module[\"_ts_node_grammar_symbol_wasm\"] = a0 => (_ts_node_grammar_symbol_wasm = Module[\"_ts_node_grammar_symbol_wasm\"] = wasmExports[\"ts_node_grammar_symbol_wasm\"])(a0);\n        var _ts_node_child_count_wasm = Module[\"_ts_node_child_count_wasm\"] = a0 => (_ts_node_child_count_wasm = Module[\"_ts_node_child_count_wasm\"] = wasmExports[\"ts_node_child_count_wasm\"])(a0);\n        var _ts_node_named_child_count_wasm = Module[\"_ts_node_named_child_count_wasm\"] = a0 => (_ts_node_named_child_count_wasm = Module[\"_ts_node_named_child_count_wasm\"] = wasmExports[\"ts_node_named_child_count_wasm\"])(a0);\n        var _ts_node_child_wasm = Module[\"_ts_node_child_wasm\"] = (a0, a1) => (_ts_node_child_wasm = Module[\"_ts_node_child_wasm\"] = wasmExports[\"ts_node_child_wasm\"])(a0, a1);\n        var _ts_node_named_child_wasm = Module[\"_ts_node_named_child_wasm\"] = (a0, a1) => (_ts_node_named_child_wasm = Module[\"_ts_node_named_child_wasm\"] = wasmExports[\"ts_node_named_child_wasm\"])(a0, a1);\n        var _ts_node_child_by_field_id_wasm = Module[\"_ts_node_child_by_field_id_wasm\"] = (a0, a1) => (_ts_node_child_by_field_id_wasm = Module[\"_ts_node_child_by_field_id_wasm\"] = wasmExports[\"ts_node_child_by_field_id_wasm\"])(a0, a1);\n        var _ts_node_next_sibling_wasm = Module[\"_ts_node_next_sibling_wasm\"] = a0 => (_ts_node_next_sibling_wasm = Module[\"_ts_node_next_sibling_wasm\"] = wasmExports[\"ts_node_next_sibling_wasm\"])(a0);\n        var _ts_node_prev_sibling_wasm = Module[\"_ts_node_prev_sibling_wasm\"] = a0 => (_ts_node_prev_sibling_wasm = Module[\"_ts_node_prev_sibling_wasm\"] = wasmExports[\"ts_node_prev_sibling_wasm\"])(a0);\n        var _ts_node_next_named_sibling_wasm = Module[\"_ts_node_next_named_sibling_wasm\"] = a0 => (_ts_node_next_named_sibling_wasm = Module[\"_ts_node_next_named_sibling_wasm\"] = wasmExports[\"ts_node_next_named_sibling_wasm\"])(a0);\n        var _ts_node_prev_named_sibling_wasm = Module[\"_ts_node_prev_named_sibling_wasm\"] = a0 => (_ts_node_prev_named_sibling_wasm = Module[\"_ts_node_prev_named_sibling_wasm\"] = wasmExports[\"ts_node_prev_named_sibling_wasm\"])(a0);\n        var _ts_node_descendant_count_wasm = Module[\"_ts_node_descendant_count_wasm\"] = a0 => (_ts_node_descendant_count_wasm = Module[\"_ts_node_descendant_count_wasm\"] = wasmExports[\"ts_node_descendant_count_wasm\"])(a0);\n        var _ts_node_parent_wasm = Module[\"_ts_node_parent_wasm\"] = a0 => (_ts_node_parent_wasm = Module[\"_ts_node_parent_wasm\"] = wasmExports[\"ts_node_parent_wasm\"])(a0);\n        var _ts_node_descendant_for_index_wasm = Module[\"_ts_node_descendant_for_index_wasm\"] = a0 => (_ts_node_descendant_for_index_wasm = Module[\"_ts_node_descendant_for_index_wasm\"] = wasmExports[\"ts_node_descendant_for_index_wasm\"])(a0);\n        var _ts_node_named_descendant_for_index_wasm = Module[\"_ts_node_named_descendant_for_index_wasm\"] = a0 => (_ts_node_named_descendant_for_index_wasm = Module[\"_ts_node_named_descendant_for_index_wasm\"] = wasmExports[\"ts_node_named_descendant_for_index_wasm\"])(a0);\n        var _ts_node_descendant_for_position_wasm = Module[\"_ts_node_descendant_for_position_wasm\"] = a0 => (_ts_node_descendant_for_position_wasm = Module[\"_ts_node_descendant_for_position_wasm\"] = wasmExports[\"ts_node_descendant_for_position_wasm\"])(a0);\n        var _ts_node_named_descendant_for_position_wasm = Module[\"_ts_node_named_descendant_for_position_wasm\"] = a0 => (_ts_node_named_descendant_for_position_wasm = Module[\"_ts_node_named_descendant_for_position_wasm\"] = wasmExports[\"ts_node_named_descendant_for_position_wasm\"])(a0);\n        var _ts_node_start_point_wasm = Module[\"_ts_node_start_point_wasm\"] = a0 => (_ts_node_start_point_wasm = Module[\"_ts_node_start_point_wasm\"] = wasmExports[\"ts_node_start_point_wasm\"])(a0);\n        var _ts_node_end_point_wasm = Module[\"_ts_node_end_point_wasm\"] = a0 => (_ts_node_end_point_wasm = Module[\"_ts_node_end_point_wasm\"] = wasmExports[\"ts_node_end_point_wasm\"])(a0);\n        var _ts_node_start_index_wasm = Module[\"_ts_node_start_index_wasm\"] = a0 => (_ts_node_start_index_wasm = Module[\"_ts_node_start_index_wasm\"] = wasmExports[\"ts_node_start_index_wasm\"])(a0);\n        var _ts_node_end_index_wasm = Module[\"_ts_node_end_index_wasm\"] = a0 => (_ts_node_end_index_wasm = Module[\"_ts_node_end_index_wasm\"] = wasmExports[\"ts_node_end_index_wasm\"])(a0);\n        var _ts_node_to_string_wasm = Module[\"_ts_node_to_string_wasm\"] = a0 => (_ts_node_to_string_wasm = Module[\"_ts_node_to_string_wasm\"] = wasmExports[\"ts_node_to_string_wasm\"])(a0);\n        var _ts_node_children_wasm = Module[\"_ts_node_children_wasm\"] = a0 => (_ts_node_children_wasm = Module[\"_ts_node_children_wasm\"] = wasmExports[\"ts_node_children_wasm\"])(a0);\n        var _ts_node_named_children_wasm = Module[\"_ts_node_named_children_wasm\"] = a0 => (_ts_node_named_children_wasm = Module[\"_ts_node_named_children_wasm\"] = wasmExports[\"ts_node_named_children_wasm\"])(a0);\n        var _ts_node_descendants_of_type_wasm = Module[\"_ts_node_descendants_of_type_wasm\"] = (a0, a1, a2, a3, a4, a5, a6) => (_ts_node_descendants_of_type_wasm = Module[\"_ts_node_descendants_of_type_wasm\"] = wasmExports[\"ts_node_descendants_of_type_wasm\"])(a0, a1, a2, a3, a4, a5, a6);\n        var _ts_node_is_named_wasm = Module[\"_ts_node_is_named_wasm\"] = a0 => (_ts_node_is_named_wasm = Module[\"_ts_node_is_named_wasm\"] = wasmExports[\"ts_node_is_named_wasm\"])(a0);\n        var _ts_node_has_changes_wasm = Module[\"_ts_node_has_changes_wasm\"] = a0 => (_ts_node_has_changes_wasm = Module[\"_ts_node_has_changes_wasm\"] = wasmExports[\"ts_node_has_changes_wasm\"])(a0);\n        var _ts_node_has_error_wasm = Module[\"_ts_node_has_error_wasm\"] = a0 => (_ts_node_has_error_wasm = Module[\"_ts_node_has_error_wasm\"] = wasmExports[\"ts_node_has_error_wasm\"])(a0);\n        var _ts_node_is_error_wasm = Module[\"_ts_node_is_error_wasm\"] = a0 => (_ts_node_is_error_wasm = Module[\"_ts_node_is_error_wasm\"] = wasmExports[\"ts_node_is_error_wasm\"])(a0);\n        var _ts_node_is_missing_wasm = Module[\"_ts_node_is_missing_wasm\"] = a0 => (_ts_node_is_missing_wasm = Module[\"_ts_node_is_missing_wasm\"] = wasmExports[\"ts_node_is_missing_wasm\"])(a0);\n        var _ts_node_is_extra_wasm = Module[\"_ts_node_is_extra_wasm\"] = a0 => (_ts_node_is_extra_wasm = Module[\"_ts_node_is_extra_wasm\"] = wasmExports[\"ts_node_is_extra_wasm\"])(a0);\n        var _ts_node_parse_state_wasm = Module[\"_ts_node_parse_state_wasm\"] = a0 => (_ts_node_parse_state_wasm = Module[\"_ts_node_parse_state_wasm\"] = wasmExports[\"ts_node_parse_state_wasm\"])(a0);\n        var _ts_node_next_parse_state_wasm = Module[\"_ts_node_next_parse_state_wasm\"] = a0 => (_ts_node_next_parse_state_wasm = Module[\"_ts_node_next_parse_state_wasm\"] = wasmExports[\"ts_node_next_parse_state_wasm\"])(a0);\n        var _ts_query_matches_wasm = Module[\"_ts_query_matches_wasm\"] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) => (_ts_query_matches_wasm = Module[\"_ts_query_matches_wasm\"] = wasmExports[\"ts_query_matches_wasm\"])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n        var _ts_query_captures_wasm = Module[\"_ts_query_captures_wasm\"] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) => (_ts_query_captures_wasm = Module[\"_ts_query_captures_wasm\"] = wasmExports[\"ts_query_captures_wasm\"])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\n        var _iswalpha = Module[\"_iswalpha\"] = a0 => (_iswalpha = Module[\"_iswalpha\"] = wasmExports[\"iswalpha\"])(a0);\n        var _iswblank = Module[\"_iswblank\"] = a0 => (_iswblank = Module[\"_iswblank\"] = wasmExports[\"iswblank\"])(a0);\n        var _iswdigit = Module[\"_iswdigit\"] = a0 => (_iswdigit = Module[\"_iswdigit\"] = wasmExports[\"iswdigit\"])(a0);\n        var _iswlower = Module[\"_iswlower\"] = a0 => (_iswlower = Module[\"_iswlower\"] = wasmExports[\"iswlower\"])(a0);\n        var _iswupper = Module[\"_iswupper\"] = a0 => (_iswupper = Module[\"_iswupper\"] = wasmExports[\"iswupper\"])(a0);\n        var _iswxdigit = Module[\"_iswxdigit\"] = a0 => (_iswxdigit = Module[\"_iswxdigit\"] = wasmExports[\"iswxdigit\"])(a0);\n        var _memchr = Module[\"_memchr\"] = (a0, a1, a2) => (_memchr = Module[\"_memchr\"] = wasmExports[\"memchr\"])(a0, a1, a2);\n        var _strlen = Module[\"_strlen\"] = a0 => (_strlen = Module[\"_strlen\"] = wasmExports[\"strlen\"])(a0);\n        var _strcmp = Module[\"_strcmp\"] = (a0, a1) => (_strcmp = Module[\"_strcmp\"] = wasmExports[\"strcmp\"])(a0, a1);\n        var _strncat = Module[\"_strncat\"] = (a0, a1, a2) => (_strncat = Module[\"_strncat\"] = wasmExports[\"strncat\"])(a0, a1, a2);\n        var _strncpy = Module[\"_strncpy\"] = (a0, a1, a2) => (_strncpy = Module[\"_strncpy\"] = wasmExports[\"strncpy\"])(a0, a1, a2);\n        var _towlower = Module[\"_towlower\"] = a0 => (_towlower = Module[\"_towlower\"] = wasmExports[\"towlower\"])(a0);\n        var _towupper = Module[\"_towupper\"] = a0 => (_towupper = Module[\"_towupper\"] = wasmExports[\"towupper\"])(a0);\n        var _setThrew = (a0, a1) => (_setThrew = wasmExports[\"setThrew\"])(a0, a1);\n        var __emscripten_stack_restore = a0 => (__emscripten_stack_restore = wasmExports[\"_emscripten_stack_restore\"])(a0);\n        var __emscripten_stack_alloc = a0 => (__emscripten_stack_alloc = wasmExports[\"_emscripten_stack_alloc\"])(a0);\n        var _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports[\"emscripten_stack_get_current\"])();\n        var dynCall_jiji = Module[\"dynCall_jiji\"] = (a0, a1, a2, a3, a4) => (dynCall_jiji = Module[\"dynCall_jiji\"] = wasmExports[\"dynCall_jiji\"])(a0, a1, a2, a3, a4);\n        var _orig$ts_parser_timeout_micros = Module[\"_orig$ts_parser_timeout_micros\"] = a0 => (_orig$ts_parser_timeout_micros = Module[\"_orig$ts_parser_timeout_micros\"] = wasmExports[\"orig$ts_parser_timeout_micros\"])(a0);\n        var _orig$ts_parser_set_timeout_micros = Module[\"_orig$ts_parser_set_timeout_micros\"] = (a0, a1) => (_orig$ts_parser_set_timeout_micros = Module[\"_orig$ts_parser_set_timeout_micros\"] = wasmExports[\"orig$ts_parser_set_timeout_micros\"])(a0, a1);\n        // include: postamble.js\n        // === Auto-generated postamble setup entry stuff ===\n        Module[\"AsciiToString\"] = AsciiToString;\n        Module[\"stringToUTF16\"] = stringToUTF16;\n        var calledRun;\n        dependenciesFulfilled = function runCaller() {\n          // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n          if (!calledRun) run();\n          if (!calledRun) dependenciesFulfilled = runCaller;\n        };\n        // try this again later, after new deps are fulfilled\n        function callMain(args = []) {\n          var entryFunction = resolveGlobalSymbol(\"main\").sym;\n          // Main modules can't tell if they have main() at compile time, since it may\n          // arrive from a dynamic library.\n          if (!entryFunction) return;\n          args.unshift(thisProgram);\n          var argc = args.length;\n          var argv = stackAlloc((argc + 1) * 4);\n          var argv_ptr = argv;\n          args.forEach(arg => {\n            LE_HEAP_STORE_U32(((argv_ptr) >> 2) * 4, stringToUTF8OnStack(arg));\n            argv_ptr += 4;\n          });\n          LE_HEAP_STORE_U32(((argv_ptr) >> 2) * 4, 0);\n          try {\n            var ret = entryFunction(argc, argv);\n            // if we're not running an evented main loop, it's time to exit\n            exitJS(ret, /* implicit = */ true);\n            return ret;\n          } catch (e) {\n            return handleException(e);\n          }\n        }\n        function run(args = arguments_) {\n          if (runDependencies > 0) {\n            return;\n          }\n          preRun();\n          // a preRun added a dependency, run will be called later\n          if (runDependencies > 0) {\n            return;\n          }\n          function doRun() {\n            // run may have just been called through dependencies being fulfilled just in this very frame,\n            // or while the async setStatus time below was happening\n            if (calledRun) return;\n            calledRun = true;\n            Module[\"calledRun\"] = true;\n            if (ABORT) return;\n            initRuntime();\n            preMain();\n            Module[\"onRuntimeInitialized\"]?.();\n            if (shouldRunNow) callMain(args);\n            postRun();\n          }\n          if (Module[\"setStatus\"]) {\n            Module[\"setStatus\"](\"Running...\");\n            setTimeout(function() {\n              setTimeout(function() {\n                Module[\"setStatus\"](\"\");\n              }, 1);\n              doRun();\n            }, 1);\n          } else {\n            doRun();\n          }\n        }\n        if (Module[\"preInit\"]) {\n          if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [ Module[\"preInit\"] ];\n          while (Module[\"preInit\"].length > 0) {\n            Module[\"preInit\"].pop()();\n          }\n        }\n        // shouldRunNow refers to calling main(), not run().\n        var shouldRunNow = true;\n        if (Module[\"noInitialRun\"]) shouldRunNow = false;\n        run();\n        // end include: postamble.js\n        // include: /src/lib/binding_web/binding.js\n        /* eslint-disable-next-line spaced-comment */ /// <reference types=\"emscripten\" />\n        /* eslint-disable-next-line spaced-comment */ /// <reference path=\"tree-sitter-web.d.ts\"/>\n        const C = Module;\n        const INTERNAL = {};\n        const SIZE_OF_INT = 4;\n        const SIZE_OF_CURSOR = 4 * SIZE_OF_INT;\n        const SIZE_OF_NODE = 5 * SIZE_OF_INT;\n        const SIZE_OF_POINT = 2 * SIZE_OF_INT;\n        const SIZE_OF_RANGE = 2 * SIZE_OF_INT + 2 * SIZE_OF_POINT;\n        const ZERO_POINT = {\n          row: 0,\n          column: 0\n        };\n        const QUERY_WORD_REGEX = /[\\w-.]*/g;\n        const PREDICATE_STEP_TYPE_CAPTURE = 1;\n        const PREDICATE_STEP_TYPE_STRING = 2;\n        const LANGUAGE_FUNCTION_REGEX = /^_?tree_sitter_\\w+/;\n        let VERSION;\n        let MIN_COMPATIBLE_VERSION;\n        let TRANSFER_BUFFER;\n        let currentParseCallback;\n        // eslint-disable-next-line no-unused-vars\n        let currentLogCallback;\n        // eslint-disable-next-line no-unused-vars\n        class ParserImpl {\n          static init() {\n            TRANSFER_BUFFER = C._ts_init();\n            VERSION = getValue(TRANSFER_BUFFER, \"i32\");\n            MIN_COMPATIBLE_VERSION = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n          }\n          initialize() {\n            C._ts_parser_new_wasm();\n            this[0] = getValue(TRANSFER_BUFFER, \"i32\");\n            this[1] = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n          }\n          delete() {\n            C._ts_parser_delete(this[0]);\n            C._free(this[1]);\n            this[0] = 0;\n            this[1] = 0;\n          }\n          setLanguage(language) {\n            let address;\n            if (!language) {\n              address = 0;\n              language = null;\n            } else if (language.constructor === Language) {\n              address = language[0];\n              const version = C._ts_language_version(address);\n              if (version < MIN_COMPATIBLE_VERSION || VERSION < version) {\n                throw new Error(`Incompatible language version ${version}. ` + `Compatibility range ${MIN_COMPATIBLE_VERSION} through ${VERSION}.`);\n              }\n            } else {\n              throw new Error(\"Argument must be a Language\");\n            }\n            this.language = language;\n            C._ts_parser_set_language(this[0], address);\n            return this;\n          }\n          getLanguage() {\n            return this.language;\n          }\n          parse(callback, oldTree, options) {\n            if (typeof callback === \"string\") {\n              currentParseCallback = (index, _) => callback.slice(index);\n            } else if (typeof callback === \"function\") {\n              currentParseCallback = callback;\n            } else {\n              throw new Error(\"Argument must be a string or a function\");\n            }\n            if (this.logCallback) {\n              currentLogCallback = this.logCallback;\n              C._ts_parser_enable_logger_wasm(this[0], 1);\n            } else {\n              currentLogCallback = null;\n              C._ts_parser_enable_logger_wasm(this[0], 0);\n            }\n            let rangeCount = 0;\n            let rangeAddress = 0;\n            if (options?.includedRanges) {\n              rangeCount = options.includedRanges.length;\n              rangeAddress = C._calloc(rangeCount, SIZE_OF_RANGE);\n              let address = rangeAddress;\n              for (let i = 0; i < rangeCount; i++) {\n                marshalRange(address, options.includedRanges[i]);\n                address += SIZE_OF_RANGE;\n              }\n            }\n            const treeAddress = C._ts_parser_parse_wasm(this[0], this[1], oldTree ? oldTree[0] : 0, rangeAddress, rangeCount);\n            if (!treeAddress) {\n              currentParseCallback = null;\n              currentLogCallback = null;\n              throw new Error(\"Parsing failed\");\n            }\n            const result = new Tree(INTERNAL, treeAddress, this.language, currentParseCallback);\n            currentParseCallback = null;\n            currentLogCallback = null;\n            return result;\n          }\n          reset() {\n            C._ts_parser_reset(this[0]);\n          }\n          getIncludedRanges() {\n            C._ts_parser_included_ranges_wasm(this[0]);\n            const count = getValue(TRANSFER_BUFFER, \"i32\");\n            const buffer = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n            const result = new Array(count);\n            if (count > 0) {\n              let address = buffer;\n              for (let i = 0; i < count; i++) {\n                result[i] = unmarshalRange(address);\n                address += SIZE_OF_RANGE;\n              }\n              C._free(buffer);\n            }\n            return result;\n          }\n          getTimeoutMicros() {\n            return C._ts_parser_timeout_micros(this[0]);\n          }\n          setTimeoutMicros(timeout) {\n            C._ts_parser_set_timeout_micros(this[0], timeout);\n          }\n          setLogger(callback) {\n            if (!callback) {\n              callback = null;\n            } else if (typeof callback !== \"function\") {\n              throw new Error(\"Logger callback must be a function\");\n            }\n            this.logCallback = callback;\n            return this;\n          }\n          getLogger() {\n            return this.logCallback;\n          }\n        }\n        class Tree {\n          constructor(internal, address, language, textCallback) {\n            assertInternal(internal);\n            this[0] = address;\n            this.language = language;\n            this.textCallback = textCallback;\n          }\n          copy() {\n            const address = C._ts_tree_copy(this[0]);\n            return new Tree(INTERNAL, address, this.language, this.textCallback);\n          }\n          delete() {\n            C._ts_tree_delete(this[0]);\n            this[0] = 0;\n          }\n          edit(edit) {\n            marshalEdit(edit);\n            C._ts_tree_edit_wasm(this[0]);\n          }\n          get rootNode() {\n            C._ts_tree_root_node_wasm(this[0]);\n            return unmarshalNode(this);\n          }\n          rootNodeWithOffset(offsetBytes, offsetExtent) {\n            const address = TRANSFER_BUFFER + SIZE_OF_NODE;\n            setValue(address, offsetBytes, \"i32\");\n            marshalPoint(address + SIZE_OF_INT, offsetExtent);\n            C._ts_tree_root_node_with_offset_wasm(this[0]);\n            return unmarshalNode(this);\n          }\n          getLanguage() {\n            return this.language;\n          }\n          walk() {\n            return this.rootNode.walk();\n          }\n          getChangedRanges(other) {\n            if (other.constructor !== Tree) {\n              throw new TypeError(\"Argument must be a Tree\");\n            }\n            C._ts_tree_get_changed_ranges_wasm(this[0], other[0]);\n            const count = getValue(TRANSFER_BUFFER, \"i32\");\n            const buffer = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n            const result = new Array(count);\n            if (count > 0) {\n              let address = buffer;\n              for (let i = 0; i < count; i++) {\n                result[i] = unmarshalRange(address);\n                address += SIZE_OF_RANGE;\n              }\n              C._free(buffer);\n            }\n            return result;\n          }\n          getIncludedRanges() {\n            C._ts_tree_included_ranges_wasm(this[0]);\n            const count = getValue(TRANSFER_BUFFER, \"i32\");\n            const buffer = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n            const result = new Array(count);\n            if (count > 0) {\n              let address = buffer;\n              for (let i = 0; i < count; i++) {\n                result[i] = unmarshalRange(address);\n                address += SIZE_OF_RANGE;\n              }\n              C._free(buffer);\n            }\n            return result;\n          }\n        }\n        class Node {\n          constructor(internal, tree) {\n            assertInternal(internal);\n            this.tree = tree;\n          }\n          get typeId() {\n            marshalNode(this);\n            return C._ts_node_symbol_wasm(this.tree[0]);\n          }\n          get grammarId() {\n            marshalNode(this);\n            return C._ts_node_grammar_symbol_wasm(this.tree[0]);\n          }\n          get type() {\n            return this.tree.language.types[this.typeId] || \"ERROR\";\n          }\n          get grammarType() {\n            return this.tree.language.types[this.grammarId] || \"ERROR\";\n          }\n          get endPosition() {\n            marshalNode(this);\n            C._ts_node_end_point_wasm(this.tree[0]);\n            return unmarshalPoint(TRANSFER_BUFFER);\n          }\n          get endIndex() {\n            marshalNode(this);\n            return C._ts_node_end_index_wasm(this.tree[0]);\n          }\n          get text() {\n            return getText(this.tree, this.startIndex, this.endIndex);\n          }\n          get parseState() {\n            marshalNode(this);\n            return C._ts_node_parse_state_wasm(this.tree[0]);\n          }\n          get nextParseState() {\n            marshalNode(this);\n            return C._ts_node_next_parse_state_wasm(this.tree[0]);\n          }\n          get isNamed() {\n            marshalNode(this);\n            return C._ts_node_is_named_wasm(this.tree[0]) === 1;\n          }\n          get hasError() {\n            marshalNode(this);\n            return C._ts_node_has_error_wasm(this.tree[0]) === 1;\n          }\n          get hasChanges() {\n            marshalNode(this);\n            return C._ts_node_has_changes_wasm(this.tree[0]) === 1;\n          }\n          get isError() {\n            marshalNode(this);\n            return C._ts_node_is_error_wasm(this.tree[0]) === 1;\n          }\n          get isMissing() {\n            marshalNode(this);\n            return C._ts_node_is_missing_wasm(this.tree[0]) === 1;\n          }\n          get isExtra() {\n            marshalNode(this);\n            return C._ts_node_is_extra_wasm(this.tree[0]) === 1;\n          }\n          equals(other) {\n            return this.id === other.id;\n          }\n          child(index) {\n            marshalNode(this);\n            C._ts_node_child_wasm(this.tree[0], index);\n            return unmarshalNode(this.tree);\n          }\n          namedChild(index) {\n            marshalNode(this);\n            C._ts_node_named_child_wasm(this.tree[0], index);\n            return unmarshalNode(this.tree);\n          }\n          childForFieldId(fieldId) {\n            marshalNode(this);\n            C._ts_node_child_by_field_id_wasm(this.tree[0], fieldId);\n            return unmarshalNode(this.tree);\n          }\n          childForFieldName(fieldName) {\n            const fieldId = this.tree.language.fields.indexOf(fieldName);\n            if (fieldId !== -1) return this.childForFieldId(fieldId);\n            return null;\n          }\n          fieldNameForChild(index) {\n            marshalNode(this);\n            const address = C._ts_node_field_name_for_child_wasm(this.tree[0], index);\n            if (!address) {\n              return null;\n            }\n            const result = AsciiToString(address);\n            // must not free, the string memory is owned by the language\n            return result;\n          }\n          childrenForFieldName(fieldName) {\n            const fieldId = this.tree.language.fields.indexOf(fieldName);\n            if (fieldId !== -1 && fieldId !== 0) return this.childrenForFieldId(fieldId);\n            return [];\n          }\n          childrenForFieldId(fieldId) {\n            marshalNode(this);\n            C._ts_node_children_by_field_id_wasm(this.tree[0], fieldId);\n            const count = getValue(TRANSFER_BUFFER, \"i32\");\n            const buffer = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n            const result = new Array(count);\n            if (count > 0) {\n              let address = buffer;\n              for (let i = 0; i < count; i++) {\n                result[i] = unmarshalNode(this.tree, address);\n                address += SIZE_OF_NODE;\n              }\n              C._free(buffer);\n            }\n            return result;\n          }\n          firstChildForIndex(index) {\n            marshalNode(this);\n            const address = TRANSFER_BUFFER + SIZE_OF_NODE;\n            setValue(address, index, \"i32\");\n            C._ts_node_first_child_for_byte_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          firstNamedChildForIndex(index) {\n            marshalNode(this);\n            const address = TRANSFER_BUFFER + SIZE_OF_NODE;\n            setValue(address, index, \"i32\");\n            C._ts_node_first_named_child_for_byte_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          get childCount() {\n            marshalNode(this);\n            return C._ts_node_child_count_wasm(this.tree[0]);\n          }\n          get namedChildCount() {\n            marshalNode(this);\n            return C._ts_node_named_child_count_wasm(this.tree[0]);\n          }\n          get firstChild() {\n            return this.child(0);\n          }\n          get firstNamedChild() {\n            return this.namedChild(0);\n          }\n          get lastChild() {\n            return this.child(this.childCount - 1);\n          }\n          get lastNamedChild() {\n            return this.namedChild(this.namedChildCount - 1);\n          }\n          get children() {\n            if (!this._children) {\n              marshalNode(this);\n              C._ts_node_children_wasm(this.tree[0]);\n              const count = getValue(TRANSFER_BUFFER, \"i32\");\n              const buffer = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n              this._children = new Array(count);\n              if (count > 0) {\n                let address = buffer;\n                for (let i = 0; i < count; i++) {\n                  this._children[i] = unmarshalNode(this.tree, address);\n                  address += SIZE_OF_NODE;\n                }\n                C._free(buffer);\n              }\n            }\n            return this._children;\n          }\n          get namedChildren() {\n            if (!this._namedChildren) {\n              marshalNode(this);\n              C._ts_node_named_children_wasm(this.tree[0]);\n              const count = getValue(TRANSFER_BUFFER, \"i32\");\n              const buffer = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n              this._namedChildren = new Array(count);\n              if (count > 0) {\n                let address = buffer;\n                for (let i = 0; i < count; i++) {\n                  this._namedChildren[i] = unmarshalNode(this.tree, address);\n                  address += SIZE_OF_NODE;\n                }\n                C._free(buffer);\n              }\n            }\n            return this._namedChildren;\n          }\n          descendantsOfType(types, startPosition, endPosition) {\n            if (!Array.isArray(types)) types = [ types ];\n            if (!startPosition) startPosition = ZERO_POINT;\n            if (!endPosition) endPosition = ZERO_POINT;\n            // Convert the type strings to numeric type symbols.\n            const symbols = [];\n            const typesBySymbol = this.tree.language.types;\n            for (let i = 0, n = typesBySymbol.length; i < n; i++) {\n              if (types.includes(typesBySymbol[i])) {\n                symbols.push(i);\n              }\n            }\n            // Copy the array of symbols to the WASM heap.\n            const symbolsAddress = C._malloc(SIZE_OF_INT * symbols.length);\n            for (let i = 0, n = symbols.length; i < n; i++) {\n              setValue(symbolsAddress + i * SIZE_OF_INT, symbols[i], \"i32\");\n            }\n            // Call the C API to compute the descendants.\n            marshalNode(this);\n            C._ts_node_descendants_of_type_wasm(this.tree[0], symbolsAddress, symbols.length, startPosition.row, startPosition.column, endPosition.row, endPosition.column);\n            // Instantiate the nodes based on the data returned.\n            const descendantCount = getValue(TRANSFER_BUFFER, \"i32\");\n            const descendantAddress = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n            const result = new Array(descendantCount);\n            if (descendantCount > 0) {\n              let address = descendantAddress;\n              for (let i = 0; i < descendantCount; i++) {\n                result[i] = unmarshalNode(this.tree, address);\n                address += SIZE_OF_NODE;\n              }\n            }\n            // Free the intermediate buffers\n            C._free(descendantAddress);\n            C._free(symbolsAddress);\n            return result;\n          }\n          get nextSibling() {\n            marshalNode(this);\n            C._ts_node_next_sibling_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          get previousSibling() {\n            marshalNode(this);\n            C._ts_node_prev_sibling_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          get nextNamedSibling() {\n            marshalNode(this);\n            C._ts_node_next_named_sibling_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          get previousNamedSibling() {\n            marshalNode(this);\n            C._ts_node_prev_named_sibling_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          get descendantCount() {\n            marshalNode(this);\n            return C._ts_node_descendant_count_wasm(this.tree[0]);\n          }\n          get parent() {\n            marshalNode(this);\n            C._ts_node_parent_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          descendantForIndex(start, end = start) {\n            if (typeof start !== \"number\" || typeof end !== \"number\") {\n              throw new Error(\"Arguments must be numbers\");\n            }\n            marshalNode(this);\n            const address = TRANSFER_BUFFER + SIZE_OF_NODE;\n            setValue(address, start, \"i32\");\n            setValue(address + SIZE_OF_INT, end, \"i32\");\n            C._ts_node_descendant_for_index_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          namedDescendantForIndex(start, end = start) {\n            if (typeof start !== \"number\" || typeof end !== \"number\") {\n              throw new Error(\"Arguments must be numbers\");\n            }\n            marshalNode(this);\n            const address = TRANSFER_BUFFER + SIZE_OF_NODE;\n            setValue(address, start, \"i32\");\n            setValue(address + SIZE_OF_INT, end, \"i32\");\n            C._ts_node_named_descendant_for_index_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          descendantForPosition(start, end = start) {\n            if (!isPoint(start) || !isPoint(end)) {\n              throw new Error(\"Arguments must be {row, column} objects\");\n            }\n            marshalNode(this);\n            const address = TRANSFER_BUFFER + SIZE_OF_NODE;\n            marshalPoint(address, start);\n            marshalPoint(address + SIZE_OF_POINT, end);\n            C._ts_node_descendant_for_position_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          namedDescendantForPosition(start, end = start) {\n            if (!isPoint(start) || !isPoint(end)) {\n              throw new Error(\"Arguments must be {row, column} objects\");\n            }\n            marshalNode(this);\n            const address = TRANSFER_BUFFER + SIZE_OF_NODE;\n            marshalPoint(address, start);\n            marshalPoint(address + SIZE_OF_POINT, end);\n            C._ts_node_named_descendant_for_position_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          walk() {\n            marshalNode(this);\n            C._ts_tree_cursor_new_wasm(this.tree[0]);\n            return new TreeCursor(INTERNAL, this.tree);\n          }\n          toString() {\n            marshalNode(this);\n            const address = C._ts_node_to_string_wasm(this.tree[0]);\n            const result = AsciiToString(address);\n            C._free(address);\n            return result;\n          }\n        }\n        class TreeCursor {\n          constructor(internal, tree) {\n            assertInternal(internal);\n            this.tree = tree;\n            unmarshalTreeCursor(this);\n          }\n          delete() {\n            marshalTreeCursor(this);\n            C._ts_tree_cursor_delete_wasm(this.tree[0]);\n            this[0] = this[1] = this[2] = 0;\n          }\n          reset(node) {\n            marshalNode(node);\n            marshalTreeCursor(this, TRANSFER_BUFFER + SIZE_OF_NODE);\n            C._ts_tree_cursor_reset_wasm(this.tree[0]);\n            unmarshalTreeCursor(this);\n          }\n          resetTo(cursor) {\n            marshalTreeCursor(this, TRANSFER_BUFFER);\n            marshalTreeCursor(cursor, TRANSFER_BUFFER + SIZE_OF_CURSOR);\n            C._ts_tree_cursor_reset_to_wasm(this.tree[0], cursor.tree[0]);\n            unmarshalTreeCursor(this);\n          }\n          get nodeType() {\n            return this.tree.language.types[this.nodeTypeId] || \"ERROR\";\n          }\n          get nodeTypeId() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_current_node_type_id_wasm(this.tree[0]);\n          }\n          get nodeStateId() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_current_node_state_id_wasm(this.tree[0]);\n          }\n          get nodeId() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_current_node_id_wasm(this.tree[0]);\n          }\n          get nodeIsNamed() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_current_node_is_named_wasm(this.tree[0]) === 1;\n          }\n          get nodeIsMissing() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_current_node_is_missing_wasm(this.tree[0]) === 1;\n          }\n          get nodeText() {\n            marshalTreeCursor(this);\n            const startIndex = C._ts_tree_cursor_start_index_wasm(this.tree[0]);\n            const endIndex = C._ts_tree_cursor_end_index_wasm(this.tree[0]);\n            return getText(this.tree, startIndex, endIndex);\n          }\n          get startPosition() {\n            marshalTreeCursor(this);\n            C._ts_tree_cursor_start_position_wasm(this.tree[0]);\n            return unmarshalPoint(TRANSFER_BUFFER);\n          }\n          get endPosition() {\n            marshalTreeCursor(this);\n            C._ts_tree_cursor_end_position_wasm(this.tree[0]);\n            return unmarshalPoint(TRANSFER_BUFFER);\n          }\n          get startIndex() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_start_index_wasm(this.tree[0]);\n          }\n          get endIndex() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_end_index_wasm(this.tree[0]);\n          }\n          get currentNode() {\n            marshalTreeCursor(this);\n            C._ts_tree_cursor_current_node_wasm(this.tree[0]);\n            return unmarshalNode(this.tree);\n          }\n          get currentFieldId() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_current_field_id_wasm(this.tree[0]);\n          }\n          get currentFieldName() {\n            return this.tree.language.fields[this.currentFieldId];\n          }\n          get currentDepth() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_current_depth_wasm(this.tree[0]);\n          }\n          get currentDescendantIndex() {\n            marshalTreeCursor(this);\n            return C._ts_tree_cursor_current_descendant_index_wasm(this.tree[0]);\n          }\n          gotoFirstChild() {\n            marshalTreeCursor(this);\n            const result = C._ts_tree_cursor_goto_first_child_wasm(this.tree[0]);\n            unmarshalTreeCursor(this);\n            return result === 1;\n          }\n          gotoLastChild() {\n            marshalTreeCursor(this);\n            const result = C._ts_tree_cursor_goto_last_child_wasm(this.tree[0]);\n            unmarshalTreeCursor(this);\n            return result === 1;\n          }\n          gotoFirstChildForIndex(goalIndex) {\n            marshalTreeCursor(this);\n            setValue(TRANSFER_BUFFER + SIZE_OF_CURSOR, goalIndex, \"i32\");\n            const result = C._ts_tree_cursor_goto_first_child_for_index_wasm(this.tree[0]);\n            unmarshalTreeCursor(this);\n            return result === 1;\n          }\n          gotoFirstChildForPosition(goalPosition) {\n            marshalTreeCursor(this);\n            marshalPoint(TRANSFER_BUFFER + SIZE_OF_CURSOR, goalPosition);\n            const result = C._ts_tree_cursor_goto_first_child_for_position_wasm(this.tree[0]);\n            unmarshalTreeCursor(this);\n            return result === 1;\n          }\n          gotoNextSibling() {\n            marshalTreeCursor(this);\n            const result = C._ts_tree_cursor_goto_next_sibling_wasm(this.tree[0]);\n            unmarshalTreeCursor(this);\n            return result === 1;\n          }\n          gotoPreviousSibling() {\n            marshalTreeCursor(this);\n            const result = C._ts_tree_cursor_goto_previous_sibling_wasm(this.tree[0]);\n            unmarshalTreeCursor(this);\n            return result === 1;\n          }\n          gotoDescendant(goalDescendantindex) {\n            marshalTreeCursor(this);\n            C._ts_tree_cursor_goto_descendant_wasm(this.tree[0], goalDescendantindex);\n            unmarshalTreeCursor(this);\n          }\n          gotoParent() {\n            marshalTreeCursor(this);\n            const result = C._ts_tree_cursor_goto_parent_wasm(this.tree[0]);\n            unmarshalTreeCursor(this);\n            return result === 1;\n          }\n        }\n        class Language {\n          constructor(internal, address) {\n            assertInternal(internal);\n            this[0] = address;\n            this.types = new Array(C._ts_language_symbol_count(this[0]));\n            for (let i = 0, n = this.types.length; i < n; i++) {\n              if (C._ts_language_symbol_type(this[0], i) < 2) {\n                this.types[i] = UTF8ToString(C._ts_language_symbol_name(this[0], i));\n              }\n            }\n            this.fields = new Array(C._ts_language_field_count(this[0]) + 1);\n            for (let i = 0, n = this.fields.length; i < n; i++) {\n              const fieldName = C._ts_language_field_name_for_id(this[0], i);\n              if (fieldName !== 0) {\n                this.fields[i] = UTF8ToString(fieldName);\n              } else {\n                this.fields[i] = null;\n              }\n            }\n          }\n          get version() {\n            return C._ts_language_version(this[0]);\n          }\n          get fieldCount() {\n            return this.fields.length - 1;\n          }\n          get stateCount() {\n            return C._ts_language_state_count(this[0]);\n          }\n          fieldIdForName(fieldName) {\n            const result = this.fields.indexOf(fieldName);\n            if (result !== -1) {\n              return result;\n            } else {\n              return null;\n            }\n          }\n          fieldNameForId(fieldId) {\n            return this.fields[fieldId] || null;\n          }\n          idForNodeType(type, named) {\n            const typeLength = lengthBytesUTF8(type);\n            const typeAddress = C._malloc(typeLength + 1);\n            stringToUTF8(type, typeAddress, typeLength + 1);\n            const result = C._ts_language_symbol_for_name(this[0], typeAddress, typeLength, named);\n            C._free(typeAddress);\n            return result || null;\n          }\n          get nodeTypeCount() {\n            return C._ts_language_symbol_count(this[0]);\n          }\n          nodeTypeForId(typeId) {\n            const name = C._ts_language_symbol_name(this[0], typeId);\n            return name ? UTF8ToString(name) : null;\n          }\n          nodeTypeIsNamed(typeId) {\n            return C._ts_language_type_is_named_wasm(this[0], typeId) ? true : false;\n          }\n          nodeTypeIsVisible(typeId) {\n            return C._ts_language_type_is_visible_wasm(this[0], typeId) ? true : false;\n          }\n          nextState(stateId, typeId) {\n            return C._ts_language_next_state(this[0], stateId, typeId);\n          }\n          lookaheadIterator(stateId) {\n            const address = C._ts_lookahead_iterator_new(this[0], stateId);\n            if (address) return new LookaheadIterable(INTERNAL, address, this);\n            return null;\n          }\n          query(source) {\n            const sourceLength = lengthBytesUTF8(source);\n            const sourceAddress = C._malloc(sourceLength + 1);\n            stringToUTF8(source, sourceAddress, sourceLength + 1);\n            const address = C._ts_query_new(this[0], sourceAddress, sourceLength, TRANSFER_BUFFER, TRANSFER_BUFFER + SIZE_OF_INT);\n            if (!address) {\n              const errorId = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n              const errorByte = getValue(TRANSFER_BUFFER, \"i32\");\n              const errorIndex = UTF8ToString(sourceAddress, errorByte).length;\n              const suffix = source.substr(errorIndex, 100).split(\"\\n\")[0];\n              let word = suffix.match(QUERY_WORD_REGEX)[0];\n              let error;\n              switch (errorId) {\n               case 2:\n                error = new RangeError(`Bad node name '${word}'`);\n                break;\n\n               case 3:\n                error = new RangeError(`Bad field name '${word}'`);\n                break;\n\n               case 4:\n                error = new RangeError(`Bad capture name @${word}`);\n                break;\n\n               case 5:\n                error = new TypeError(`Bad pattern structure at offset ${errorIndex}: '${suffix}'...`);\n                word = \"\";\n                break;\n\n               default:\n                error = new SyntaxError(`Bad syntax at offset ${errorIndex}: '${suffix}'...`);\n                word = \"\";\n                break;\n              }\n              error.index = errorIndex;\n              error.length = word.length;\n              C._free(sourceAddress);\n              throw error;\n            }\n            const stringCount = C._ts_query_string_count(address);\n            const captureCount = C._ts_query_capture_count(address);\n            const patternCount = C._ts_query_pattern_count(address);\n            const captureNames = new Array(captureCount);\n            const stringValues = new Array(stringCount);\n            for (let i = 0; i < captureCount; i++) {\n              const nameAddress = C._ts_query_capture_name_for_id(address, i, TRANSFER_BUFFER);\n              const nameLength = getValue(TRANSFER_BUFFER, \"i32\");\n              captureNames[i] = UTF8ToString(nameAddress, nameLength);\n            }\n            for (let i = 0; i < stringCount; i++) {\n              const valueAddress = C._ts_query_string_value_for_id(address, i, TRANSFER_BUFFER);\n              const nameLength = getValue(TRANSFER_BUFFER, \"i32\");\n              stringValues[i] = UTF8ToString(valueAddress, nameLength);\n            }\n            const setProperties = new Array(patternCount);\n            const assertedProperties = new Array(patternCount);\n            const refutedProperties = new Array(patternCount);\n            const predicates = new Array(patternCount);\n            const textPredicates = new Array(patternCount);\n            for (let i = 0; i < patternCount; i++) {\n              const predicatesAddress = C._ts_query_predicates_for_pattern(address, i, TRANSFER_BUFFER);\n              const stepCount = getValue(TRANSFER_BUFFER, \"i32\");\n              predicates[i] = [];\n              textPredicates[i] = [];\n              const steps = [];\n              let stepAddress = predicatesAddress;\n              for (let j = 0; j < stepCount; j++) {\n                const stepType = getValue(stepAddress, \"i32\");\n                stepAddress += SIZE_OF_INT;\n                const stepValueId = getValue(stepAddress, \"i32\");\n                stepAddress += SIZE_OF_INT;\n                if (stepType === PREDICATE_STEP_TYPE_CAPTURE) {\n                  steps.push({\n                    type: \"capture\",\n                    name: captureNames[stepValueId]\n                  });\n                } else if (stepType === PREDICATE_STEP_TYPE_STRING) {\n                  steps.push({\n                    type: \"string\",\n                    value: stringValues[stepValueId]\n                  });\n                } else if (steps.length > 0) {\n                  if (steps[0].type !== \"string\") {\n                    throw new Error(\"Predicates must begin with a literal value\");\n                  }\n                  const operator = steps[0].value;\n                  let isPositive = true;\n                  let matchAll = true;\n                  let captureName;\n                  switch (operator) {\n                   case \"any-not-eq?\":\n                   case \"not-eq?\":\n                    isPositive = false;\n\n                   case \"any-eq?\":\n                   case \"eq?\":\n                    if (steps.length !== 3) {\n                      throw new Error(`Wrong number of arguments to \\`#${operator}\\` predicate. Expected 2, got ${steps.length - 1}`);\n                    }\n                    if (steps[1].type !== \"capture\") {\n                      throw new Error(`First argument of \\`#${operator}\\` predicate must be a capture. Got \"${steps[1].value}\"`);\n                    }\n                    matchAll = !operator.startsWith(\"any-\");\n                    if (steps[2].type === \"capture\") {\n                      const captureName1 = steps[1].name;\n                      const captureName2 = steps[2].name;\n                      textPredicates[i].push(captures => {\n                        const nodes1 = [];\n                        const nodes2 = [];\n                        for (const c of captures) {\n                          if (c.name === captureName1) nodes1.push(c.node);\n                          if (c.name === captureName2) nodes2.push(c.node);\n                        }\n                        const compare = (n1, n2, positive) => positive ? n1.text === n2.text : n1.text !== n2.text;\n                        return matchAll ? nodes1.every(n1 => nodes2.some(n2 => compare(n1, n2, isPositive))) : nodes1.some(n1 => nodes2.some(n2 => compare(n1, n2, isPositive)));\n                      });\n                    } else {\n                      captureName = steps[1].name;\n                      const stringValue = steps[2].value;\n                      const matches = n => n.text === stringValue;\n                      const doesNotMatch = n => n.text !== stringValue;\n                      textPredicates[i].push(captures => {\n                        const nodes = [];\n                        for (const c of captures) {\n                          if (c.name === captureName) nodes.push(c.node);\n                        }\n                        const test = isPositive ? matches : doesNotMatch;\n                        return matchAll ? nodes.every(test) : nodes.some(test);\n                      });\n                    }\n                    break;\n\n                   case \"any-not-match?\":\n                   case \"not-match?\":\n                    isPositive = false;\n\n                   case \"any-match?\":\n                   case \"match?\":\n                    if (steps.length !== 3) {\n                      throw new Error(`Wrong number of arguments to \\`#${operator}\\` predicate. Expected 2, got ${steps.length - 1}.`);\n                    }\n                    if (steps[1].type !== \"capture\") {\n                      throw new Error(`First argument of \\`#${operator}\\` predicate must be a capture. Got \"${steps[1].value}\".`);\n                    }\n                    if (steps[2].type !== \"string\") {\n                      throw new Error(`Second argument of \\`#${operator}\\` predicate must be a string. Got @${steps[2].value}.`);\n                    }\n                    captureName = steps[1].name;\n                    const regex = new RegExp(steps[2].value);\n                    matchAll = !operator.startsWith(\"any-\");\n                    textPredicates[i].push(captures => {\n                      const nodes = [];\n                      for (const c of captures) {\n                        if (c.name === captureName) nodes.push(c.node.text);\n                      }\n                      const test = (text, positive) => positive ? regex.test(text) : !regex.test(text);\n                      if (nodes.length === 0) return !isPositive;\n                      return matchAll ? nodes.every(text => test(text, isPositive)) : nodes.some(text => test(text, isPositive));\n                    });\n                    break;\n\n                   case \"set!\":\n                    if (steps.length < 2 || steps.length > 3) {\n                      throw new Error(`Wrong number of arguments to \\`#set!\\` predicate. Expected 1 or 2. Got ${steps.length - 1}.`);\n                    }\n                    if (steps.some(s => s.type !== \"string\")) {\n                      throw new Error(`Arguments to \\`#set!\\` predicate must be a strings.\".`);\n                    }\n                    if (!setProperties[i]) setProperties[i] = {};\n                    setProperties[i][steps[1].value] = steps[2] ? steps[2].value : null;\n                    break;\n\n                   case \"is?\":\n                   case \"is-not?\":\n                    if (steps.length < 2 || steps.length > 3) {\n                      throw new Error(`Wrong number of arguments to \\`#${operator}\\` predicate. Expected 1 or 2. Got ${steps.length - 1}.`);\n                    }\n                    if (steps.some(s => s.type !== \"string\")) {\n                      throw new Error(`Arguments to \\`#${operator}\\` predicate must be a strings.\".`);\n                    }\n                    const properties = operator === \"is?\" ? assertedProperties : refutedProperties;\n                    if (!properties[i]) properties[i] = {};\n                    properties[i][steps[1].value] = steps[2] ? steps[2].value : null;\n                    break;\n\n                   case \"not-any-of?\":\n                    isPositive = false;\n\n                   case \"any-of?\":\n                    if (steps.length < 2) {\n                      throw new Error(`Wrong number of arguments to \\`#${operator}\\` predicate. Expected at least 1. Got ${steps.length - 1}.`);\n                    }\n                    if (steps[1].type !== \"capture\") {\n                      throw new Error(`First argument of \\`#${operator}\\` predicate must be a capture. Got \"${steps[1].value}\".`);\n                    }\n                    for (let i = 2; i < steps.length; i++) {\n                      if (steps[i].type !== \"string\") {\n                        throw new Error(`Arguments to \\`#${operator}\\` predicate must be a strings.\".`);\n                      }\n                    }\n                    captureName = steps[1].name;\n                    const values = steps.slice(2).map(s => s.value);\n                    textPredicates[i].push(captures => {\n                      const nodes = [];\n                      for (const c of captures) {\n                        if (c.name === captureName) nodes.push(c.node.text);\n                      }\n                      if (nodes.length === 0) return !isPositive;\n                      return nodes.every(text => values.includes(text)) === isPositive;\n                    });\n                    break;\n\n                   default:\n                    predicates[i].push({\n                      operator: operator,\n                      operands: steps.slice(1)\n                    });\n                  }\n                  steps.length = 0;\n                }\n              }\n              Object.freeze(setProperties[i]);\n              Object.freeze(assertedProperties[i]);\n              Object.freeze(refutedProperties[i]);\n            }\n            C._free(sourceAddress);\n            return new Query(INTERNAL, address, captureNames, textPredicates, predicates, Object.freeze(setProperties), Object.freeze(assertedProperties), Object.freeze(refutedProperties));\n          }\n          static load(input) {\n            let bytes;\n            if (input instanceof Uint8Array) {\n              bytes = Promise.resolve(input);\n            } else {\n              const url = input;\n              if (typeof process !== \"undefined\" && process.versions && process.versions.node) {\n                const fs = require(\"fs\");\n                bytes = Promise.resolve(fs.readFileSync(url));\n              } else {\n                bytes = fetch(url).then(response => response.arrayBuffer().then(buffer => {\n                  if (response.ok) {\n                    return new Uint8Array(buffer);\n                  } else {\n                    const body = new TextDecoder(\"utf-8\").decode(buffer);\n                    throw new Error(`Language.load failed with status ${response.status}.\\n\\n${body}`);\n                  }\n                }));\n              }\n            }\n            return bytes.then(bytes => loadWebAssemblyModule(bytes, {\n              loadAsync: true\n            })).then(mod => {\n              const symbolNames = Object.keys(mod);\n              const functionName = symbolNames.find(key => LANGUAGE_FUNCTION_REGEX.test(key) && !key.includes(\"external_scanner_\"));\n              if (!functionName) {\n                console.log(`Couldn't find language function in WASM file. Symbols:\\n${JSON.stringify(symbolNames, null, 2)}`);\n              }\n              const languageAddress = mod[functionName]();\n              return new Language(INTERNAL, languageAddress);\n            });\n          }\n        }\n        class LookaheadIterable {\n          constructor(internal, address, language) {\n            assertInternal(internal);\n            this[0] = address;\n            this.language = language;\n          }\n          get currentTypeId() {\n            return C._ts_lookahead_iterator_current_symbol(this[0]);\n          }\n          get currentType() {\n            return this.language.types[this.currentTypeId] || \"ERROR\";\n          }\n          delete() {\n            C._ts_lookahead_iterator_delete(this[0]);\n            this[0] = 0;\n          }\n          resetState(stateId) {\n            return C._ts_lookahead_iterator_reset_state(this[0], stateId);\n          }\n          reset(language, stateId) {\n            if (C._ts_lookahead_iterator_reset(this[0], language[0], stateId)) {\n              this.language = language;\n              return true;\n            }\n            return false;\n          }\n          [Symbol.iterator]() {\n            const self = this;\n            return {\n              next() {\n                if (C._ts_lookahead_iterator_next(self[0])) {\n                  return {\n                    done: false,\n                    value: self.currentType\n                  };\n                }\n                return {\n                  done: true,\n                  value: \"\"\n                };\n              }\n            };\n          }\n        }\n        class Query {\n          constructor(internal, address, captureNames, textPredicates, predicates, setProperties, assertedProperties, refutedProperties) {\n            assertInternal(internal);\n            this[0] = address;\n            this.captureNames = captureNames;\n            this.textPredicates = textPredicates;\n            this.predicates = predicates;\n            this.setProperties = setProperties;\n            this.assertedProperties = assertedProperties;\n            this.refutedProperties = refutedProperties;\n            this.exceededMatchLimit = false;\n          }\n          delete() {\n            C._ts_query_delete(this[0]);\n            this[0] = 0;\n          }\n          matches(node, {startPosition: startPosition = ZERO_POINT, endPosition: endPosition = ZERO_POINT, startIndex: startIndex = 0, endIndex: endIndex = 0, matchLimit: matchLimit = 4294967295, maxStartDepth: maxStartDepth = 4294967295, timeoutMicros: timeoutMicros = 0} = {}) {\n            if (typeof matchLimit !== \"number\") {\n              throw new Error(\"Arguments must be numbers\");\n            }\n            marshalNode(node);\n            C._ts_query_matches_wasm(this[0], node.tree[0], startPosition.row, startPosition.column, endPosition.row, endPosition.column, startIndex, endIndex, matchLimit, maxStartDepth, timeoutMicros);\n            const rawCount = getValue(TRANSFER_BUFFER, \"i32\");\n            const startAddress = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n            const didExceedMatchLimit = getValue(TRANSFER_BUFFER + 2 * SIZE_OF_INT, \"i32\");\n            const result = new Array(rawCount);\n            this.exceededMatchLimit = Boolean(didExceedMatchLimit);\n            let filteredCount = 0;\n            let address = startAddress;\n            for (let i = 0; i < rawCount; i++) {\n              const pattern = getValue(address, \"i32\");\n              address += SIZE_OF_INT;\n              const captureCount = getValue(address, \"i32\");\n              address += SIZE_OF_INT;\n              const captures = new Array(captureCount);\n              address = unmarshalCaptures(this, node.tree, address, captures);\n              if (this.textPredicates[pattern].every(p => p(captures))) {\n                result[filteredCount] = {\n                  pattern: pattern,\n                  captures: captures\n                };\n                const setProperties = this.setProperties[pattern];\n                if (setProperties) result[filteredCount].setProperties = setProperties;\n                const assertedProperties = this.assertedProperties[pattern];\n                if (assertedProperties) result[filteredCount].assertedProperties = assertedProperties;\n                const refutedProperties = this.refutedProperties[pattern];\n                if (refutedProperties) result[filteredCount].refutedProperties = refutedProperties;\n                filteredCount++;\n              }\n            }\n            result.length = filteredCount;\n            C._free(startAddress);\n            return result;\n          }\n          captures(node, {startPosition: startPosition = ZERO_POINT, endPosition: endPosition = ZERO_POINT, startIndex: startIndex = 0, endIndex: endIndex = 0, matchLimit: matchLimit = 4294967295, maxStartDepth: maxStartDepth = 4294967295, timeoutMicros: timeoutMicros = 0} = {}) {\n            if (typeof matchLimit !== \"number\") {\n              throw new Error(\"Arguments must be numbers\");\n            }\n            marshalNode(node);\n            C._ts_query_captures_wasm(this[0], node.tree[0], startPosition.row, startPosition.column, endPosition.row, endPosition.column, startIndex, endIndex, matchLimit, maxStartDepth, timeoutMicros);\n            const count = getValue(TRANSFER_BUFFER, \"i32\");\n            const startAddress = getValue(TRANSFER_BUFFER + SIZE_OF_INT, \"i32\");\n            const didExceedMatchLimit = getValue(TRANSFER_BUFFER + 2 * SIZE_OF_INT, \"i32\");\n            const result = [];\n            this.exceededMatchLimit = Boolean(didExceedMatchLimit);\n            const captures = [];\n            let address = startAddress;\n            for (let i = 0; i < count; i++) {\n              const pattern = getValue(address, \"i32\");\n              address += SIZE_OF_INT;\n              const captureCount = getValue(address, \"i32\");\n              address += SIZE_OF_INT;\n              const captureIndex = getValue(address, \"i32\");\n              address += SIZE_OF_INT;\n              captures.length = captureCount;\n              address = unmarshalCaptures(this, node.tree, address, captures);\n              if (this.textPredicates[pattern].every(p => p(captures))) {\n                const capture = captures[captureIndex];\n                const setProperties = this.setProperties[pattern];\n                if (setProperties) capture.setProperties = setProperties;\n                const assertedProperties = this.assertedProperties[pattern];\n                if (assertedProperties) capture.assertedProperties = assertedProperties;\n                const refutedProperties = this.refutedProperties[pattern];\n                if (refutedProperties) capture.refutedProperties = refutedProperties;\n                result.push(capture);\n              }\n            }\n            C._free(startAddress);\n            return result;\n          }\n          predicatesForPattern(patternIndex) {\n            return this.predicates[patternIndex];\n          }\n          disableCapture(captureName) {\n            const captureNameLength = lengthBytesUTF8(captureName);\n            const captureNameAddress = C._malloc(captureNameLength + 1);\n            stringToUTF8(captureName, captureNameAddress, captureNameLength + 1);\n            C._ts_query_disable_capture(this[0], captureNameAddress, captureNameLength);\n            C._free(captureNameAddress);\n          }\n          didExceedMatchLimit() {\n            return this.exceededMatchLimit;\n          }\n        }\n        function getText(tree, startIndex, endIndex) {\n          const length = endIndex - startIndex;\n          let result = tree.textCallback(startIndex, null, endIndex);\n          startIndex += result.length;\n          while (startIndex < endIndex) {\n            const string = tree.textCallback(startIndex, null, endIndex);\n            if (string && string.length > 0) {\n              startIndex += string.length;\n              result += string;\n            } else {\n              break;\n            }\n          }\n          if (startIndex > endIndex) {\n            result = result.slice(0, length);\n          }\n          return result;\n        }\n        function unmarshalCaptures(query, tree, address, result) {\n          for (let i = 0, n = result.length; i < n; i++) {\n            const captureIndex = getValue(address, \"i32\");\n            address += SIZE_OF_INT;\n            const node = unmarshalNode(tree, address);\n            address += SIZE_OF_NODE;\n            result[i] = {\n              name: query.captureNames[captureIndex],\n              node: node\n            };\n          }\n          return address;\n        }\n        function assertInternal(x) {\n          if (x !== INTERNAL) throw new Error(\"Illegal constructor\");\n        }\n        function isPoint(point) {\n          return (point && typeof point.row === \"number\" && typeof point.column === \"number\");\n        }\n        function marshalNode(node) {\n          let address = TRANSFER_BUFFER;\n          setValue(address, node.id, \"i32\");\n          address += SIZE_OF_INT;\n          setValue(address, node.startIndex, \"i32\");\n          address += SIZE_OF_INT;\n          setValue(address, node.startPosition.row, \"i32\");\n          address += SIZE_OF_INT;\n          setValue(address, node.startPosition.column, \"i32\");\n          address += SIZE_OF_INT;\n          setValue(address, node[0], \"i32\");\n        }\n        function unmarshalNode(tree, address = TRANSFER_BUFFER) {\n          const id = getValue(address, \"i32\");\n          address += SIZE_OF_INT;\n          if (id === 0) return null;\n          const index = getValue(address, \"i32\");\n          address += SIZE_OF_INT;\n          const row = getValue(address, \"i32\");\n          address += SIZE_OF_INT;\n          const column = getValue(address, \"i32\");\n          address += SIZE_OF_INT;\n          const other = getValue(address, \"i32\");\n          const result = new Node(INTERNAL, tree);\n          result.id = id;\n          result.startIndex = index;\n          result.startPosition = {\n            row: row,\n            column: column\n          };\n          result[0] = other;\n          return result;\n        }\n        function marshalTreeCursor(cursor, address = TRANSFER_BUFFER) {\n          setValue(address + 0 * SIZE_OF_INT, cursor[0], \"i32\");\n          setValue(address + 1 * SIZE_OF_INT, cursor[1], \"i32\");\n          setValue(address + 2 * SIZE_OF_INT, cursor[2], \"i32\");\n          setValue(address + 3 * SIZE_OF_INT, cursor[3], \"i32\");\n        }\n        function unmarshalTreeCursor(cursor) {\n          cursor[0] = getValue(TRANSFER_BUFFER + 0 * SIZE_OF_INT, \"i32\");\n          cursor[1] = getValue(TRANSFER_BUFFER + 1 * SIZE_OF_INT, \"i32\");\n          cursor[2] = getValue(TRANSFER_BUFFER + 2 * SIZE_OF_INT, \"i32\");\n          cursor[3] = getValue(TRANSFER_BUFFER + 3 * SIZE_OF_INT, \"i32\");\n        }\n        function marshalPoint(address, point) {\n          setValue(address, point.row, \"i32\");\n          setValue(address + SIZE_OF_INT, point.column, \"i32\");\n        }\n        function unmarshalPoint(address) {\n          const result = {\n            row: getValue(address, \"i32\") >>> 0,\n            column: getValue(address + SIZE_OF_INT, \"i32\") >>> 0\n          };\n          return result;\n        }\n        function marshalRange(address, range) {\n          marshalPoint(address, range.startPosition);\n          address += SIZE_OF_POINT;\n          marshalPoint(address, range.endPosition);\n          address += SIZE_OF_POINT;\n          setValue(address, range.startIndex, \"i32\");\n          address += SIZE_OF_INT;\n          setValue(address, range.endIndex, \"i32\");\n          address += SIZE_OF_INT;\n        }\n        function unmarshalRange(address) {\n          const result = {};\n          result.startPosition = unmarshalPoint(address);\n          address += SIZE_OF_POINT;\n          result.endPosition = unmarshalPoint(address);\n          address += SIZE_OF_POINT;\n          result.startIndex = getValue(address, \"i32\") >>> 0;\n          address += SIZE_OF_INT;\n          result.endIndex = getValue(address, \"i32\") >>> 0;\n          return result;\n        }\n        function marshalEdit(edit) {\n          let address = TRANSFER_BUFFER;\n          marshalPoint(address, edit.startPosition);\n          address += SIZE_OF_POINT;\n          marshalPoint(address, edit.oldEndPosition);\n          address += SIZE_OF_POINT;\n          marshalPoint(address, edit.newEndPosition);\n          address += SIZE_OF_POINT;\n          setValue(address, edit.startIndex, \"i32\");\n          address += SIZE_OF_INT;\n          setValue(address, edit.oldEndIndex, \"i32\");\n          address += SIZE_OF_INT;\n          setValue(address, edit.newEndIndex, \"i32\");\n          address += SIZE_OF_INT;\n        }\n        // end include: /src/lib/binding_web/binding.js\n        // include: /src/lib/binding_web/suffix.js\n        for (const name of Object.getOwnPropertyNames(ParserImpl.prototype)) {\n          Object.defineProperty(Parser.prototype, name, {\n            value: ParserImpl.prototype[name],\n            enumerable: false,\n            writable: false\n          });\n        }\n        Parser.Language = Language;\n        Module.onRuntimeInitialized = () => {\n          ParserImpl.init();\n          resolveInitPromise();\n        };\n      });\n    }\n  }\n  return Parser;\n}();\n\nif (typeof exports === \"object\") {\n  module.exports = TreeSitter;\n}\n","// Generated by CoffeeScript 1.12.4\nvar Dumper, Inline, Utils;\n\nUtils = require('./Utils');\n\nInline = require('./Inline');\n\nDumper = (function() {\n  function Dumper() {}\n\n  Dumper.indentation = 4;\n\n  Dumper.prototype.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    var i, key, len, output, prefix, value, willBeInlined;\n    if (inline == null) {\n      inline = 0;\n    }\n    if (indent == null) {\n      indent = 0;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectEncoder == null) {\n      objectEncoder = null;\n    }\n    output = '';\n    prefix = (indent ? Utils.strRepeat(' ', indent) : '');\n    if (inline <= 0 || typeof input !== 'object' || input instanceof Date || Utils.isEmpty(input)) {\n      output += prefix + Inline.dump(input, exceptionOnInvalidType, objectEncoder);\n    } else {\n      if (input instanceof Array) {\n        for (i = 0, len = input.length; i < len; i++) {\n          value = input[i];\n          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);\n          output += prefix + '-' + (willBeInlined ? ' ' : \"\\n\") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? \"\\n\" : '');\n        }\n      } else {\n        for (key in input) {\n          value = input[key];\n          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);\n          output += prefix + Inline.dump(key, exceptionOnInvalidType, objectEncoder) + ':' + (willBeInlined ? ' ' : \"\\n\") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? \"\\n\" : '');\n        }\n      }\n    }\n    return output;\n  };\n\n  return Dumper;\n\n})();\n\nmodule.exports = Dumper;\n","// Generated by CoffeeScript 1.12.4\nvar Escaper, Pattern;\n\nPattern = require('./Pattern');\n\nEscaper = (function() {\n  var ch;\n\n  function Escaper() {}\n\n  Escaper.LIST_ESCAPEES = ['\\\\', '\\\\\\\\', '\\\\\"', '\"', \"\\x00\", \"\\x01\", \"\\x02\", \"\\x03\", \"\\x04\", \"\\x05\", \"\\x06\", \"\\x07\", \"\\x08\", \"\\x09\", \"\\x0a\", \"\\x0b\", \"\\x0c\", \"\\x0d\", \"\\x0e\", \"\\x0f\", \"\\x10\", \"\\x11\", \"\\x12\", \"\\x13\", \"\\x14\", \"\\x15\", \"\\x16\", \"\\x17\", \"\\x18\", \"\\x19\", \"\\x1a\", \"\\x1b\", \"\\x1c\", \"\\x1d\", \"\\x1e\", \"\\x1f\", (ch = String.fromCharCode)(0x0085), ch(0x00A0), ch(0x2028), ch(0x2029)];\n\n  Escaper.LIST_ESCAPED = ['\\\\\\\\', '\\\\\"', '\\\\\"', '\\\\\"', \"\\\\0\", \"\\\\x01\", \"\\\\x02\", \"\\\\x03\", \"\\\\x04\", \"\\\\x05\", \"\\\\x06\", \"\\\\a\", \"\\\\b\", \"\\\\t\", \"\\\\n\", \"\\\\v\", \"\\\\f\", \"\\\\r\", \"\\\\x0e\", \"\\\\x0f\", \"\\\\x10\", \"\\\\x11\", \"\\\\x12\", \"\\\\x13\", \"\\\\x14\", \"\\\\x15\", \"\\\\x16\", \"\\\\x17\", \"\\\\x18\", \"\\\\x19\", \"\\\\x1a\", \"\\\\e\", \"\\\\x1c\", \"\\\\x1d\", \"\\\\x1e\", \"\\\\x1f\", \"\\\\N\", \"\\\\_\", \"\\\\L\", \"\\\\P\"];\n\n  Escaper.MAPPING_ESCAPEES_TO_ESCAPED = (function() {\n    var i, j, mapping, ref;\n    mapping = {};\n    for (i = j = 0, ref = Escaper.LIST_ESCAPEES.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      mapping[Escaper.LIST_ESCAPEES[i]] = Escaper.LIST_ESCAPED[i];\n    }\n    return mapping;\n  })();\n\n  Escaper.PATTERN_CHARACTERS_TO_ESCAPE = new Pattern('[\\\\x00-\\\\x1f]|\\xc2\\x85|\\xc2\\xa0|\\xe2\\x80\\xa8|\\xe2\\x80\\xa9');\n\n  Escaper.PATTERN_MAPPING_ESCAPEES = new Pattern(Escaper.LIST_ESCAPEES.join('|').split('\\\\').join('\\\\\\\\'));\n\n  Escaper.PATTERN_SINGLE_QUOTING = new Pattern('[\\\\s\\'\":{}[\\\\],&*#?]|^[-?|<>=!%@`]');\n\n  Escaper.requiresDoubleQuoting = function(value) {\n    return this.PATTERN_CHARACTERS_TO_ESCAPE.test(value);\n  };\n\n  Escaper.escapeWithDoubleQuotes = function(value) {\n    var result;\n    result = this.PATTERN_MAPPING_ESCAPEES.replace(value, (function(_this) {\n      return function(str) {\n        return _this.MAPPING_ESCAPEES_TO_ESCAPED[str];\n      };\n    })(this));\n    return '\"' + result + '\"';\n  };\n\n  Escaper.requiresSingleQuoting = function(value) {\n    return this.PATTERN_SINGLE_QUOTING.test(value);\n  };\n\n  Escaper.escapeWithSingleQuotes = function(value) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  };\n\n  return Escaper;\n\n})();\n\nmodule.exports = Escaper;\n","// Generated by CoffeeScript 1.12.4\nvar DumpException,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nDumpException = (function(superClass) {\n  extend(DumpException, superClass);\n\n  function DumpException(message, parsedLine, snippet) {\n    this.message = message;\n    this.parsedLine = parsedLine;\n    this.snippet = snippet;\n  }\n\n  DumpException.prototype.toString = function() {\n    if ((this.parsedLine != null) && (this.snippet != null)) {\n      return '<DumpException> ' + this.message + ' (line ' + this.parsedLine + ': \\'' + this.snippet + '\\')';\n    } else {\n      return '<DumpException> ' + this.message;\n    }\n  };\n\n  return DumpException;\n\n})(Error);\n\nmodule.exports = DumpException;\n","// Generated by CoffeeScript 1.12.4\nvar ParseException,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nParseException = (function(superClass) {\n  extend(ParseException, superClass);\n\n  function ParseException(message, parsedLine, snippet) {\n    this.message = message;\n    this.parsedLine = parsedLine;\n    this.snippet = snippet;\n  }\n\n  ParseException.prototype.toString = function() {\n    if ((this.parsedLine != null) && (this.snippet != null)) {\n      return '<ParseException> ' + this.message + ' (line ' + this.parsedLine + ': \\'' + this.snippet + '\\')';\n    } else {\n      return '<ParseException> ' + this.message;\n    }\n  };\n\n  return ParseException;\n\n})(Error);\n\nmodule.exports = ParseException;\n","// Generated by CoffeeScript 1.12.4\nvar ParseMore,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nParseMore = (function(superClass) {\n  extend(ParseMore, superClass);\n\n  function ParseMore(message, parsedLine, snippet) {\n    this.message = message;\n    this.parsedLine = parsedLine;\n    this.snippet = snippet;\n  }\n\n  ParseMore.prototype.toString = function() {\n    if ((this.parsedLine != null) && (this.snippet != null)) {\n      return '<ParseMore> ' + this.message + ' (line ' + this.parsedLine + ': \\'' + this.snippet + '\\')';\n    } else {\n      return '<ParseMore> ' + this.message;\n    }\n  };\n\n  return ParseMore;\n\n})(Error);\n\nmodule.exports = ParseMore;\n","// Generated by CoffeeScript 1.12.4\nvar DumpException, Escaper, Inline, ParseException, ParseMore, Pattern, Unescaper, Utils,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nPattern = require('./Pattern');\n\nUnescaper = require('./Unescaper');\n\nEscaper = require('./Escaper');\n\nUtils = require('./Utils');\n\nParseException = require('./Exception/ParseException');\n\nParseMore = require('./Exception/ParseMore');\n\nDumpException = require('./Exception/DumpException');\n\nInline = (function() {\n  function Inline() {}\n\n  Inline.REGEX_QUOTED_STRING = '(?:\"(?:[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"|\\'(?:[^\\']*(?:\\'\\'[^\\']*)*)\\')';\n\n  Inline.PATTERN_TRAILING_COMMENTS = new Pattern('^\\\\s*#.*$');\n\n  Inline.PATTERN_QUOTED_SCALAR = new Pattern('^' + Inline.REGEX_QUOTED_STRING);\n\n  Inline.PATTERN_THOUSAND_NUMERIC_SCALAR = new Pattern('^(-|\\\\+)?[0-9,]+(\\\\.[0-9]+)?$');\n\n  Inline.PATTERN_SCALAR_BY_DELIMITERS = {};\n\n  Inline.settings = {};\n\n  Inline.configure = function(exceptionOnInvalidType, objectDecoder) {\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = null;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;\n    this.settings.objectDecoder = objectDecoder;\n  };\n\n  Inline.parse = function(value, exceptionOnInvalidType, objectDecoder) {\n    var context, result;\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;\n    this.settings.objectDecoder = objectDecoder;\n    if (value == null) {\n      return '';\n    }\n    value = Utils.trim(value);\n    if (0 === value.length) {\n      return '';\n    }\n    context = {\n      exceptionOnInvalidType: exceptionOnInvalidType,\n      objectDecoder: objectDecoder,\n      i: 0\n    };\n    switch (value.charAt(0)) {\n      case '[':\n        result = this.parseSequence(value, context);\n        ++context.i;\n        break;\n      case '{':\n        result = this.parseMapping(value, context);\n        ++context.i;\n        break;\n      default:\n        result = this.parseScalar(value, null, ['\"', \"'\"], context);\n    }\n    if (this.PATTERN_TRAILING_COMMENTS.replace(value.slice(context.i), '') !== '') {\n      throw new ParseException('Unexpected characters near \"' + value.slice(context.i) + '\".');\n    }\n    return result;\n  };\n\n  Inline.dump = function(value, exceptionOnInvalidType, objectEncoder) {\n    var ref, result, type;\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectEncoder == null) {\n      objectEncoder = null;\n    }\n    if (value == null) {\n      return 'null';\n    }\n    type = typeof value;\n    if (type === 'object') {\n      if (value instanceof Date) {\n        return value.toISOString();\n      } else if (objectEncoder != null) {\n        result = objectEncoder(value);\n        if (typeof result === 'string' || (result != null)) {\n          return result;\n        }\n      }\n      return this.dumpObject(value);\n    }\n    if (type === 'boolean') {\n      return (value ? 'true' : 'false');\n    }\n    if (Utils.isDigits(value)) {\n      return (type === 'string' ? \"'\" + value + \"'\" : String(parseInt(value)));\n    }\n    if (Utils.isNumeric(value)) {\n      return (type === 'string' ? \"'\" + value + \"'\" : String(parseFloat(value)));\n    }\n    if (type === 'number') {\n      return (value === 2e308 ? '.Inf' : (value === -2e308 ? '-.Inf' : (isNaN(value) ? '.NaN' : value)));\n    }\n    if (Escaper.requiresDoubleQuoting(value)) {\n      return Escaper.escapeWithDoubleQuotes(value);\n    }\n    if (Escaper.requiresSingleQuoting(value)) {\n      return Escaper.escapeWithSingleQuotes(value);\n    }\n    if ('' === value) {\n      return '\"\"';\n    }\n    if (Utils.PATTERN_DATE.test(value)) {\n      return \"'\" + value + \"'\";\n    }\n    if ((ref = value.toLowerCase()) === 'null' || ref === '~' || ref === 'true' || ref === 'false') {\n      return \"'\" + value + \"'\";\n    }\n    return value;\n  };\n\n  Inline.dumpObject = function(value, exceptionOnInvalidType, objectSupport) {\n    var j, key, len1, output, val;\n    if (objectSupport == null) {\n      objectSupport = null;\n    }\n    if (value instanceof Array) {\n      output = [];\n      for (j = 0, len1 = value.length; j < len1; j++) {\n        val = value[j];\n        output.push(this.dump(val));\n      }\n      return '[' + output.join(', ') + ']';\n    } else {\n      output = [];\n      for (key in value) {\n        val = value[key];\n        output.push(this.dump(key) + ': ' + this.dump(val));\n      }\n      return '{' + output.join(', ') + '}';\n    }\n  };\n\n  Inline.parseScalar = function(scalar, delimiters, stringDelimiters, context, evaluate) {\n    var i, joinedDelimiters, match, output, pattern, ref, ref1, strpos, tmp;\n    if (delimiters == null) {\n      delimiters = null;\n    }\n    if (stringDelimiters == null) {\n      stringDelimiters = ['\"', \"'\"];\n    }\n    if (context == null) {\n      context = null;\n    }\n    if (evaluate == null) {\n      evaluate = true;\n    }\n    if (context == null) {\n      context = {\n        exceptionOnInvalidType: this.settings.exceptionOnInvalidType,\n        objectDecoder: this.settings.objectDecoder,\n        i: 0\n      };\n    }\n    i = context.i;\n    if (ref = scalar.charAt(i), indexOf.call(stringDelimiters, ref) >= 0) {\n      output = this.parseQuotedScalar(scalar, context);\n      i = context.i;\n      if (delimiters != null) {\n        tmp = Utils.ltrim(scalar.slice(i), ' ');\n        if (!(ref1 = tmp.charAt(0), indexOf.call(delimiters, ref1) >= 0)) {\n          throw new ParseException('Unexpected characters (' + scalar.slice(i) + ').');\n        }\n      }\n    } else {\n      if (!delimiters) {\n        output = scalar.slice(i);\n        i += output.length;\n        strpos = output.indexOf(' #');\n        if (strpos !== -1) {\n          output = Utils.rtrim(output.slice(0, strpos));\n        }\n      } else {\n        joinedDelimiters = delimiters.join('|');\n        pattern = this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters];\n        if (pattern == null) {\n          pattern = new Pattern('^(.+?)(' + joinedDelimiters + ')');\n          this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters] = pattern;\n        }\n        if (match = pattern.exec(scalar.slice(i))) {\n          output = match[1];\n          i += output.length;\n        } else {\n          throw new ParseException('Malformed inline YAML string (' + scalar + ').');\n        }\n      }\n      if (evaluate) {\n        output = this.evaluateScalar(output, context);\n      }\n    }\n    context.i = i;\n    return output;\n  };\n\n  Inline.parseQuotedScalar = function(scalar, context) {\n    var i, match, output;\n    i = context.i;\n    if (!(match = this.PATTERN_QUOTED_SCALAR.exec(scalar.slice(i)))) {\n      throw new ParseMore('Malformed inline YAML string (' + scalar.slice(i) + ').');\n    }\n    output = match[0].substr(1, match[0].length - 2);\n    if ('\"' === scalar.charAt(i)) {\n      output = Unescaper.unescapeDoubleQuotedString(output);\n    } else {\n      output = Unescaper.unescapeSingleQuotedString(output);\n    }\n    i += match[0].length;\n    context.i = i;\n    return output;\n  };\n\n  Inline.parseSequence = function(sequence, context) {\n    var e, i, isQuoted, len, output, ref, value;\n    output = [];\n    len = sequence.length;\n    i = context.i;\n    i += 1;\n    while (i < len) {\n      context.i = i;\n      switch (sequence.charAt(i)) {\n        case '[':\n          output.push(this.parseSequence(sequence, context));\n          i = context.i;\n          break;\n        case '{':\n          output.push(this.parseMapping(sequence, context));\n          i = context.i;\n          break;\n        case ']':\n          return output;\n        case ',':\n        case ' ':\n        case \"\\n\":\n          break;\n        default:\n          isQuoted = ((ref = sequence.charAt(i)) === '\"' || ref === \"'\");\n          value = this.parseScalar(sequence, [',', ']'], ['\"', \"'\"], context);\n          i = context.i;\n          if (!isQuoted && typeof value === 'string' && (value.indexOf(': ') !== -1 || value.indexOf(\":\\n\") !== -1)) {\n            try {\n              value = this.parseMapping('{' + value + '}');\n            } catch (error) {\n              e = error;\n            }\n          }\n          output.push(value);\n          --i;\n      }\n      ++i;\n    }\n    throw new ParseMore('Malformed inline YAML string ' + sequence);\n  };\n\n  Inline.parseMapping = function(mapping, context) {\n    var done, i, key, len, output, shouldContinueWhileLoop, value;\n    output = {};\n    len = mapping.length;\n    i = context.i;\n    i += 1;\n    shouldContinueWhileLoop = false;\n    while (i < len) {\n      context.i = i;\n      switch (mapping.charAt(i)) {\n        case ' ':\n        case ',':\n        case \"\\n\":\n          ++i;\n          context.i = i;\n          shouldContinueWhileLoop = true;\n          break;\n        case '}':\n          return output;\n      }\n      if (shouldContinueWhileLoop) {\n        shouldContinueWhileLoop = false;\n        continue;\n      }\n      key = this.parseScalar(mapping, [':', ' ', \"\\n\"], ['\"', \"'\"], context, false);\n      i = context.i;\n      done = false;\n      while (i < len) {\n        context.i = i;\n        switch (mapping.charAt(i)) {\n          case '[':\n            value = this.parseSequence(mapping, context);\n            i = context.i;\n            if (output[key] === void 0) {\n              output[key] = value;\n            }\n            done = true;\n            break;\n          case '{':\n            value = this.parseMapping(mapping, context);\n            i = context.i;\n            if (output[key] === void 0) {\n              output[key] = value;\n            }\n            done = true;\n            break;\n          case ':':\n          case ' ':\n          case \"\\n\":\n            break;\n          default:\n            value = this.parseScalar(mapping, [',', '}'], ['\"', \"'\"], context);\n            i = context.i;\n            if (output[key] === void 0) {\n              output[key] = value;\n            }\n            done = true;\n            --i;\n        }\n        ++i;\n        if (done) {\n          break;\n        }\n      }\n    }\n    throw new ParseMore('Malformed inline YAML string ' + mapping);\n  };\n\n  Inline.evaluateScalar = function(scalar, context) {\n    var cast, date, exceptionOnInvalidType, firstChar, firstSpace, firstWord, objectDecoder, raw, scalarLower, subValue, trimmedScalar;\n    scalar = Utils.trim(scalar);\n    scalarLower = scalar.toLowerCase();\n    switch (scalarLower) {\n      case 'null':\n      case '':\n      case '~':\n        return null;\n      case 'true':\n        return true;\n      case 'false':\n        return false;\n      case '.inf':\n        return 2e308;\n      case '.nan':\n        return 0/0;\n      case '-.inf':\n        return 2e308;\n      default:\n        firstChar = scalarLower.charAt(0);\n        switch (firstChar) {\n          case '!':\n            firstSpace = scalar.indexOf(' ');\n            if (firstSpace === -1) {\n              firstWord = scalarLower;\n            } else {\n              firstWord = scalarLower.slice(0, firstSpace);\n            }\n            switch (firstWord) {\n              case '!':\n                if (firstSpace !== -1) {\n                  return parseInt(this.parseScalar(scalar.slice(2)));\n                }\n                return null;\n              case '!str':\n                return Utils.ltrim(scalar.slice(4));\n              case '!!str':\n                return Utils.ltrim(scalar.slice(5));\n              case '!!int':\n                return parseInt(this.parseScalar(scalar.slice(5)));\n              case '!!bool':\n                return Utils.parseBoolean(this.parseScalar(scalar.slice(6)), false);\n              case '!!float':\n                return parseFloat(this.parseScalar(scalar.slice(7)));\n              case '!!timestamp':\n                return Utils.stringToDate(Utils.ltrim(scalar.slice(11)));\n              default:\n                if (context == null) {\n                  context = {\n                    exceptionOnInvalidType: this.settings.exceptionOnInvalidType,\n                    objectDecoder: this.settings.objectDecoder,\n                    i: 0\n                  };\n                }\n                objectDecoder = context.objectDecoder, exceptionOnInvalidType = context.exceptionOnInvalidType;\n                if (objectDecoder) {\n                  trimmedScalar = Utils.rtrim(scalar);\n                  firstSpace = trimmedScalar.indexOf(' ');\n                  if (firstSpace === -1) {\n                    return objectDecoder(trimmedScalar, null);\n                  } else {\n                    subValue = Utils.ltrim(trimmedScalar.slice(firstSpace + 1));\n                    if (!(subValue.length > 0)) {\n                      subValue = null;\n                    }\n                    return objectDecoder(trimmedScalar.slice(0, firstSpace), subValue);\n                  }\n                }\n                if (exceptionOnInvalidType) {\n                  throw new ParseException('Custom object support when parsing a YAML file has been disabled.');\n                }\n                return null;\n            }\n            break;\n          case '0':\n            if ('0x' === scalar.slice(0, 2)) {\n              return Utils.hexDec(scalar);\n            } else if (Utils.isDigits(scalar)) {\n              return Utils.octDec(scalar);\n            } else if (Utils.isNumeric(scalar)) {\n              return parseFloat(scalar);\n            } else {\n              return scalar;\n            }\n            break;\n          case '+':\n            if (Utils.isDigits(scalar)) {\n              raw = scalar;\n              cast = parseInt(raw);\n              if (raw === String(cast)) {\n                return cast;\n              } else {\n                return raw;\n              }\n            } else if (Utils.isNumeric(scalar)) {\n              return parseFloat(scalar);\n            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {\n              return parseFloat(scalar.replace(',', ''));\n            }\n            return scalar;\n          case '-':\n            if (Utils.isDigits(scalar.slice(1))) {\n              if ('0' === scalar.charAt(1)) {\n                return -Utils.octDec(scalar.slice(1));\n              } else {\n                raw = scalar.slice(1);\n                cast = parseInt(raw);\n                if (raw === String(cast)) {\n                  return -cast;\n                } else {\n                  return -raw;\n                }\n              }\n            } else if (Utils.isNumeric(scalar)) {\n              return parseFloat(scalar);\n            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {\n              return parseFloat(scalar.replace(',', ''));\n            }\n            return scalar;\n          default:\n            if (date = Utils.stringToDate(scalar)) {\n              return date;\n            } else if (Utils.isNumeric(scalar)) {\n              return parseFloat(scalar);\n            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {\n              return parseFloat(scalar.replace(',', ''));\n            }\n            return scalar;\n        }\n    }\n  };\n\n  return Inline;\n\n})();\n\nmodule.exports = Inline;\n","// Generated by CoffeeScript 1.12.4\nvar Inline, ParseException, ParseMore, Parser, Pattern, Utils;\n\nInline = require('./Inline');\n\nPattern = require('./Pattern');\n\nUtils = require('./Utils');\n\nParseException = require('./Exception/ParseException');\n\nParseMore = require('./Exception/ParseMore');\n\nParser = (function() {\n  Parser.prototype.PATTERN_FOLDED_SCALAR_ALL = new Pattern('^(?:(?<type>![^\\\\|>]*)\\\\s+)?(?<separator>\\\\||>)(?<modifiers>\\\\+|\\\\-|\\\\d+|\\\\+\\\\d+|\\\\-\\\\d+|\\\\d+\\\\+|\\\\d+\\\\-)?(?<comments> +#.*)?$');\n\n  Parser.prototype.PATTERN_FOLDED_SCALAR_END = new Pattern('(?<separator>\\\\||>)(?<modifiers>\\\\+|\\\\-|\\\\d+|\\\\+\\\\d+|\\\\-\\\\d+|\\\\d+\\\\+|\\\\d+\\\\-)?(?<comments> +#.*)?$');\n\n  Parser.prototype.PATTERN_SEQUENCE_ITEM = new Pattern('^\\\\-((?<leadspaces>\\\\s+)(?<value>.+?))?\\\\s*$');\n\n  Parser.prototype.PATTERN_ANCHOR_VALUE = new Pattern('^&(?<ref>[^ ]+) *(?<value>.*)');\n\n  Parser.prototype.PATTERN_COMPACT_NOTATION = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \\'\"\\\\{\\\\[].*?) *\\\\:(\\\\s+(?<value>.+?))?\\\\s*$');\n\n  Parser.prototype.PATTERN_MAPPING_ITEM = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \\'\"\\\\[\\\\{].*?) *\\\\:(\\\\s+(?<value>.+?))?\\\\s*$');\n\n  Parser.prototype.PATTERN_DECIMAL = new Pattern('\\\\d+');\n\n  Parser.prototype.PATTERN_INDENT_SPACES = new Pattern('^ +');\n\n  Parser.prototype.PATTERN_TRAILING_LINES = new Pattern('(\\n*)$');\n\n  Parser.prototype.PATTERN_YAML_HEADER = new Pattern('^\\\\%YAML[: ][\\\\d\\\\.]+.*\\n', 'm');\n\n  Parser.prototype.PATTERN_LEADING_COMMENTS = new Pattern('^(\\\\#.*?\\n)+', 'm');\n\n  Parser.prototype.PATTERN_DOCUMENT_MARKER_START = new Pattern('^\\\\-\\\\-\\\\-.*?\\n', 'm');\n\n  Parser.prototype.PATTERN_DOCUMENT_MARKER_END = new Pattern('^\\\\.\\\\.\\\\.\\\\s*$', 'm');\n\n  Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION = {};\n\n  Parser.prototype.CONTEXT_NONE = 0;\n\n  Parser.prototype.CONTEXT_SEQUENCE = 1;\n\n  Parser.prototype.CONTEXT_MAPPING = 2;\n\n  function Parser(offset) {\n    this.offset = offset != null ? offset : 0;\n    this.lines = [];\n    this.currentLineNb = -1;\n    this.currentLine = '';\n    this.refs = {};\n  }\n\n  Parser.prototype.parse = function(value, exceptionOnInvalidType, objectDecoder) {\n    var alias, allowOverwrite, block, c, context, data, e, first, i, indent, isRef, j, k, key, l, lastKey, len, len1, len2, len3, lineCount, m, matches, mergeNode, n, name, parsed, parsedItem, parser, ref, ref1, ref2, refName, refValue, val, values;\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    this.currentLineNb = -1;\n    this.currentLine = '';\n    this.lines = this.cleanup(value).split(\"\\n\");\n    data = null;\n    context = this.CONTEXT_NONE;\n    allowOverwrite = false;\n    while (this.moveToNextLine()) {\n      if (this.isCurrentLineEmpty()) {\n        continue;\n      }\n      if (\"\\t\" === this.currentLine[0]) {\n        throw new ParseException('A YAML file cannot contain tabs as indentation.', this.getRealCurrentLineNb() + 1, this.currentLine);\n      }\n      isRef = mergeNode = false;\n      if (values = this.PATTERN_SEQUENCE_ITEM.exec(this.currentLine)) {\n        if (this.CONTEXT_MAPPING === context) {\n          throw new ParseException('You cannot define a sequence item when in a mapping');\n        }\n        context = this.CONTEXT_SEQUENCE;\n        if (data == null) {\n          data = [];\n        }\n        if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {\n          isRef = matches.ref;\n          values.value = matches.value;\n        }\n        if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {\n          if (this.currentLineNb < this.lines.length - 1 && !this.isNextLineUnIndentedCollection()) {\n            c = this.getRealCurrentLineNb() + 1;\n            parser = new Parser(c);\n            parser.refs = this.refs;\n            data.push(parser.parse(this.getNextEmbedBlock(null, true), exceptionOnInvalidType, objectDecoder));\n          } else {\n            data.push(null);\n          }\n        } else {\n          if (((ref = values.leadspaces) != null ? ref.length : void 0) && (matches = this.PATTERN_COMPACT_NOTATION.exec(values.value))) {\n            c = this.getRealCurrentLineNb();\n            parser = new Parser(c);\n            parser.refs = this.refs;\n            block = values.value;\n            indent = this.getCurrentLineIndentation();\n            if (this.isNextLineIndented(false)) {\n              block += \"\\n\" + this.getNextEmbedBlock(indent + values.leadspaces.length + 1, true);\n            }\n            data.push(parser.parse(block, exceptionOnInvalidType, objectDecoder));\n          } else {\n            data.push(this.parseValue(values.value, exceptionOnInvalidType, objectDecoder));\n          }\n        }\n      } else if ((values = this.PATTERN_MAPPING_ITEM.exec(this.currentLine)) && values.key.indexOf(' #') === -1) {\n        if (this.CONTEXT_SEQUENCE === context) {\n          throw new ParseException('You cannot define a mapping item when in a sequence');\n        }\n        context = this.CONTEXT_MAPPING;\n        if (data == null) {\n          data = {};\n        }\n        Inline.configure(exceptionOnInvalidType, objectDecoder);\n        try {\n          key = Inline.parseScalar(values.key);\n        } catch (error) {\n          e = error;\n          e.parsedLine = this.getRealCurrentLineNb() + 1;\n          e.snippet = this.currentLine;\n          throw e;\n        }\n        if ('<<' === key) {\n          mergeNode = true;\n          allowOverwrite = true;\n          if (((ref1 = values.value) != null ? ref1.indexOf('*') : void 0) === 0) {\n            refName = values.value.slice(1);\n            if (this.refs[refName] == null) {\n              throw new ParseException('Reference \"' + refName + '\" does not exist.', this.getRealCurrentLineNb() + 1, this.currentLine);\n            }\n            refValue = this.refs[refName];\n            if (typeof refValue !== 'object') {\n              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);\n            }\n            if (refValue instanceof Array) {\n              for (i = j = 0, len = refValue.length; j < len; i = ++j) {\n                value = refValue[i];\n                if (data[name = String(i)] == null) {\n                  data[name] = value;\n                }\n              }\n            } else {\n              for (key in refValue) {\n                value = refValue[key];\n                if (data[key] == null) {\n                  data[key] = value;\n                }\n              }\n            }\n          } else {\n            if ((values.value != null) && values.value !== '') {\n              value = values.value;\n            } else {\n              value = this.getNextEmbedBlock();\n            }\n            c = this.getRealCurrentLineNb() + 1;\n            parser = new Parser(c);\n            parser.refs = this.refs;\n            parsed = parser.parse(value, exceptionOnInvalidType);\n            if (typeof parsed !== 'object') {\n              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);\n            }\n            if (parsed instanceof Array) {\n              for (l = 0, len1 = parsed.length; l < len1; l++) {\n                parsedItem = parsed[l];\n                if (typeof parsedItem !== 'object') {\n                  throw new ParseException('Merge items must be objects.', this.getRealCurrentLineNb() + 1, parsedItem);\n                }\n                if (parsedItem instanceof Array) {\n                  for (i = m = 0, len2 = parsedItem.length; m < len2; i = ++m) {\n                    value = parsedItem[i];\n                    k = String(i);\n                    if (!data.hasOwnProperty(k)) {\n                      data[k] = value;\n                    }\n                  }\n                } else {\n                  for (key in parsedItem) {\n                    value = parsedItem[key];\n                    if (!data.hasOwnProperty(key)) {\n                      data[key] = value;\n                    }\n                  }\n                }\n              }\n            } else {\n              for (key in parsed) {\n                value = parsed[key];\n                if (!data.hasOwnProperty(key)) {\n                  data[key] = value;\n                }\n              }\n            }\n          }\n        } else if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {\n          isRef = matches.ref;\n          values.value = matches.value;\n        }\n        if (mergeNode) {\n\n        } else if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {\n          if (!(this.isNextLineIndented()) && !(this.isNextLineUnIndentedCollection())) {\n            if (allowOverwrite || data[key] === void 0) {\n              data[key] = null;\n            }\n          } else {\n            c = this.getRealCurrentLineNb() + 1;\n            parser = new Parser(c);\n            parser.refs = this.refs;\n            val = parser.parse(this.getNextEmbedBlock(), exceptionOnInvalidType, objectDecoder);\n            if (allowOverwrite || data[key] === void 0) {\n              data[key] = val;\n            }\n          }\n        } else {\n          val = this.parseValue(values.value, exceptionOnInvalidType, objectDecoder);\n          if (allowOverwrite || data[key] === void 0) {\n            data[key] = val;\n          }\n        }\n      } else {\n        lineCount = this.lines.length;\n        if (1 === lineCount || (2 === lineCount && Utils.isEmpty(this.lines[1]))) {\n          try {\n            value = Inline.parse(this.lines[0], exceptionOnInvalidType, objectDecoder);\n          } catch (error) {\n            e = error;\n            e.parsedLine = this.getRealCurrentLineNb() + 1;\n            e.snippet = this.currentLine;\n            throw e;\n          }\n          if (typeof value === 'object') {\n            if (value instanceof Array) {\n              first = value[0];\n            } else {\n              for (key in value) {\n                first = value[key];\n                break;\n              }\n            }\n            if (typeof first === 'string' && first.indexOf('*') === 0) {\n              data = [];\n              for (n = 0, len3 = value.length; n < len3; n++) {\n                alias = value[n];\n                data.push(this.refs[alias.slice(1)]);\n              }\n              value = data;\n            }\n          }\n          return value;\n        } else if ((ref2 = Utils.ltrim(value).charAt(0)) === '[' || ref2 === '{') {\n          try {\n            return Inline.parse(value, exceptionOnInvalidType, objectDecoder);\n          } catch (error) {\n            e = error;\n            e.parsedLine = this.getRealCurrentLineNb() + 1;\n            e.snippet = this.currentLine;\n            throw e;\n          }\n        }\n        throw new ParseException('Unable to parse.', this.getRealCurrentLineNb() + 1, this.currentLine);\n      }\n      if (isRef) {\n        if (data instanceof Array) {\n          this.refs[isRef] = data[data.length - 1];\n        } else {\n          lastKey = null;\n          for (key in data) {\n            lastKey = key;\n          }\n          this.refs[isRef] = data[lastKey];\n        }\n      }\n    }\n    if (Utils.isEmpty(data)) {\n      return null;\n    } else {\n      return data;\n    }\n  };\n\n  Parser.prototype.getRealCurrentLineNb = function() {\n    return this.currentLineNb + this.offset;\n  };\n\n  Parser.prototype.getCurrentLineIndentation = function() {\n    return this.currentLine.length - Utils.ltrim(this.currentLine, ' ').length;\n  };\n\n  Parser.prototype.getNextEmbedBlock = function(indentation, includeUnindentedCollection) {\n    var data, indent, isItUnindentedCollection, newIndent, removeComments, removeCommentsPattern, unindentedEmbedBlock;\n    if (indentation == null) {\n      indentation = null;\n    }\n    if (includeUnindentedCollection == null) {\n      includeUnindentedCollection = false;\n    }\n    this.moveToNextLine();\n    if (indentation == null) {\n      newIndent = this.getCurrentLineIndentation();\n      unindentedEmbedBlock = this.isStringUnIndentedCollectionItem(this.currentLine);\n      if (!(this.isCurrentLineEmpty()) && 0 === newIndent && !unindentedEmbedBlock) {\n        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);\n      }\n    } else {\n      newIndent = indentation;\n    }\n    data = [this.currentLine.slice(newIndent)];\n    if (!includeUnindentedCollection) {\n      isItUnindentedCollection = this.isStringUnIndentedCollectionItem(this.currentLine);\n    }\n    removeCommentsPattern = this.PATTERN_FOLDED_SCALAR_END;\n    removeComments = !removeCommentsPattern.test(this.currentLine);\n    while (this.moveToNextLine()) {\n      indent = this.getCurrentLineIndentation();\n      if (indent === newIndent) {\n        removeComments = !removeCommentsPattern.test(this.currentLine);\n      }\n      if (removeComments && this.isCurrentLineComment()) {\n        continue;\n      }\n      if (this.isCurrentLineBlank()) {\n        data.push(this.currentLine.slice(newIndent));\n        continue;\n      }\n      if (isItUnindentedCollection && !this.isStringUnIndentedCollectionItem(this.currentLine) && indent === newIndent) {\n        this.moveToPreviousLine();\n        break;\n      }\n      if (indent >= newIndent) {\n        data.push(this.currentLine.slice(newIndent));\n      } else if (Utils.ltrim(this.currentLine).charAt(0) === '#') {\n\n      } else if (0 === indent) {\n        this.moveToPreviousLine();\n        break;\n      } else {\n        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);\n      }\n    }\n    return data.join(\"\\n\");\n  };\n\n  Parser.prototype.moveToNextLine = function() {\n    if (this.currentLineNb >= this.lines.length - 1) {\n      return false;\n    }\n    this.currentLine = this.lines[++this.currentLineNb];\n    return true;\n  };\n\n  Parser.prototype.moveToPreviousLine = function() {\n    this.currentLine = this.lines[--this.currentLineNb];\n  };\n\n  Parser.prototype.parseValue = function(value, exceptionOnInvalidType, objectDecoder) {\n    var e, foldedIndent, matches, modifiers, pos, ref, ref1, val;\n    if (0 === value.indexOf('*')) {\n      pos = value.indexOf('#');\n      if (pos !== -1) {\n        value = value.substr(1, pos - 2);\n      } else {\n        value = value.slice(1);\n      }\n      if (this.refs[value] === void 0) {\n        throw new ParseException('Reference \"' + value + '\" does not exist.', this.currentLine);\n      }\n      return this.refs[value];\n    }\n    if (matches = this.PATTERN_FOLDED_SCALAR_ALL.exec(value)) {\n      modifiers = (ref = matches.modifiers) != null ? ref : '';\n      foldedIndent = Math.abs(parseInt(modifiers));\n      if (isNaN(foldedIndent)) {\n        foldedIndent = 0;\n      }\n      val = this.parseFoldedScalar(matches.separator, this.PATTERN_DECIMAL.replace(modifiers, ''), foldedIndent);\n      if (matches.type != null) {\n        Inline.configure(exceptionOnInvalidType, objectDecoder);\n        return Inline.parseScalar(matches.type + ' ' + val);\n      } else {\n        return val;\n      }\n    }\n    if ((ref1 = value.charAt(0)) === '[' || ref1 === '{' || ref1 === '\"' || ref1 === \"'\") {\n      while (true) {\n        try {\n          return Inline.parse(value, exceptionOnInvalidType, objectDecoder);\n        } catch (error) {\n          e = error;\n          if (e instanceof ParseMore && this.moveToNextLine()) {\n            value += \"\\n\" + Utils.trim(this.currentLine, ' ');\n          } else {\n            e.parsedLine = this.getRealCurrentLineNb() + 1;\n            e.snippet = this.currentLine;\n            throw e;\n          }\n        }\n      }\n    } else {\n      if (this.isNextLineIndented()) {\n        value += \"\\n\" + this.getNextEmbedBlock();\n      }\n      return Inline.parse(value, exceptionOnInvalidType, objectDecoder);\n    }\n  };\n\n  Parser.prototype.parseFoldedScalar = function(separator, indicator, indentation) {\n    var isCurrentLineBlank, j, len, line, matches, newText, notEOF, pattern, ref, text;\n    if (indicator == null) {\n      indicator = '';\n    }\n    if (indentation == null) {\n      indentation = 0;\n    }\n    notEOF = this.moveToNextLine();\n    if (!notEOF) {\n      return '';\n    }\n    isCurrentLineBlank = this.isCurrentLineBlank();\n    text = '';\n    while (notEOF && isCurrentLineBlank) {\n      if (notEOF = this.moveToNextLine()) {\n        text += \"\\n\";\n        isCurrentLineBlank = this.isCurrentLineBlank();\n      }\n    }\n    if (0 === indentation) {\n      if (matches = this.PATTERN_INDENT_SPACES.exec(this.currentLine)) {\n        indentation = matches[0].length;\n      }\n    }\n    if (indentation > 0) {\n      pattern = this.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation];\n      if (pattern == null) {\n        pattern = new Pattern('^ {' + indentation + '}(.*)$');\n        Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation] = pattern;\n      }\n      while (notEOF && (isCurrentLineBlank || (matches = pattern.exec(this.currentLine)))) {\n        if (isCurrentLineBlank) {\n          text += this.currentLine.slice(indentation);\n        } else {\n          text += matches[1];\n        }\n        if (notEOF = this.moveToNextLine()) {\n          text += \"\\n\";\n          isCurrentLineBlank = this.isCurrentLineBlank();\n        }\n      }\n    } else if (notEOF) {\n      text += \"\\n\";\n    }\n    if (notEOF) {\n      this.moveToPreviousLine();\n    }\n    if ('>' === separator) {\n      newText = '';\n      ref = text.split(\"\\n\");\n      for (j = 0, len = ref.length; j < len; j++) {\n        line = ref[j];\n        if (line.length === 0 || line.charAt(0) === ' ') {\n          newText = Utils.rtrim(newText, ' ') + line + \"\\n\";\n        } else {\n          newText += line + ' ';\n        }\n      }\n      text = newText;\n    }\n    if ('+' !== indicator) {\n      text = Utils.rtrim(text);\n    }\n    if ('' === indicator) {\n      text = this.PATTERN_TRAILING_LINES.replace(text, \"\\n\");\n    } else if ('-' === indicator) {\n      text = this.PATTERN_TRAILING_LINES.replace(text, '');\n    }\n    return text;\n  };\n\n  Parser.prototype.isNextLineIndented = function(ignoreComments) {\n    var EOF, currentIndentation, ret;\n    if (ignoreComments == null) {\n      ignoreComments = true;\n    }\n    currentIndentation = this.getCurrentLineIndentation();\n    EOF = !this.moveToNextLine();\n    if (ignoreComments) {\n      while (!EOF && this.isCurrentLineEmpty()) {\n        EOF = !this.moveToNextLine();\n      }\n    } else {\n      while (!EOF && this.isCurrentLineBlank()) {\n        EOF = !this.moveToNextLine();\n      }\n    }\n    if (EOF) {\n      return false;\n    }\n    ret = false;\n    if (this.getCurrentLineIndentation() > currentIndentation) {\n      ret = true;\n    }\n    this.moveToPreviousLine();\n    return ret;\n  };\n\n  Parser.prototype.isCurrentLineEmpty = function() {\n    var trimmedLine;\n    trimmedLine = Utils.trim(this.currentLine, ' ');\n    return trimmedLine.length === 0 || trimmedLine.charAt(0) === '#';\n  };\n\n  Parser.prototype.isCurrentLineBlank = function() {\n    return '' === Utils.trim(this.currentLine, ' ');\n  };\n\n  Parser.prototype.isCurrentLineComment = function() {\n    var ltrimmedLine;\n    ltrimmedLine = Utils.ltrim(this.currentLine, ' ');\n    return ltrimmedLine.charAt(0) === '#';\n  };\n\n  Parser.prototype.cleanup = function(value) {\n    var count, i, indent, j, l, len, len1, line, lines, ref, ref1, ref2, smallestIndent, trimmedValue;\n    if (value.indexOf(\"\\r\") !== -1) {\n      value = value.split(\"\\r\\n\").join(\"\\n\").split(\"\\r\").join(\"\\n\");\n    }\n    count = 0;\n    ref = this.PATTERN_YAML_HEADER.replaceAll(value, ''), value = ref[0], count = ref[1];\n    this.offset += count;\n    ref1 = this.PATTERN_LEADING_COMMENTS.replaceAll(value, '', 1), trimmedValue = ref1[0], count = ref1[1];\n    if (count === 1) {\n      this.offset += Utils.subStrCount(value, \"\\n\") - Utils.subStrCount(trimmedValue, \"\\n\");\n      value = trimmedValue;\n    }\n    ref2 = this.PATTERN_DOCUMENT_MARKER_START.replaceAll(value, '', 1), trimmedValue = ref2[0], count = ref2[1];\n    if (count === 1) {\n      this.offset += Utils.subStrCount(value, \"\\n\") - Utils.subStrCount(trimmedValue, \"\\n\");\n      value = trimmedValue;\n      value = this.PATTERN_DOCUMENT_MARKER_END.replace(value, '');\n    }\n    lines = value.split(\"\\n\");\n    smallestIndent = -1;\n    for (j = 0, len = lines.length; j < len; j++) {\n      line = lines[j];\n      if (Utils.trim(line, ' ').length === 0) {\n        continue;\n      }\n      indent = line.length - Utils.ltrim(line).length;\n      if (smallestIndent === -1 || indent < smallestIndent) {\n        smallestIndent = indent;\n      }\n    }\n    if (smallestIndent > 0) {\n      for (i = l = 0, len1 = lines.length; l < len1; i = ++l) {\n        line = lines[i];\n        lines[i] = line.slice(smallestIndent);\n      }\n      value = lines.join(\"\\n\");\n    }\n    return value;\n  };\n\n  Parser.prototype.isNextLineUnIndentedCollection = function(currentIndentation) {\n    var notEOF, ret;\n    if (currentIndentation == null) {\n      currentIndentation = null;\n    }\n    if (currentIndentation == null) {\n      currentIndentation = this.getCurrentLineIndentation();\n    }\n    notEOF = this.moveToNextLine();\n    while (notEOF && this.isCurrentLineEmpty()) {\n      notEOF = this.moveToNextLine();\n    }\n    if (false === notEOF) {\n      return false;\n    }\n    ret = false;\n    if (this.getCurrentLineIndentation() === currentIndentation && this.isStringUnIndentedCollectionItem(this.currentLine)) {\n      ret = true;\n    }\n    this.moveToPreviousLine();\n    return ret;\n  };\n\n  Parser.prototype.isStringUnIndentedCollectionItem = function() {\n    return this.currentLine === '-' || this.currentLine.slice(0, 2) === '- ';\n  };\n\n  return Parser;\n\n})();\n\nmodule.exports = Parser;\n","// Generated by CoffeeScript 1.12.4\nvar Pattern;\n\nPattern = (function() {\n  Pattern.prototype.regex = null;\n\n  Pattern.prototype.rawRegex = null;\n\n  Pattern.prototype.cleanedRegex = null;\n\n  Pattern.prototype.mapping = null;\n\n  function Pattern(rawRegex, modifiers) {\n    var _char, capturingBracketNumber, cleanedRegex, i, len, mapping, name, part, subChar;\n    if (modifiers == null) {\n      modifiers = '';\n    }\n    cleanedRegex = '';\n    len = rawRegex.length;\n    mapping = null;\n    capturingBracketNumber = 0;\n    i = 0;\n    while (i < len) {\n      _char = rawRegex.charAt(i);\n      if (_char === '\\\\') {\n        cleanedRegex += rawRegex.slice(i, +(i + 1) + 1 || 9e9);\n        i++;\n      } else if (_char === '(') {\n        if (i < len - 2) {\n          part = rawRegex.slice(i, +(i + 2) + 1 || 9e9);\n          if (part === '(?:') {\n            i += 2;\n            cleanedRegex += part;\n          } else if (part === '(?<') {\n            capturingBracketNumber++;\n            i += 2;\n            name = '';\n            while (i + 1 < len) {\n              subChar = rawRegex.charAt(i + 1);\n              if (subChar === '>') {\n                cleanedRegex += '(';\n                i++;\n                if (name.length > 0) {\n                  if (mapping == null) {\n                    mapping = {};\n                  }\n                  mapping[name] = capturingBracketNumber;\n                }\n                break;\n              } else {\n                name += subChar;\n              }\n              i++;\n            }\n          } else {\n            cleanedRegex += _char;\n            capturingBracketNumber++;\n          }\n        } else {\n          cleanedRegex += _char;\n        }\n      } else {\n        cleanedRegex += _char;\n      }\n      i++;\n    }\n    this.rawRegex = rawRegex;\n    this.cleanedRegex = cleanedRegex;\n    this.regex = new RegExp(this.cleanedRegex, 'g' + modifiers.replace('g', ''));\n    this.mapping = mapping;\n  }\n\n  Pattern.prototype.exec = function(str) {\n    var index, matches, name, ref;\n    this.regex.lastIndex = 0;\n    matches = this.regex.exec(str);\n    if (matches == null) {\n      return null;\n    }\n    if (this.mapping != null) {\n      ref = this.mapping;\n      for (name in ref) {\n        index = ref[name];\n        matches[name] = matches[index];\n      }\n    }\n    return matches;\n  };\n\n  Pattern.prototype.test = function(str) {\n    this.regex.lastIndex = 0;\n    return this.regex.test(str);\n  };\n\n  Pattern.prototype.replace = function(str, replacement) {\n    this.regex.lastIndex = 0;\n    return str.replace(this.regex, replacement);\n  };\n\n  Pattern.prototype.replaceAll = function(str, replacement, limit) {\n    var count;\n    if (limit == null) {\n      limit = 0;\n    }\n    this.regex.lastIndex = 0;\n    count = 0;\n    while (this.regex.test(str) && (limit === 0 || count < limit)) {\n      this.regex.lastIndex = 0;\n      str = str.replace(this.regex, replacement);\n      count++;\n    }\n    return [str, count];\n  };\n\n  return Pattern;\n\n})();\n\nmodule.exports = Pattern;\n","// Generated by CoffeeScript 1.12.4\nvar Pattern, Unescaper, Utils;\n\nUtils = require('./Utils');\n\nPattern = require('./Pattern');\n\nUnescaper = (function() {\n  function Unescaper() {}\n\n  Unescaper.PATTERN_ESCAPED_CHARACTER = new Pattern('\\\\\\\\([0abt\\tnvfre \"\\\\/\\\\\\\\N_LP]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})');\n\n  Unescaper.unescapeSingleQuotedString = function(value) {\n    return value.replace(/\\'\\'/g, '\\'');\n  };\n\n  Unescaper.unescapeDoubleQuotedString = function(value) {\n    if (this._unescapeCallback == null) {\n      this._unescapeCallback = (function(_this) {\n        return function(str) {\n          return _this.unescapeCharacter(str);\n        };\n      })(this);\n    }\n    return this.PATTERN_ESCAPED_CHARACTER.replace(value, this._unescapeCallback);\n  };\n\n  Unescaper.unescapeCharacter = function(value) {\n    var ch;\n    ch = String.fromCharCode;\n    switch (value.charAt(1)) {\n      case '0':\n        return ch(0);\n      case 'a':\n        return ch(7);\n      case 'b':\n        return ch(8);\n      case 't':\n        return \"\\t\";\n      case \"\\t\":\n        return \"\\t\";\n      case 'n':\n        return \"\\n\";\n      case 'v':\n        return ch(11);\n      case 'f':\n        return ch(12);\n      case 'r':\n        return ch(13);\n      case 'e':\n        return ch(27);\n      case ' ':\n        return ' ';\n      case '\"':\n        return '\"';\n      case '/':\n        return '/';\n      case '\\\\':\n        return '\\\\';\n      case 'N':\n        return ch(0x0085);\n      case '_':\n        return ch(0x00A0);\n      case 'L':\n        return ch(0x2028);\n      case 'P':\n        return ch(0x2029);\n      case 'x':\n        return Utils.utf8chr(Utils.hexDec(value.substr(2, 2)));\n      case 'u':\n        return Utils.utf8chr(Utils.hexDec(value.substr(2, 4)));\n      case 'U':\n        return Utils.utf8chr(Utils.hexDec(value.substr(2, 8)));\n      default:\n        return '';\n    }\n  };\n\n  return Unescaper;\n\n})();\n\nmodule.exports = Unescaper;\n","// Generated by CoffeeScript 1.12.4\nvar Pattern, Utils,\n  hasProp = {}.hasOwnProperty;\n\nPattern = require('./Pattern');\n\nUtils = (function() {\n  function Utils() {}\n\n  Utils.REGEX_LEFT_TRIM_BY_CHAR = {};\n\n  Utils.REGEX_RIGHT_TRIM_BY_CHAR = {};\n\n  Utils.REGEX_SPACES = /\\s+/g;\n\n  Utils.REGEX_DIGITS = /^\\d+$/;\n\n  Utils.REGEX_OCTAL = /[^0-7]/gi;\n\n  Utils.REGEX_HEXADECIMAL = /[^a-f0-9]/gi;\n\n  Utils.PATTERN_DATE = new Pattern('^' + '(?<year>[0-9][0-9][0-9][0-9])' + '-(?<month>[0-9][0-9]?)' + '-(?<day>[0-9][0-9]?)' + '(?:(?:[Tt]|[ \\t]+)' + '(?<hour>[0-9][0-9]?)' + ':(?<minute>[0-9][0-9])' + ':(?<second>[0-9][0-9])' + '(?:\\.(?<fraction>[0-9]*))?' + '(?:[ \\t]*(?<tz>Z|(?<tz_sign>[-+])(?<tz_hour>[0-9][0-9]?)' + '(?::(?<tz_minute>[0-9][0-9]))?))?)?' + '$', 'i');\n\n  Utils.LOCAL_TIMEZONE_OFFSET = new Date().getTimezoneOffset() * 60 * 1000;\n\n  Utils.trim = function(str, _char) {\n    var regexLeft, regexRight;\n    if (_char == null) {\n      _char = '\\\\s';\n    }\n    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];\n    if (regexLeft == null) {\n      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');\n    }\n    regexLeft.lastIndex = 0;\n    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];\n    if (regexRight == null) {\n      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');\n    }\n    regexRight.lastIndex = 0;\n    return str.replace(regexLeft, '').replace(regexRight, '');\n  };\n\n  Utils.ltrim = function(str, _char) {\n    var regexLeft;\n    if (_char == null) {\n      _char = '\\\\s';\n    }\n    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];\n    if (regexLeft == null) {\n      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');\n    }\n    regexLeft.lastIndex = 0;\n    return str.replace(regexLeft, '');\n  };\n\n  Utils.rtrim = function(str, _char) {\n    var regexRight;\n    if (_char == null) {\n      _char = '\\\\s';\n    }\n    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];\n    if (regexRight == null) {\n      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');\n    }\n    regexRight.lastIndex = 0;\n    return str.replace(regexRight, '');\n  };\n\n  Utils.isEmpty = function(value) {\n    return !value || value === '' || value === '0' || (value instanceof Array && value.length === 0) || this.isEmptyObject(value);\n  };\n\n  Utils.isEmptyObject = function(value) {\n    var k;\n    return value instanceof Object && ((function() {\n      var results;\n      results = [];\n      for (k in value) {\n        if (!hasProp.call(value, k)) continue;\n        results.push(k);\n      }\n      return results;\n    })()).length === 0;\n  };\n\n  Utils.subStrCount = function(string, subString, start, length) {\n    var c, i, j, len, ref, sublen;\n    c = 0;\n    string = '' + string;\n    subString = '' + subString;\n    if (start != null) {\n      string = string.slice(start);\n    }\n    if (length != null) {\n      string = string.slice(0, length);\n    }\n    len = string.length;\n    sublen = subString.length;\n    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      if (subString === string.slice(i, sublen)) {\n        c++;\n        i += sublen - 1;\n      }\n    }\n    return c;\n  };\n\n  Utils.isDigits = function(input) {\n    this.REGEX_DIGITS.lastIndex = 0;\n    return this.REGEX_DIGITS.test(input);\n  };\n\n  Utils.octDec = function(input) {\n    this.REGEX_OCTAL.lastIndex = 0;\n    return parseInt((input + '').replace(this.REGEX_OCTAL, ''), 8);\n  };\n\n  Utils.hexDec = function(input) {\n    this.REGEX_HEXADECIMAL.lastIndex = 0;\n    input = this.trim(input);\n    if ((input + '').slice(0, 2) === '0x') {\n      input = (input + '').slice(2);\n    }\n    return parseInt((input + '').replace(this.REGEX_HEXADECIMAL, ''), 16);\n  };\n\n  Utils.utf8chr = function(c) {\n    var ch;\n    ch = String.fromCharCode;\n    if (0x80 > (c %= 0x200000)) {\n      return ch(c);\n    }\n    if (0x800 > c) {\n      return ch(0xC0 | c >> 6) + ch(0x80 | c & 0x3F);\n    }\n    if (0x10000 > c) {\n      return ch(0xE0 | c >> 12) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);\n    }\n    return ch(0xF0 | c >> 18) + ch(0x80 | c >> 12 & 0x3F) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);\n  };\n\n  Utils.parseBoolean = function(input, strict) {\n    var lowerInput;\n    if (strict == null) {\n      strict = true;\n    }\n    if (typeof input === 'string') {\n      lowerInput = input.toLowerCase();\n      if (!strict) {\n        if (lowerInput === 'no') {\n          return false;\n        }\n      }\n      if (lowerInput === '0') {\n        return false;\n      }\n      if (lowerInput === 'false') {\n        return false;\n      }\n      if (lowerInput === '') {\n        return false;\n      }\n      return true;\n    }\n    return !!input;\n  };\n\n  Utils.isNumeric = function(input) {\n    this.REGEX_SPACES.lastIndex = 0;\n    return typeof input === 'number' || typeof input === 'string' && !isNaN(input) && input.replace(this.REGEX_SPACES, '') !== '';\n  };\n\n  Utils.stringToDate = function(str) {\n    var date, day, fraction, hour, info, minute, month, second, tz_hour, tz_minute, tz_offset, year;\n    if (!(str != null ? str.length : void 0)) {\n      return null;\n    }\n    info = this.PATTERN_DATE.exec(str);\n    if (!info) {\n      return null;\n    }\n    year = parseInt(info.year, 10);\n    month = parseInt(info.month, 10) - 1;\n    day = parseInt(info.day, 10);\n    if (info.hour == null) {\n      date = new Date(Date.UTC(year, month, day));\n      return date;\n    }\n    hour = parseInt(info.hour, 10);\n    minute = parseInt(info.minute, 10);\n    second = parseInt(info.second, 10);\n    if (info.fraction != null) {\n      fraction = info.fraction.slice(0, 3);\n      while (fraction.length < 3) {\n        fraction += '0';\n      }\n      fraction = parseInt(fraction, 10);\n    } else {\n      fraction = 0;\n    }\n    if (info.tz != null) {\n      tz_hour = parseInt(info.tz_hour, 10);\n      if (info.tz_minute != null) {\n        tz_minute = parseInt(info.tz_minute, 10);\n      } else {\n        tz_minute = 0;\n      }\n      tz_offset = (tz_hour * 60 + tz_minute) * 60000;\n      if ('-' === info.tz_sign) {\n        tz_offset *= -1;\n      }\n    }\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n    if (tz_offset) {\n      date.setTime(date.getTime() - tz_offset);\n    }\n    return date;\n  };\n\n  Utils.strRepeat = function(str, number) {\n    var i, res;\n    res = '';\n    i = 0;\n    while (i < number) {\n      res += str;\n      i++;\n    }\n    return res;\n  };\n\n  Utils.getStringFromFile = function(path, callback) {\n    var data, fs, j, len1, name, ref, req, xhr;\n    if (callback == null) {\n      callback = null;\n    }\n    xhr = null;\n    if (typeof window !== \"undefined\" && window !== null) {\n      if (window.XMLHttpRequest) {\n        xhr = new XMLHttpRequest();\n      } else if (window.ActiveXObject) {\n        ref = [\"Msxml2.XMLHTTP.6.0\", \"Msxml2.XMLHTTP.3.0\", \"Msxml2.XMLHTTP\", \"Microsoft.XMLHTTP\"];\n        for (j = 0, len1 = ref.length; j < len1; j++) {\n          name = ref[j];\n          try {\n            xhr = new ActiveXObject(name);\n          } catch (error) {}\n        }\n      }\n    }\n    if (xhr != null) {\n      if (callback != null) {\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState === 4) {\n            if (xhr.status === 200 || xhr.status === 0) {\n              return callback(xhr.responseText);\n            } else {\n              return callback(null);\n            }\n          }\n        };\n        xhr.open('GET', path, true);\n        return xhr.send(null);\n      } else {\n        xhr.open('GET', path, false);\n        xhr.send(null);\n        if (xhr.status === 200 || xhr.status === 0) {\n          return xhr.responseText;\n        }\n        return null;\n      }\n    } else {\n      req = require;\n      fs = req('fs');\n      if (callback != null) {\n        return fs.readFile(path, function(err, data) {\n          if (err) {\n            return callback(null);\n          } else {\n            return callback(String(data));\n          }\n        });\n      } else {\n        data = fs.readFileSync(path);\n        if (data != null) {\n          return String(data);\n        }\n        return null;\n      }\n    }\n  };\n\n  return Utils;\n\n})();\n\nmodule.exports = Utils;\n","// Generated by CoffeeScript 1.12.4\nvar Dumper, Parser, Utils, Yaml;\n\nParser = require('./Parser');\n\nDumper = require('./Dumper');\n\nUtils = require('./Utils');\n\nYaml = (function() {\n  function Yaml() {}\n\n  Yaml.parse = function(input, exceptionOnInvalidType, objectDecoder) {\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);\n  };\n\n  Yaml.parseFile = function(path, callback, exceptionOnInvalidType, objectDecoder) {\n    var input;\n    if (callback == null) {\n      callback = null;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    if (callback != null) {\n      return Utils.getStringFromFile(path, (function(_this) {\n        return function(input) {\n          var result;\n          result = null;\n          if (input != null) {\n            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);\n          }\n          callback(result);\n        };\n      })(this));\n    } else {\n      input = Utils.getStringFromFile(path);\n      if (input != null) {\n        return this.parse(input, exceptionOnInvalidType, objectDecoder);\n      }\n      return null;\n    }\n  };\n\n  Yaml.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    var yaml;\n    if (inline == null) {\n      inline = 2;\n    }\n    if (indent == null) {\n      indent = 4;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectEncoder == null) {\n      objectEncoder = null;\n    }\n    yaml = new Dumper();\n    yaml.indentation = indent;\n    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);\n  };\n\n  Yaml.stringify = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);\n  };\n\n  Yaml.load = function(path, callback, exceptionOnInvalidType, objectDecoder) {\n    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);\n  };\n\n  return Yaml;\n\n})();\n\nif (typeof window !== \"undefined\" && window !== null) {\n  window.YAML = Yaml;\n}\n\nif (typeof window === \"undefined\" || window === null) {\n  this.YAML = Yaml;\n}\n\nmodule.exports = Yaml;\n","import * as curlconverter from \"curlconverter\";\n\n// jq\nconst jsonDoc = document.getElementById(\"json-doc\");\nconst jqQuery = document.getElementById(\"jq-query\");\nconst jqResult = document.getElementById(\"jq-result\");\n\nfunction logError(message) {\n  jqResult.innerHTML = \"<pre><code>\" + message + \"</code></pre>\";\n}\n\nfunction runQuery() {\n  let parsedJson;\n\n  try {\n    parsedJson = JSON.parse(jsonDoc.value);\n  } catch (error) {\n    logError(error.message);\n  }\n\n  jq.then(function (jq) {\n    jqResult.innerHTML =\n      \"<pre><code>\" +\n      JSON.stringify(jq.json(parsedJson, jqQuery.value), null, 2) +\n      \"</code></pre>\";\n  }).catch(function (error) {\n    logError(error.message);\n  });\n}\n\njsonDoc.addEventListener(\"input\", runQuery);\njqQuery.addEventListener(\"input\", runQuery);\njq.then(runQuery);\n\n// curl\nconst curlExecute = document.getElementById(\"curl-execute\");\nconst curlCommand = document.getElementById(\"curl-command\");\nconst curlErrors = document.getElementById(\"curl-errors\");\n\nfunction runCurl() {\n  curlErrors.innerHTML = \"\";\n  jsonDoc.value = \"\";\n  runQuery();\n\n  let jsCode;\n  try {\n    jsCode = curlconverter.toJavaScript(curlCommand.value);\n  } catch (error) {\n    curlErrors.innerHTML =\n      \"<h2>Errors</h2><pre><code>\" + error.message + \"</code></pre>\";\n    return;\n  }\n  const promise = eval(jsCode);\n  promise\n    .then(async function (result) {\n      jsonDoc.value = await result.text();\n      runQuery();\n    })\n    .catch(function (error) {\n      curlErrors.innerHTML =\n        \"<h2>Errors</h2><pre><code>\" + error.message + \"</code></pre>\";\n    });\n}\n\nif (curlExecute) {\n  curlExecute.addEventListener(\"click\", runCurl);\n}\n","import { Word, eq } from \"./shell/Word.js\";\nimport { UTF8encoder } from \"./utils.js\";\n// Match Python's urllib.parse.quote() behavior\n// https://github.com/python/cpython/blob/3.11/Lib/urllib/parse.py#L826\n// curl and Python let you send non-ASCII characters by encoding each UTF-8 byte.\n// TODO: ignore hex case?\nfunction _percentEncode(s) {\n    return [...UTF8encoder.encode(s)]\n        .map((b) => {\n        if (\n        // A-Z\n        (b >= 0x41 && b <= 0x5a) ||\n            // a-z\n            (b >= 0x61 && b <= 0x7a) ||\n            // 0-9\n            (b >= 0x30 && b <= 0x39) ||\n            // -._~\n            b === 0x2d ||\n            b === 0x2e ||\n            b === 0x5f ||\n            b === 0x7e) {\n            return String.fromCharCode(b);\n        }\n        return \"%\" + b.toString(16).toUpperCase().padStart(2, \"0\");\n    })\n        .join(\"\");\n}\nexport function percentEncode(s) {\n    const newTokens = [];\n    for (const token of s.tokens) {\n        if (typeof token === \"string\") {\n            newTokens.push(_percentEncode(token));\n        }\n        else {\n            newTokens.push(token);\n        }\n    }\n    return new Word(newTokens);\n}\nexport function percentEncodePlus(s) {\n    const newTokens = [];\n    for (const token of s.tokens) {\n        if (typeof token === \"string\") {\n            newTokens.push(_percentEncode(token).replace(/%20/g, \"+\"));\n        }\n        else {\n            newTokens.push(token);\n        }\n    }\n    return new Word(newTokens);\n}\n// Reimplements decodeURIComponent but ignores variables/commands\nexport function wordDecodeURIComponent(s) {\n    const newTokens = [];\n    for (const token of s.tokens) {\n        if (typeof token === \"string\") {\n            newTokens.push(decodeURIComponent(token));\n        }\n        else {\n            newTokens.push(token);\n        }\n    }\n    return new Word(newTokens);\n}\n// if url is 'example.com?' the s is ''\n// if url is 'example.com'  the s is null\nexport function parseQueryString(s) {\n    if (!s || s.isEmpty()) {\n        return [null, null];\n    }\n    const asList = [];\n    for (const param of s.split(\"&\")) {\n        // Most software libraries don't let you distinguish between a=&b= and a&b,\n        // so if we get an `a&b`-type query string, don't bother.\n        if (!param.includes(\"=\")) {\n            return [null, null];\n        }\n        const [key, val] = param.split(\"=\", 2);\n        let decodedKey;\n        let decodedVal;\n        try {\n            // https://url.spec.whatwg.org/#urlencoded-parsing\n            // recommends replacing + with space before decoding.\n            decodedKey = wordDecodeURIComponent(key.replace(/\\+/g, \" \"));\n            decodedVal = wordDecodeURIComponent(val.replace(/\\+/g, \" \"));\n        }\n        catch (e) {\n            if (e instanceof URIError) {\n                // Query string contains invalid percent encoded characters,\n                // we cannot properly convert it.\n                return [null, null];\n            }\n            throw e;\n        }\n        // If the query string doesn't round-trip, we cannot properly convert it.\n        // TODO: this is a bit Python-specific, ideally we would check how each runtime/library\n        // percent-encodes query strings. For example, a %27 character in the input query\n        // string will be decoded to a ' but won't be re-encoded into a %27 by encodeURIComponent\n        const roundTripKey = percentEncode(decodedKey);\n        const roundTripVal = percentEncode(decodedVal);\n        // If the original data used %20 instead of + (what requests will send), that's close enough\n        if ((!eq(roundTripKey, key) && !eq(roundTripKey.replace(/%20/g, \"+\"), key)) ||\n            (!eq(roundTripVal, val) && !eq(roundTripVal.replace(/%20/g, \"+\"), val))) {\n            return [null, null];\n        }\n        asList.push([decodedKey, decodedVal]);\n    }\n    // Group keys\n    const keyWords = {};\n    const uniqueKeys = {};\n    let prevKey = null;\n    for (const [key, val] of asList) {\n        const keyStr = key.toString(); // TODO: do this better\n        if (prevKey === keyStr) {\n            uniqueKeys[keyStr].push(val);\n        }\n        else if (!Object.prototype.hasOwnProperty.call(uniqueKeys, keyStr)) {\n            uniqueKeys[keyStr] = [val];\n            keyWords[keyStr] = key;\n        }\n        else {\n            // If there's a repeated key with a different key between\n            // one of its repetitions, there is no way to represent\n            // this query string as a dictionary.\n            return [asList, null];\n        }\n        prevKey = keyStr;\n    }\n    // Convert lists with 1 element to the element\n    const asDict = [];\n    for (const [keyStr, val] of Object.entries(uniqueKeys)) {\n        asDict.push([keyWords[keyStr], val.length === 1 ? val[0] : val]);\n    }\n    return [asList, asDict];\n}\n//# sourceMappingURL=Query.js.map","import { Word, eq, joinWords } from \"./shell/Word.js\";\n// https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Standard_request_fields\n// and then searched for \"#\" in the RFCs that define each header\nconst COMMA_SEPARATED = new Set([\n    \"A-IM\",\n    \"Accept\",\n    \"Accept-Charset\",\n    // \"Accept-Datetime\",\n    \"Accept-Encoding\",\n    \"Accept-Language\",\n    // \"Access-Control-Request-Method\",\n    \"Access-Control-Request-Headers\",\n    // TODO: auth-scheme [ 1*SP ( token68 / #auth-param ) ]\n    // \"Authorization\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Encoding\",\n    // \"Content-Length\",\n    // \"Content-MD5\",\n    // \"Content-Type\", // semicolon\n    // \"Cookie\", // semicolon\n    // \"Date\",\n    \"Expect\",\n    \"Forwarded\",\n    // \"From\",\n    // \"Host\",\n    // \"HTTP2-Settings\",\n    \"If-Match\",\n    // \"If-Modified-Since\",\n    \"If-None-Match\",\n    // \"If-Range\",\n    // \"If-Unmodified-Since\",\n    // \"Max-Forwards\",\n    // \"Origin\",\n    // \"Pragma\",\n    // \"Prefer\", // semicolon\n    // \"Proxy-Authorization\",\n    \"Range\",\n    // \"Referer\",\n    \"TE\",\n    \"Trailer\",\n    \"Transfer-Encoding\",\n    // \"User-Agent\",\n    \"Upgrade\",\n    \"Via\",\n    \"Warning\",\n].map((h) => h.toLowerCase()));\nconst SEMICOLON_SEPARATED = new Set([\"Content-Type\", \"Cookie\", \"Prefer\"].map((h) => h.toLowerCase()));\nexport class Headers {\n    constructor(headerArgs, warnings = [], \n    // Used for warnings\n    argName = \"--header/H\") {\n        let headers = [];\n        if (headerArgs) {\n            for (const header of headerArgs) {\n                if (header.startsWith(\"@\")) {\n                    warnings.push([\n                        \"header-file\",\n                        \"passing a file for \" +\n                            argName +\n                            \" is not supported: \" +\n                            JSON.stringify(header.toString()),\n                    ]);\n                    continue;\n                }\n                if (header.includes(\":\")) {\n                    const [name, value] = header.split(\":\", 2);\n                    // Passing -H 'Header-Name:' disables sending of that header.\n                    // If the colon is followed by just spaces they're ignored\n                    // unless it's -H 'Host: '\n                    // https://github.com/curl/curl/issues/12782\n                    const hasValue = value && (eq(name, \"Host\") ? value : value.trim()).toBool();\n                    const headerValue = hasValue ? value.removeFirstChar(\" \") : null;\n                    headers.push([name, headerValue]);\n                }\n                else if (header.includes(\";\")) {\n                    const [name] = header.split(\";\", 2);\n                    headers.push([name, new Word()]);\n                }\n                else {\n                    // TODO: warn that this header arg is ignored?\n                }\n            }\n        }\n        this.lowercase =\n            headers.length > 0 && headers.every((h) => eq(h[0], h[0].toLowerCase()));\n        // Handle repeated headers\n        // For Cookie and Accept, merge the values using ';' and ',' respectively\n        // For other headers, warn about the repeated header\n        const uniqueHeaders = {};\n        for (const [name, value] of headers) {\n            // TODO: something better, at least warn that variable is ignored\n            const lowerName = name.toLowerCase().toString();\n            if (!uniqueHeaders[lowerName]) {\n                uniqueHeaders[lowerName] = [];\n            }\n            uniqueHeaders[lowerName].push([name, value]);\n        }\n        headers = [];\n        for (const [lowerName, repeatedHeaders] of Object.entries(uniqueHeaders)) {\n            if (repeatedHeaders.length === 1) {\n                headers.push(repeatedHeaders[0]);\n                continue;\n            }\n            // If they're all null, just use the first one\n            if (repeatedHeaders.every((h) => h[1] === null)) {\n                const lastRepeat = repeatedHeaders[repeatedHeaders.length - 1];\n                // Warn users if some are capitalized differently\n                if (new Set(repeatedHeaders.map((h) => h[0])).size > 1) {\n                    warnings.push([\n                        \"repeated-header\",\n                        `\"${lastRepeat[0]}\" header unset ${repeatedHeaders.length} times`,\n                    ]);\n                }\n                headers.push(lastRepeat);\n                continue;\n            }\n            // Otherwise there's at least one non-null value, so we can ignore the nulls\n            // TODO: if the values of the repeated headers are the same, just use the first one\n            //     'content-type': 'application/json; application/json',\n            // doesn't really make sense\n            const nonEmptyHeaders = repeatedHeaders.filter((h) => h[1] !== null);\n            if (nonEmptyHeaders.length === 1) {\n                headers.push(nonEmptyHeaders[0]);\n                continue;\n            }\n            let mergeChar = \"\";\n            if (COMMA_SEPARATED.has(lowerName)) {\n                mergeChar = \", \";\n            }\n            else if (SEMICOLON_SEPARATED.has(lowerName)) {\n                mergeChar = \"; \";\n            }\n            if (mergeChar) {\n                const merged = joinWords(nonEmptyHeaders.map((h) => h[1]), mergeChar);\n                warnings.push([\n                    \"repeated-header\",\n                    `merged ${nonEmptyHeaders.length} \"${nonEmptyHeaders[nonEmptyHeaders.length - 1][0]}\" headers together with \"${mergeChar.trim()}\"`,\n                ]);\n                headers.push([nonEmptyHeaders[0][0], merged]);\n                continue;\n            }\n            warnings.push([\n                \"repeated-header\",\n                `found ${nonEmptyHeaders.length} \"${nonEmptyHeaders[nonEmptyHeaders.length - 1][0]}\" headers, only the last one will be sent`,\n            ]);\n            headers = headers.concat(nonEmptyHeaders);\n        }\n        this.headers = headers;\n    }\n    get length() {\n        return this.headers.length;\n    }\n    *[Symbol.iterator]() {\n        for (const h of this.headers) {\n            yield h;\n        }\n    }\n    // Gets the first header, matching case-insensitively\n    get(header) {\n        const lookup = header.toLowerCase();\n        for (const [h, v] of this.headers) {\n            if (h.toLowerCase().toString() === lookup) {\n                return v;\n            }\n        }\n        return undefined;\n    }\n    getContentType() {\n        const contentTypeHeader = this.get(\"content-type\");\n        if (!contentTypeHeader) {\n            return contentTypeHeader;\n        }\n        return contentTypeHeader.split(\";\")[0].trim().toString();\n    }\n    has(header) {\n        const lookup = header.toLowerCase();\n        for (const h of this.headers) {\n            if (eq(h[0].toLowerCase(), lookup)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Doesn't overwrite existing headers\n    setIfMissing(header, value) {\n        if (this.has(header)) {\n            return false;\n        }\n        if (this.lowercase) {\n            header = header.toLowerCase();\n        }\n        const k = typeof header === \"string\" ? new Word(header) : header;\n        const v = typeof value === \"string\" ? new Word(value) : value;\n        this.headers.push([k, v]);\n        return true;\n    }\n    prependIfMissing(header, value) {\n        if (this.has(header)) {\n            return false;\n        }\n        if (this.lowercase) {\n            header = header.toLowerCase();\n        }\n        const k = typeof header === \"string\" ? new Word(header) : header;\n        const v = typeof value === \"string\" ? new Word(value) : value;\n        this.headers.unshift([k, v]);\n        return true;\n    }\n    set(header, value) {\n        if (this.lowercase) {\n            header = header.toLowerCase();\n        }\n        const k = typeof header === \"string\" ? new Word(header) : header;\n        const v = typeof value === \"string\" ? new Word(value) : value;\n        // keep it in the same place if we overwrite\n        const searchHeader = k.toLowerCase().toString();\n        for (let i = 0; i < this.headers.length; i++) {\n            if (eq(this.headers[i][0].toLowerCase(), searchHeader)) {\n                this.headers[i][1] = v;\n                return;\n            }\n        }\n        this.headers.push([k, v]);\n    }\n    delete(header) {\n        const lookup = header.toLowerCase();\n        for (let i = this.headers.length - 1; i >= 0; i--) {\n            if (this.headers[i][0].toLowerCase().toString() === lookup) {\n                this.headers.splice(i, 1);\n            }\n        }\n    }\n    // TODO: doesn't this skip the next element after deleting?\n    clearNulls() {\n        for (let i = this.headers.length - 1; i >= 0; i--) {\n            if (this.headers[i][1] === null) {\n                this.headers.splice(i, 1);\n            }\n        }\n    }\n    // TODO: shouldn't be used\n    count(header) {\n        let count = 0;\n        const lookup = header.toLowerCase();\n        for (const h of this.headers || []) {\n            if (h[0].toLowerCase().toString() === lookup) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n    toBool() {\n        return this.headers.length > 0 && this.headers.some((h) => h[1] !== null);\n    }\n}\nexport function parseCookiesStrict(cookieString) {\n    const cookies = [];\n    for (let cookie of cookieString.split(\";\")) {\n        cookie = cookie.replace(/^ /, \"\");\n        const [name, value] = cookie.split(\"=\", 2);\n        if (value === undefined) {\n            return null;\n        }\n        cookies.push([name, value]);\n    }\n    if (new Set(cookies.map((c) => c[0])).size !== cookies.length) {\n        return null;\n    }\n    return cookies;\n}\nexport function parseCookies(cookieString) {\n    const cookies = [];\n    for (let cookie of cookieString.split(\";\")) {\n        cookie = cookie.trim();\n        if (!cookie) {\n            continue;\n        }\n        const [name, value] = cookie.split(\"=\", 2);\n        cookies.push([name.trim(), (value || \"\").trim()]);\n    }\n    if (new Set(cookies.map((c) => c[0])).size !== cookies.length) {\n        return null;\n    }\n    return cookies;\n}\n//# sourceMappingURL=Headers.js.map","import { Word, eq } from \"../shell/Word.js\";\nimport { warnf } from \"../Warnings.js\";\n// https://github.com/curl/curl/blob/curl-7_88_1/src/tool_urlglob.c#L327\nconst MAX_IP6LEN = 128;\nfunction isIpv6(glob) {\n    if (glob.length > MAX_IP6LEN) {\n        return false;\n    }\n    // TODO: curl tries to parse the glob as a hostname.\n    return !glob.includes(\"-\");\n}\nfunction warnAboutGlobs(global_, url) {\n    // Find any glob expressions in the URL and underline them\n    let prev = \"\";\n    for (let i = 0; i < url.length; i++) {\n        const cur = url[i];\n        if (cur === \"[\" && prev !== \"\\\\\") {\n            let j = i + 1;\n            while (j < url.length && url[j] !== \"]\") {\n                j++;\n            }\n            if (j < url.length && url[j] === \"]\") {\n                const glob = url.slice(i, j + 1);\n                // could be ipv6 address\n                if (!isIpv6(glob)) {\n                    warnf(global_, [\n                        \"glob-in-url\",\n                        `globs in the URL are not supported:\\n` +\n                            `${url}\\n` +\n                            \" \".repeat(i) +\n                            \"^\".repeat(glob.length),\n                    ]);\n                }\n                prev = \"\";\n            }\n            else {\n                // No closing bracket\n                warnf(global_, [\n                    \"unbalanced-glob\",\n                    \"bracket doesn't have a closing bracket:\\n\" +\n                        `${url}\\n` +\n                        `${\" \".repeat(i)}^`,\n                ]);\n                return; // malformed URL, stop looking for globs\n            }\n        }\n        else if (cur === \"{\" && prev !== \"\\\\\") {\n            let j = i + 1;\n            while (j < url.length && url[j] !== \"}\") {\n                j++;\n            }\n            if (j < url.length && url[j] === \"}\") {\n                const glob = url.slice(i, j + 1);\n                warnf(global_, [\n                    \"glob-in-url\",\n                    `globs in the URL are not supported:\\n` +\n                        `${url}\\n` +\n                        \" \".repeat(i) +\n                        \"^\".repeat(glob.length),\n                ]);\n                prev = \"\";\n            }\n            else {\n                // No closing bracket\n                warnf(global_, [\n                    \"unbalanced-glob\",\n                    \"bracket doesn't have a closing bracket:\\n\" +\n                        `${url}\\n` +\n                        `${\" \".repeat(i)}^`,\n                ]);\n                return; // malformed URL, stop looking for globs\n            }\n        }\n        prev = cur;\n    }\n}\nexport function parseurl(global_, config, url) {\n    var _a;\n    // This is curl's parseurl()\n    // https://github.com/curl/curl/blob/curl-7_85_0/lib/urlapi.c#L1144\n    // Except we want to accept all URLs.\n    // curl further validates URLs in curl_url_get()\n    // https://github.com/curl/curl/blob/curl-7_86_0/lib/urlapi.c#L1374\n    const u = {\n        scheme: new Word(),\n        host: new Word(),\n        port: new Word(),\n        path: new Word(), // with leading '/'\n        query: new Word(), // with leading '?'\n        fragment: new Word(), // with leading '#'\n    };\n    // Remove url glob escapes\n    // https://github.com/curl/curl/blob/curl-7_87_0/src/tool_urlglob.c#L395-L398\n    if (!config.globoff) {\n        if (url.isString()) {\n            warnAboutGlobs(global_, url.toString());\n        }\n        url = url.replace(/\\\\([[\\]{}])/g, \"$1\");\n    }\n    // Prepend \"http\"/\"https\" if the scheme is missing.\n    // RFC 3986 3.1 says\n    //   scheme      = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n    // but curl will accept a digit/plus/minus/dot in the first character\n    // curl will also accept a url with one / like http:/localhost\n    // https://github.com/curl/curl/blob/curl-7_85_0/lib/urlapi.c#L960\n    let schemeMatch = null;\n    if (url.tokens.length && typeof url.tokens[0] === \"string\") {\n        schemeMatch = url.tokens[0].match(/^([a-zA-Z0-9+-.]*):\\/\\/*/);\n    }\n    if (schemeMatch) {\n        const [schemeAndSlashes, scheme] = schemeMatch;\n        u.scheme = new Word(scheme.toLowerCase());\n        url = url.slice(schemeAndSlashes.length);\n    }\n    else {\n        // curl defaults to https://\n        // we don't because most libraries won't downgrade to http\n        // if you ask for https, unlike curl.\n        // TODO: handle file:// scheme\n        u.scheme = (_a = config[\"proto-default\"]) !== null && _a !== void 0 ? _a : new Word(\"http\");\n    }\n    if (!eq(u.scheme, \"http\") && !eq(u.scheme, \"https\")) {\n        warnf(global_, [\"bad-scheme\", `Protocol \"${u.scheme}\" not supported`]);\n    }\n    // https://github.com/curl/curl/blob/curl-7_85_0/lib/urlapi.c#L992\n    const hostMatch = url.indexOfFirstChar(\"/?#\");\n    if (hostMatch !== -1) {\n        u.host = url.slice(0, hostMatch);\n        // TODO: u.path might end up empty if indexOfFirstChar found ?#\n        u.path = url.slice(hostMatch); // keep leading '/' in .path\n        // https://github.com/curl/curl/blob/curl-7_85_0/lib/urlapi.c#L1024\n        const fragmentIndex = u.path.indexOf(\"#\");\n        const queryIndex = u.path.indexOf(\"?\");\n        if (fragmentIndex !== -1) {\n            u.fragment = u.path.slice(fragmentIndex);\n            if (queryIndex !== -1 && queryIndex < fragmentIndex) {\n                u.query = u.path.slice(queryIndex, fragmentIndex);\n                u.path = u.path.slice(0, queryIndex);\n            }\n            else {\n                u.path = u.path.slice(0, fragmentIndex);\n            }\n        }\n        else if (queryIndex !== -1) {\n            u.query = u.path.slice(queryIndex);\n            u.path = u.path.slice(0, queryIndex);\n        }\n    }\n    else {\n        u.host = url;\n    }\n    // parse username:password@hostname\n    // https://github.com/curl/curl/blob/curl-7_85_0/lib/urlapi.c#L1083\n    // https://github.com/curl/curl/blob/curl-7_85_0/lib/urlapi.c#L460\n    // https://github.com/curl/curl/blob/curl-7_85_0/lib/url.c#L2827\n    const authMatch = u.host.indexOf(\"@\");\n    if (authMatch !== -1) {\n        const auth = u.host.slice(0, authMatch);\n        u.host = u.host.slice(authMatch + 1); // throw away '@'\n        if (!config[\"disallow-username-in-url\"]) {\n            u.auth = auth;\n            if (auth.includes(\":\")) {\n                [u.user, u.password] = auth.split(\":\", 2);\n            }\n            else {\n                u.user = auth;\n                u.password = new Word(); // if there's no ':', curl will append it\n            }\n        }\n        else {\n            // Curl will exit if this is the case, but we just remove it from the URL\n            warnf(global_, [\n                \"login-denied\",\n                `Found auth in URL but --disallow-username-in-url was passed: ${auth.toString()}`,\n            ]);\n        }\n    }\n    // TODO: need to extract port first\n    // hostname_check()\n    // https://github.com/curl/curl/blob/curl-7_86_0/lib/urlapi.c#L572\n    // if (!u.host) {\n    //   warnf(global_, [\n    //     \"no-host\",\n    //     \"Found empty host in URL: \" + JSON.stringify(url),\n    //   ]);\n    // } else if (u.host.startsWith(\"[\")) {\n    //   if (!u.host.endsWith(\"]\")) {\n    //     warnf(global_, [\n    //       \"bad-host\",\n    //       \"Found invalid IPv6 address in URL: \" + JSON.stringify(url),\n    //     ]);\n    //   } else {\n    //     const firstWeirdCharacter = u.host.match(/[^0123456789abcdefABCDEF:.]/);\n    //     // %zone_id\n    //     if (firstWeirdCharacter && firstWeirdCharacter[0] !== \"%\") {\n    //       warnf(global_, [\n    //         \"bad-host\",\n    //         \"Found invalid IPv6 address in URL: \" + JSON.stringify(url),\n    //       ]);\n    //     }\n    //   }\n    // } else {\n    //   const firstInvalidCharacter = u.host.match(\n    //     /[\\r\\n\\t/:#?!@{}[\\]\\\\$'\"^`*<>=;,]/\n    //   );\n    //   if (firstInvalidCharacter) {\n    //     warnf(global_, [\n    //       \"bad-host\",\n    //       \"Found invalid character \" +\n    //         JSON.stringify(firstInvalidCharacter[0]) +\n    //         \" in URL: \" +\n    //         JSON.stringify(url),\n    //     ]);\n    //   }\n    // }\n    return u;\n}\n//# sourceMappingURL=url.js.map","import { CCError } from \"../utils.js\";\nimport { Word, eq } from \"../shell/Word.js\";\nfunction parseDetails(formParam, p, ptr, supported, warnings) {\n    while (ptr < p.length && p.charAt(ptr) === \";\") {\n        ptr += 1;\n        while (ptr < p.length && isSpace(p.charAt(ptr))) {\n            ptr += 1;\n        }\n        if (ptr >= p.length) {\n            return formParam;\n        }\n        const value = p.slice(ptr);\n        if (value.startsWith(\"type=\")) {\n            // TODO: the syntax for type= is more complicated\n            [formParam.contentType, ptr] = getParamWord(p, ptr + 5, warnings);\n        }\n        else if (value.startsWith(\"filename=\")) {\n            const [filename, filenameEnd] = getParamWord(p, ptr + 9, warnings);\n            ptr = filenameEnd;\n            if (supported.filename) {\n                formParam.filename = filename;\n            }\n            else {\n                warnings.push([\n                    \"unsupported-form-detail\",\n                    \"Field file name not allowed here: \" + filename.toString(),\n                ]);\n            }\n        }\n        else if (value.startsWith(\"encoder=\")) {\n            const [encoder, encoderEnd] = getParamWord(p, ptr + 8, warnings);\n            ptr = encoderEnd;\n            if (supported.encoder) {\n                formParam.encoder = encoder;\n            }\n            else {\n                warnings.push([\n                    \"unsupported-form-detail\",\n                    \"Field encoder not allowed here: \" + encoder.toString(),\n                ]);\n            }\n        }\n        else if (value.startsWith(\"headers=\")) {\n            const [headers, headersEnd] = getParamWord(p, ptr + 8, warnings);\n            ptr = headersEnd;\n            if (supported.headers) {\n                if (headers.startsWith(\"@\")) {\n                    if (formParam.headerFiles === undefined) {\n                        formParam.headerFiles = [];\n                    }\n                    formParam.headerFiles.push(headers.slice(1));\n                }\n                else {\n                    if (formParam.headers === undefined) {\n                        formParam.headers = [];\n                    }\n                    formParam.headers.push(headers);\n                }\n            }\n            else {\n                warnings.push([\n                    \"unsupported-form-detail\",\n                    \"Field headers not allowed here: \" + headers.toString(),\n                ]);\n            }\n        }\n        else {\n            // TODO: it would be more consistent for curl to skip until the first \"=\", then\n            // getParamWord, because quoting a ; in an unknown value breaks values that\n            // come after it, e.g.:\n            // curl -F 'myname=myvalue;bfilename=\"f;oo\";filename=oeu' localhost:8888\n            const unknown = getParamWord(p, ptr, warnings);\n            const unknownEnd = unknown[1];\n            ptr = unknownEnd;\n            warnings.push([\n                \"unknown-form-detail\",\n                \"skip unknown form field: \" + value.toString(),\n            ]);\n        }\n    }\n    return formParam;\n}\nfunction isSpace(c) {\n    // Implements the following macro from curl:\n    // #define ISBLANK(x)  (((x) == ' ') || ((x) == '\\t'))\n    // #define ISSPACE(x)  (ISBLANK(x) || (((x) >= 0xa) && ((x) <= 0x0d)))\n    return (typeof c === \"string\" &&\n        (c === \" \" || c === \"\\t\" || (c >= \"\\n\" && c <= \"\\r\")));\n}\nfunction getParamWord(p, start, warnings) {\n    let ptr = start;\n    if (p.charAt(ptr) === '\"') {\n        ptr += 1;\n        const parts = [];\n        while (ptr < p.length) {\n            let curChar = p.charAt(ptr);\n            if (curChar === \"\\\\\") {\n                if (ptr + 1 < p.length) {\n                    const nextChar = p.charAt(ptr + 1);\n                    if (nextChar === '\"' || nextChar === \"\\\\\") {\n                        ptr += 1;\n                        curChar = p.charAt(ptr);\n                    }\n                }\n            }\n            else if (curChar === '\"') {\n                ptr += 1;\n                let trailingData = false;\n                while (ptr < p.length && p.charAt(ptr) !== \";\") {\n                    if (!isSpace(p.charAt(ptr))) {\n                        trailingData = true;\n                    }\n                    ptr += 1;\n                }\n                if (trailingData) {\n                    warnings.push([\n                        \"trailing-form-data\",\n                        \"Trailing data after quoted form parameter\",\n                    ]);\n                }\n                return [new Word(parts), ptr];\n            }\n            parts.push(curChar);\n            ptr += 1;\n        }\n    }\n    let sepIdx = p.indexOf(\";\", start);\n    if (sepIdx === -1) {\n        sepIdx = p.length;\n    }\n    return [p.slice(start, sepIdx), sepIdx];\n}\nfunction getParamPart(formParam, p, ptr, supported, warnings) {\n    while (ptr < p.length && isSpace(p.charAt(ptr))) {\n        ptr += 1;\n    }\n    const [content, contentEnd] = getParamWord(p, ptr, warnings);\n    formParam.content = content;\n    parseDetails(formParam, p, contentEnd, supported, warnings);\n    return formParam;\n}\n// TODO: https://curl.se/docs/manpage.html#-F\n// https://github.com/curl/curl/blob/curl-7_88_1/src/tool_formparse.c\n// -F is a complicated option to parse.\nexport function parseForm(form, warnings) {\n    const multipartUploads = [];\n    let depth = 0;\n    for (const multipartArgument of form) {\n        const isString = multipartArgument.type === \"string\";\n        if (!multipartArgument.value.includes(\"=\")) {\n            throw new CCError('invalid value for --form/-F, missing \"=\": ' +\n                JSON.stringify(multipartArgument.value.toString()));\n        }\n        const [name, value] = multipartArgument.value.split(\"=\", 2);\n        const formParam = { name };\n        if (!isString && value.charAt(0) === \"(\") {\n            depth += 1;\n            warnings.push([\n                \"nested-form\",\n                'Nested form data with \"=(\" is not supported, it will be flattened',\n            ]);\n            getParamPart(formParam, value, 1, {\n                headers: true,\n            }, warnings);\n        }\n        else if (!isString && name.length === 0 && eq(value, \")\")) {\n            depth -= 1;\n            if (depth < 0) {\n                throw new CCError(\"no multipart to terminate: \" +\n                    JSON.stringify(multipartArgument.value.toString()));\n            }\n        }\n        else if (!isString && value.charAt(0) === \"@\") {\n            // TODO: there can be multiple files separated by a comma\n            getParamPart(formParam, value, 1, {\n                filename: true,\n                encoder: true,\n                headers: true,\n            }, warnings);\n            formParam.contentFile = formParam.content;\n            delete formParam.content;\n            if (formParam.filename === null || formParam.filename === undefined) {\n                formParam.filename = formParam.contentFile;\n            }\n            if (formParam.contentType === null ||\n                formParam.contentType === undefined) {\n                // TODO: set from contentFile extension\n            }\n        }\n        else if (!isString && value.charAt(0) === \"<\") {\n            getParamPart(formParam, value, 1, {\n                encoder: true,\n                headers: true,\n            }, warnings);\n            formParam.contentFile = formParam.content;\n            delete formParam.content;\n            if (formParam.contentType === null ||\n                formParam.contentType === undefined) {\n                // TODO: set from contentFile extension\n            }\n        }\n        else {\n            if (isString) {\n                formParam.content = value;\n            }\n            else {\n                getParamPart(formParam, value, 0, {\n                    filename: true,\n                    encoder: true,\n                    headers: true,\n                }, warnings);\n            }\n        }\n        multipartUploads.push(formParam);\n    }\n    return multipartUploads;\n}\n//# sourceMappingURL=form.js.map","import { Word, eq, mergeWords, joinWords } from \"./shell/Word.js\";\nimport { CCError, has, isInt } from \"./utils.js\";\nimport { warnf, warnIfPartsIgnored } from \"./Warnings.js\";\nimport { Headers, parseCookies, parseCookiesStrict } from \"./Headers.js\";\nimport { pickAuth } from \"./curl/auth.js\";\nimport { parseurl } from \"./curl/url.js\";\nimport { parseQueryString, percentEncodePlus } from \"./Query.js\";\nimport { parseForm } from \"./curl/form.js\";\nfunction buildURL(global_, config, url, uploadFile, outputFile, stdin, stdinFile) {\n    const originalUrl = url;\n    const u = parseurl(global_, config, url);\n    // https://github.com/curl/curl/blob/curl-7_85_0/src/tool_operate.c#L1124\n    // https://github.com/curl/curl/blob/curl-7_85_0/src/tool_operhlp.c#L76\n    if (uploadFile) {\n        // TODO: it's more complicated\n        if (u.path.isEmpty()) {\n            u.path = uploadFile.prepend(\"/\");\n        }\n        else if (u.path.endsWith(\"/\")) {\n            u.path = u.path.add(uploadFile);\n        }\n        if (config.get) {\n            warnf(global_, [\n                \"data-ignored\",\n                \"curl doesn't let you pass --get and --upload-file together\",\n            ]);\n        }\n    }\n    const urlWithOriginalQuery = mergeWords(u.scheme, \"://\", u.host, u.path, u.query, u.fragment);\n    // curl example.com example.com?foo=bar --url-query isshared=t\n    // will make requests for\n    // example.com/?isshared=t\n    // example.com/?foo=bar&isshared=t\n    //\n    // so the query could come from\n    //   1. `--url` (i.e. the requested URL)\n    //   2. `--url-query` or `--get --data` (the latter takes precedence)\n    //\n    // If it comes from the latter, we might need to generate code to read\n    // from one or more files.\n    // When there's multiple urls, the latter applies to all of them\n    // but the query from --url only applies to that URL.\n    //\n    // There's 3 cases for the query:\n    // 1. it's well-formed and can be expressed as a list of tuples (or a dict)\n    //   `?one=1&one=1&two=2`\n    // 2. it can't, for example because one of the pieces doesn't have a '='\n    //   `?one`\n    // 3. we need to generate code that reads from a file\n    //\n    // If there's only one URL we merge the query from the URL with the shared part.\n    //\n    // If there's multiple URLs and a shared part that reads from a file (case 3),\n    // we only write the file reading code once, pass it as the params= argument\n    // and the part from the URL has to be passed as a string in the URL\n    // and requests will combine the query in the URL with the query in params=.\n    //\n    // Otherwise, we print each query for each URL individually, either as a\n    // list of tuples if we can or in the URL if we can't.\n    //\n    // When files are passed in through --data-urlencode or --url-query\n    // we can usually treat them as case 1 as well (in Python), but that would\n    // generate code slightly different from curl because curl reads the file once\n    // upfront, whereas we would read the file multiple times and it might contain\n    // different data each time (for example if it's /dev/urandom).\n    let urlQueryArray = null;\n    let queryArray = null;\n    let queryStrReadsFile = null;\n    if (u.query.toBool() || (config[\"url-query\"] && config[\"url-query\"].length)) {\n        let queryStr = null;\n        let queryParts = [];\n        if (u.query.toBool()) {\n            // remove the leading '?'\n            queryParts.push([\"raw\", u.query.slice(1)]);\n            [queryArray, queryStr, queryStrReadsFile] = buildData(queryParts, stdin, stdinFile);\n            urlQueryArray = queryArray;\n        }\n        if (config[\"url-query\"]) {\n            queryParts = queryParts.concat(config[\"url-query\"]);\n            [queryArray, queryStr, queryStrReadsFile] = buildData(queryParts, stdin, stdinFile);\n        }\n        // TODO: check the curl source code\n        // TODO: curl localhost:8888/?\n        // will request /?\n        // but\n        // curl localhost:8888/? --url-query ''\n        // (or --get --data '') will request /\n        u.query = new Word();\n        if (queryStr && queryStr.toBool()) {\n            u.query = queryStr.prepend(\"?\");\n        }\n    }\n    const urlWithoutQueryArray = mergeWords(u.scheme, \"://\", u.host, u.path, u.fragment);\n    url = mergeWords(u.scheme, \"://\", u.host, u.path, u.query, u.fragment);\n    let urlWithoutQueryList = url;\n    // TODO: parseQueryString() doesn't accept leading '?'\n    let [queryList, queryDict] = parseQueryString(u.query.toBool() ? u.query.slice(1) : new Word());\n    if (queryList && queryList.length) {\n        // TODO: remove the fragment too?\n        urlWithoutQueryList = mergeWords(u.scheme, \"://\", u.host, u.path, u.fragment);\n    }\n    else {\n        queryList = null;\n        queryDict = null;\n    }\n    // TODO: --path-as-is\n    // TODO: --request-target\n    // curl expects you to uppercase methods always. If you do -X PoSt, that's what it\n    // will send, but most APIs will helpfully uppercase what you pass in as the method.\n    //\n    // There are many places where curl determines the method, this is the last one:\n    // https://github.com/curl/curl/blob/curl-7_85_0/lib/http.c#L2032\n    let method = new Word(\"GET\");\n    if (config.request &&\n        // Safari adds `-X null` if it can't determine the request type\n        // https://github.com/WebKit/WebKit/blob/f58ef38d48f42f5d7723691cb090823908ff5f9f/Source/WebInspectorUI/UserInterface/Models/Resource.js#L1250\n        !eq(config.request, \"null\")) {\n        method = config.request;\n    }\n    else if (config.head) {\n        method = new Word(\"HEAD\");\n    }\n    else if (uploadFile && uploadFile.toBool()) {\n        // --upload-file '' doesn't do anything.\n        method = new Word(\"PUT\");\n    }\n    else if (!config.get && (has(config, \"data\") || has(config, \"form\"))) {\n        method = new Word(\"POST\");\n    }\n    const requestUrl = {\n        originalUrl,\n        urlWithoutQueryList,\n        url,\n        urlObj: u,\n        urlWithOriginalQuery,\n        urlWithoutQueryArray,\n        method,\n    };\n    if (queryStrReadsFile) {\n        requestUrl.queryReadsFile = queryStrReadsFile;\n    }\n    if (queryList) {\n        requestUrl.queryList = queryList;\n        if (queryDict) {\n            requestUrl.queryDict = queryDict;\n        }\n    }\n    if (queryArray) {\n        requestUrl.queryArray = queryArray;\n    }\n    if (urlQueryArray) {\n        requestUrl.urlQueryArray = urlQueryArray;\n    }\n    if (uploadFile) {\n        if (eq(uploadFile, \"-\") || eq(uploadFile, \".\")) {\n            if (stdinFile) {\n                requestUrl.uploadFile = stdinFile;\n            }\n            else if (stdin) {\n                warnf(global_, [\n                    \"upload-file-with-stdin-content\",\n                    \"--upload-file with stdin content is not supported\",\n                ]);\n                requestUrl.uploadFile = uploadFile;\n                // TODO: this is complicated,\n                // --upload-file only applies per-URL so .data needs to become per-URL...\n                // if you pass --data and --upload-file or --get and --upload-file, curl will error\n                // if (config.url && config.url.length === 1) {\n                //   config.data = [[\"raw\", stdin]];\n                // } else {\n                //   warnf(global_, [\n                //     \"upload-file-with-stdin-content-and-multiple-urls\",\n                //     \"--upload-file with stdin content and multiple URLs is not supported\",\n                //   ]);\n                // }\n            }\n            else {\n                requestUrl.uploadFile = uploadFile;\n            }\n        }\n        else {\n            requestUrl.uploadFile = uploadFile;\n        }\n    }\n    if (outputFile) {\n        // TODO: get stdout redirects of command\n        requestUrl.output = outputFile;\n    }\n    // --user takes precedence over the URL\n    const auth = config.user || u.auth;\n    if (auth) {\n        const [user, pass] = auth.split(\":\", 2);\n        requestUrl.auth = [user, pass || new Word()];\n    }\n    return requestUrl;\n}\nfunction buildData(configData, stdin, stdinFile) {\n    const data = [];\n    let dataStrState = new Word();\n    for (const [i, x] of configData.entries()) {\n        const type = x[0];\n        let value = x[1];\n        let name = null;\n        if (i > 0 && type !== \"json\") {\n            dataStrState = dataStrState.append(\"&\");\n        }\n        if (type === \"urlencode\") {\n            // curl checks for = before @\n            const splitOn = value.includes(\"=\") || !value.includes(\"@\") ? \"=\" : \"@\";\n            // If there's no = or @ then the entire content is treated as a value and encoded\n            if (value.includes(\"@\") || value.includes(\"=\")) {\n                [name, value] = value.split(splitOn, 2);\n            }\n            if (splitOn === \"=\") {\n                if (name && name.toBool()) {\n                    dataStrState = dataStrState.add(name).append(\"=\");\n                }\n                // curl's --data-urlencode percent-encodes spaces as \"+\"\n                // https://github.com/curl/curl/blob/curl-7_86_0/src/tool_getparam.c#L630\n                dataStrState = dataStrState.add(percentEncodePlus(value));\n                continue;\n            }\n            name = name && name.toBool() ? name : null;\n            value = value.prepend(\"@\");\n        }\n        let filename = null;\n        if (type !== \"raw\" && value.startsWith(\"@\")) {\n            filename = value.slice(1);\n            if (eq(filename, \"-\")) {\n                if (stdin !== undefined) {\n                    switch (type) {\n                        case \"binary\":\n                        case \"json\":\n                            value = stdin;\n                            break;\n                        case \"urlencode\":\n                            value = mergeWords(name && name.length ? name.append(\"=\") : new Word(), percentEncodePlus(stdin));\n                            break;\n                        default:\n                            value = stdin.replace(/[\\n\\r]/g, \"\");\n                    }\n                    filename = null;\n                }\n                else if (stdinFile !== undefined) {\n                    filename = stdinFile;\n                }\n                else {\n                    // TODO: if stdin is read twice, it will be empty the second time\n                    // TODO: `STDIN_SENTINEL` so that we can tell the difference between\n                    // a stdinFile called \"-\" and stdin for the error message\n                }\n            }\n        }\n        if (filename !== null) {\n            if (dataStrState.toBool()) {\n                data.push(dataStrState);\n                dataStrState = new Word();\n            }\n            const dataParam = {\n                // If `filename` isn't null, then `type` can't be \"raw\"\n                filetype: type,\n                filename,\n            };\n            if (name) {\n                dataParam.name = name;\n            }\n            data.push(dataParam);\n        }\n        else {\n            dataStrState = dataStrState.add(value);\n        }\n    }\n    if (dataStrState.toBool()) {\n        data.push(dataStrState);\n    }\n    let dataStrReadsFile = null;\n    const dataStr = mergeWords(...data.map((d) => {\n        if (!(d instanceof Word)) {\n            dataStrReadsFile || (dataStrReadsFile = d.filename.toString()); // report first file\n            if (d.name) {\n                return mergeWords(d.name, \"=@\", d.filename);\n            }\n            return d.filename.prepend(\"@\");\n        }\n        return d;\n    }));\n    return [data, dataStr, dataStrReadsFile];\n}\n// Parses a Content-Type header into a type and a list of parameters\nfunction parseContentType(string) {\n    if (!string.includes(\";\")) {\n        return [string, []];\n    }\n    const semi = string.indexOf(\";\");\n    const type = string.slice(0, semi);\n    const rest = string.slice(semi);\n    // See https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n    // TODO: could be better, like reading to the next semicolon\n    const params = rest.match(/;\\s*([^;=]+)=(?:(\"[^\"]*\")|([^()<>@,;:\\\\\"/[\\]?.=]*))/g);\n    if (rest.trim() && !params) {\n        return null;\n    }\n    const parsedParams = [];\n    for (const param of params || []) {\n        const parsedParam = param.match(/;\\s*([^;=]+)=(?:(\"[^\"]*\")|([^()<>@,;:\\\\\"/[\\]?.=]*))/);\n        if (!parsedParam) {\n            return null;\n        }\n        const name = parsedParam[1];\n        const value = parsedParam[3] || parsedParam[2].slice(1, -1);\n        parsedParams.push([name, value]);\n    }\n    return [type, parsedParams];\n}\n// Parses out the boundary= value from a Content-Type header\nfunction parseBoundary(string) {\n    const header = parseContentType(string);\n    if (!header) {\n        return null;\n    }\n    for (const [name, value] of header[1]) {\n        if (name === \"boundary\") {\n            return value;\n        }\n    }\n    return null;\n}\nfunction parseRawForm(data, boundary) {\n    const endBoundary = \"\\r\\n--\" + boundary + \"--\\r\\n\";\n    if (!data.endsWith(endBoundary)) {\n        return null;\n    }\n    data = data.slice(0, -endBoundary.length);\n    // TODO: if empty form should it be completely empty?\n    boundary = \"--\" + boundary + \"\\r\\n\";\n    if (data && !data.startsWith(boundary)) {\n        return null;\n    }\n    data = data.slice(boundary.length);\n    const parts = data.split(\"\\r\\n\" + boundary);\n    const form = [];\n    let roundtrips = true;\n    for (const part of parts) {\n        const lines = part.split(\"\\r\\n\");\n        if (lines.length < 2) {\n            return null;\n        }\n        const formParam = {\n            name: new Word(),\n            content: new Word(),\n        };\n        let seenContentDisposition = false;\n        const headers = [];\n        let i = 0;\n        for (; i < lines.length; i++) {\n            if (lines[i].length === 0) {\n                break;\n            }\n            const [name, value] = lines[i].split(\": \", 2);\n            if (name === undefined || value === undefined) {\n                return null;\n            }\n            if (name.toLowerCase() === \"content-disposition\") {\n                if (seenContentDisposition) {\n                    // should only have one\n                    return null;\n                }\n                const contentDisposition = parseContentType(value);\n                if (!contentDisposition) {\n                    return null;\n                }\n                const [type, params] = contentDisposition;\n                if (type !== \"form-data\") {\n                    return null;\n                }\n                let extra = 0;\n                for (const [paramName, paramValue] of params) {\n                    switch (paramName) {\n                        case \"name\":\n                            formParam.name = new Word(paramValue);\n                            break;\n                        case \"filename\":\n                            formParam.filename = new Word(paramValue);\n                            break;\n                        default:\n                            extra++;\n                            break;\n                    }\n                }\n                if (extra) {\n                    roundtrips = false;\n                    // TODO: warn?\n                }\n                seenContentDisposition = true;\n            }\n            else if (name.toLowerCase() === \"content-type\") {\n                formParam.contentType = new Word(value);\n            }\n            else {\n                headers.push(new Word(lines[i]));\n            }\n        }\n        if (headers.length) {\n            formParam.headers = headers;\n        }\n        if (!seenContentDisposition) {\n            return null;\n        }\n        if (i === lines.length) {\n            return null;\n        }\n        if (formParam.name.isEmpty()) {\n            return null;\n        }\n        formParam.content = new Word(lines.slice(i + 1).join(\"\\n\"));\n        form.push(formParam);\n    }\n    return [form, roundtrips];\n}\nfunction buildRequest(global_, config, stdin, stdinFile) {\n    var _a, _b;\n    if (!config.url || !config.url.length) {\n        // TODO: better error message (could be parsing fail)\n        throw new CCError(\"no URL specified!\");\n    }\n    const headers = new Headers(config.header, global_.warnings);\n    const proxyHeaders = new Headers(config[\"proxy-header\"], global_.warnings, \"--proxy-header\");\n    let cookies;\n    const cookieFiles = [];\n    const cookieHeader = headers.get(\"cookie\");\n    if (cookieHeader) {\n        const parsedCookies = parseCookiesStrict(cookieHeader);\n        if (parsedCookies) {\n            cookies = parsedCookies;\n        }\n    }\n    else if (cookieHeader === undefined && config.cookie) {\n        // If there is a Cookie header, --cookies is ignored\n        const cookieStrings = [];\n        for (const c of config.cookie) {\n            // a --cookie without a = character reads from it as a filename\n            if (c.includes(\"=\")) {\n                cookieStrings.push(c);\n            }\n            else {\n                cookieFiles.push(c);\n            }\n        }\n        if (cookieStrings.length) {\n            const cookieString = joinWords(config.cookie, \"; \");\n            headers.setIfMissing(\"Cookie\", cookieString);\n            const parsedCookies = parseCookies(cookieString);\n            if (parsedCookies) {\n                cookies = parsedCookies;\n            }\n        }\n    }\n    let refererAuto = false;\n    if (config[\"user-agent\"]) {\n        headers.setIfMissing(\"User-Agent\", config[\"user-agent\"]);\n    }\n    if (config.referer) {\n        if (config.referer.includes(\";auto\")) {\n            refererAuto = true;\n        }\n        // referer can be \";auto\" or followed by \";auto\", we ignore that.\n        const referer = config.referer.replace(/;auto$/, \"\");\n        if (referer.length) {\n            headers.setIfMissing(\"Referer\", referer);\n        }\n    }\n    if (config.range) {\n        let range = config.range.prepend(\"bytes=\");\n        if (!range.includes(\"-\")) {\n            range = range.append(\"-\");\n        }\n        headers.setIfMissing(\"Range\", range);\n    }\n    if (config[\"time-cond\"]) {\n        let timecond = config[\"time-cond\"];\n        let header = \"If-Modified-Since\";\n        switch (timecond.charAt(0)) {\n            case \"+\":\n                timecond = timecond.slice(1);\n                break;\n            case \"-\":\n                timecond = timecond.slice(1);\n                header = \"If-Unmodified-Since\";\n                break;\n            case \"=\":\n                timecond = timecond.slice(1);\n                header = \"Last-Modified\";\n                break;\n        }\n        // TODO: parse date\n        headers.setIfMissing(header, timecond);\n    }\n    let data;\n    let dataStr;\n    let dataStrReadsFile;\n    let queryArray;\n    if (config.data && config.data.length) {\n        if (config.get) {\n            // https://github.com/curl/curl/blob/curl-7_85_0/src/tool_operate.c#L721\n            // --get --data will overwrite --url-query, but if there's no --data, for example,\n            // curl --url-query bar --get example.com\n            // it won't\n            // https://daniel.haxx.se/blog/2022/11/10/append-data-to-the-url-query/\n            config[\"url-query\"] = config.data;\n            delete config.data;\n        }\n        else {\n            [data, dataStr, dataStrReadsFile] = buildData(config.data, stdin, stdinFile);\n        }\n    }\n    if (config[\"url-query\"]) {\n        [queryArray] = buildData(config[\"url-query\"], stdin, stdinFile);\n    }\n    const urls = [];\n    const uploadFiles = config[\"upload-file\"] || [];\n    const outputFiles = config.output || [];\n    for (const [i, url] of config.url.entries()) {\n        urls.push(buildURL(global_, config, url, uploadFiles[i], outputFiles[i], stdin, stdinFile));\n    }\n    // --get moves --data into the URL's query string\n    if (config.get && config.data) {\n        delete config.data;\n    }\n    if ((config[\"upload-file\"] || []).length > config.url.length) {\n        warnf(global_, [\n            \"too-many-upload-files\",\n            \"Got more --upload-file/-T options than URLs: \" +\n                ((_a = config[\"upload-file\"]) === null || _a === void 0 ? void 0 : _a.map((f) => JSON.stringify(f.toString())).join(\", \")),\n        ]);\n    }\n    if ((config.output || []).length > config.url.length) {\n        warnf(global_, [\n            \"too-many-ouptut-files\",\n            \"Got more --output/-o options than URLs: \" +\n                ((_b = config.output) === null || _b === void 0 ? void 0 : _b.map((f) => JSON.stringify(f.toString())).join(\", \")),\n        ]);\n    }\n    const request = {\n        urls,\n        authType: pickAuth(config.authtype),\n        proxyAuthType: pickAuth(config.proxyauthtype),\n        headers,\n        proxyHeaders,\n    };\n    // TODO: warn about unused stdin?\n    if (stdin) {\n        request.stdin = stdin;\n    }\n    if (stdinFile) {\n        request.stdinFile = stdinFile;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"globoff\")) {\n        request.globoff = config.globoff;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"disallow-username-in-url\")) {\n        request.disallowUsernameInUrl = config[\"disallow-username-in-url\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"path-as-is\")) {\n        request.pathAsIs = config[\"path-as-is\"];\n    }\n    if (refererAuto) {\n        request.refererAuto = true;\n    }\n    if (cookies) {\n        // generators that use .cookies need to do\n        // deleteHeader(request, 'cookie')\n        request.cookies = cookies;\n    }\n    if (cookieFiles.length) {\n        request.cookieFiles = cookieFiles;\n    }\n    if (config[\"cookie-jar\"]) {\n        request.cookieJar = config[\"cookie-jar\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"junk-session-cookies\")) {\n        request.junkSessionCookies = config[\"junk-session-cookies\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"compressed\")) {\n        request.compressed = config.compressed;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"tr-encoding\")) {\n        request.transferEncoding = config[\"tr-encoding\"];\n    }\n    if (config.json) {\n        headers.setIfMissing(\"Content-Type\", \"application/json\");\n        headers.setIfMissing(\"Accept\", \"application/json\");\n    }\n    else if (config.data) {\n        headers.setIfMissing(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    }\n    else if (config.form) {\n        // TODO: warn when details (;filename=, etc.) are not supported\n        // by each converter.\n        request.multipartUploads = parseForm(config.form, global_.warnings);\n        //headers.setIfMissing(\"Content-Type\", \"multipart/form-data\");\n    }\n    const contentType = headers.getContentType();\n    const exactContentType = headers.get(\"Content-Type\");\n    if (config.data &&\n        !dataStrReadsFile &&\n        dataStr &&\n        dataStr.isString() &&\n        !config.form &&\n        !request.multipartUploads &&\n        contentType === \"multipart/form-data\" &&\n        exactContentType &&\n        exactContentType.isString()) {\n        const boundary = parseBoundary(exactContentType.toString());\n        if (boundary) {\n            const form = parseRawForm(dataStr.toString(), boundary);\n            if (form) {\n                const [parsedForm, roundtrip] = form;\n                request.multipartUploads = parsedForm;\n                if (!roundtrip) {\n                    request.multipartUploadsDoesntRoundtrip = true;\n                }\n            }\n        }\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"form-escape\")) {\n        request.formEscape = config[\"form-escape\"];\n    }\n    if (config[\"aws-sigv4\"]) {\n        // https://github.com/curl/curl/blob/curl-7_86_0/lib/setopt.c#L678-L679\n        request.authType = \"aws-sigv4\";\n        request.awsSigV4 = config[\"aws-sigv4\"];\n    }\n    if (request.authType === \"bearer\" && config[\"oauth2-bearer\"]) {\n        const bearer = config[\"oauth2-bearer\"].prepend(\"Bearer \");\n        headers.setIfMissing(\"Authorization\", bearer);\n        request.oauth2Bearer = config[\"oauth2-bearer\"];\n    }\n    if (config.delegation) {\n        request.delegation = config.delegation;\n    }\n    if (config.krb) {\n        request.krb = config.krb;\n    }\n    if (config[\"sasl-authzid\"]) {\n        request.saslAuthzid = config[\"sasl-authzid\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"sasl-ir\")) {\n        request.saslIr = config[\"sasl-ir\"];\n    }\n    if (config.negotiate) {\n        request.authType = \"negotiate\";\n    }\n    if (config[\"service-name\"]) {\n        request.serviceName = config[\"service-name\"];\n    }\n    // TODO: ideally we should generate code that explicitly unsets the header too\n    // no HTTP libraries allow that.\n    headers.clearNulls();\n    if (config.data && config.data.length) {\n        request.data = dataStr;\n        if (dataStrReadsFile) {\n            request.dataReadsFile = dataStrReadsFile;\n        }\n        request.dataArray = data;\n        // TODO: remove these\n        request.isDataRaw = false;\n        request.isDataBinary = (data || []).some((d) => !(d instanceof Word) && d.filetype === \"binary\");\n    }\n    if (queryArray) {\n        // If we have to generate code that reads from a file, we\n        // need to do it once for all URLs.\n        request.queryArray = queryArray;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ipv4\")) {\n        request[\"ipv4\"] = config[\"ipv4\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ipv6\")) {\n        request[\"ipv6\"] = config[\"ipv6\"];\n    }\n    if (config.proto) {\n        // TODO: parse\n        request.proto = config.proto;\n    }\n    if (config[\"proto-redir\"]) {\n        // TODO: parse\n        request.protoRedir = config[\"proto-redir\"];\n    }\n    if (config[\"proto-default\"]) {\n        request.protoDefault = config[\"proto-default\"];\n    }\n    if (config[\"tcp-fastopen\"]) {\n        request.tcpFastopen = config[\"tcp-fastopen\"];\n    }\n    if (config[\"local-port\"]) {\n        // TODO: check the range\n        const [start, end] = config[\"local-port\"].split(\"-\", 1);\n        if (end && end.toBool()) {\n            request.localPort = [start, end];\n        }\n        else {\n            request.localPort = [config[\"local-port\"], null];\n        }\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ignore-content-length\")) {\n        request.ignoreContentLength = config[\"ignore-content-length\"];\n    }\n    if (config.interface) {\n        request.interface = config.interface;\n    }\n    if (config.ciphers) {\n        request.ciphers = config.ciphers;\n    }\n    if (config.curves) {\n        request.curves = config.curves;\n    }\n    if (config.insecure) {\n        request.insecure = true;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"cert-status\")) {\n        request.certStatus = config[\"cert-status\"];\n    }\n    // TODO: if the URL doesn't start with https://, curl doesn't verify\n    // certificates, etc.\n    if (config.cert) {\n        if (config.cert.startsWith(\"pkcs11:\") || !config.cert.match(/[:\\\\]/)) {\n            request.cert = [config.cert, null];\n        }\n        else {\n            // TODO: curl does more complex processing\n            // find un-backslash-escaped colon, backslash might also be escaped with a backslash\n            let colon = -1;\n            try {\n                // Safari versions older than 16.4 don't support negative lookbehind\n                colon = config.cert.search(/(?<!\\\\)(?:\\\\\\\\)*:/);\n            }\n            catch (_c) {\n                colon = config.cert.search(/:/);\n            }\n            if (colon === -1) {\n                request.cert = [config.cert, null];\n            }\n            else {\n                const cert = config.cert.slice(0, colon);\n                const password = config.cert.slice(colon + 1);\n                if (password.toBool()) {\n                    request.cert = [cert, password];\n                }\n                else {\n                    request.cert = [cert, null];\n                }\n            }\n        }\n    }\n    if (config[\"cert-type\"]) {\n        const certType = config[\"cert-type\"];\n        request.certType = certType;\n        if (certType.isString() &&\n            ![\"PEM\", \"DER\", \"ENG\", \"P12\"].includes(certType.toString().toUpperCase())) {\n            warnf(global_, [\n                \"cert-type-unknown\",\n                \"not supported file type \" +\n                    JSON.stringify(certType.toString()) +\n                    \" for certificate\",\n            ]);\n        }\n    }\n    if (config.key) {\n        request.key = config.key;\n    }\n    if (config[\"key-type\"]) {\n        request.keyType = config[\"key-type\"];\n    }\n    if (config.pass) {\n        request.pass = config.pass;\n    }\n    if (config.cacert) {\n        request.cacert = config.cacert;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ca-native\")) {\n        request.caNative = config[\"ca-native\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ssl-allow-beast\")) {\n        request.sslAllowBeast = config[\"ssl-allow-beast\"];\n    }\n    if (config.capath) {\n        request.capath = config.capath;\n    }\n    if (config.crlfile) {\n        request.crlfile = config.crlfile;\n    }\n    if (config.pinnedpubkey) {\n        request.pinnedpubkey = config.pinnedpubkey;\n    }\n    if (config[\"random-file\"]) {\n        request.randomFile = config[\"random-file\"];\n    }\n    if (config[\"egd-file\"]) {\n        request.egdFile = config[\"egd-file\"];\n    }\n    if (config.hsts) {\n        request.hsts = config.hsts;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"alpn\")) {\n        request.alpn = config.alpn;\n    }\n    if (config.tlsVersion) {\n        request.tlsVersion = config.tlsVersion;\n    }\n    if (config[\"tls-max\"]) {\n        request.tlsMax = config[\"tls-max\"];\n    }\n    if (config[\"tls13-ciphers\"]) {\n        request.tls13Ciphers = config[\"tls13-ciphers\"];\n    }\n    if (config[\"tlsauthtype\"]) {\n        request.tlsauthtype = config[\"tlsauthtype\"];\n    }\n    if (config[\"tlspassword\"]) {\n        request.tlspassword = config[\"tlspassword\"];\n    }\n    if (config[\"tlsuser\"]) {\n        request.tlsuser = config[\"tlsuser\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ssl-allow-beast\")) {\n        request.sslAllowBeast = config[\"ssl-allow-beast\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ssl-auto-client-cert\")) {\n        request.sslAutoClientCert = config[\"ssl-auto-client-cert\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ssl-no-revoke\")) {\n        request.sslNoRevoke = config[\"ssl-no-revoke\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ssl-reqd\")) {\n        request.sslReqd = config[\"ssl-reqd\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ssl-revoke-best-effort\")) {\n        request.sslRevokeBestEffort = config[\"ssl-revoke-best-effort\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ssl\")) {\n        request.ssl = config[\"ssl\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"sslv2\")) {\n        request.sslv2 = config[\"sslv2\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"sslv3\")) {\n        request.sslv3 = config[\"sslv3\"];\n    }\n    if (config[\"doh-url\"]) {\n        request.dohUrl = config[\"doh-url\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"doh-insecure\")) {\n        request.dohInsecure = config[\"doh-insecure\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"doh-cert-status\")) {\n        request.dohCertStatus = config[\"doh-cert-status\"];\n    }\n    if (config.proxy) {\n        // https://github.com/curl/curl/blob/e498a9b1fe5964a18eb2a3a99dc52160d2768261/lib/url.c#L2388-L2390\n        request.proxy = config.proxy;\n        if (request.proxyType && request.proxyType !== \"http2\") {\n            delete request.proxyType;\n        }\n        if (config[\"proxy-user\"]) {\n            request.proxyAuth = config[\"proxy-user\"];\n        }\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxytunnel\")) {\n        request.proxytunnel = config.proxytunnel;\n    }\n    if (config.noproxy) {\n        request.noproxy = config.noproxy;\n    }\n    if (config.preproxy) {\n        request.preproxy = config.preproxy;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-anyauth\")) {\n        request.proxyAnyauth = config[\"proxy-anyauth\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-basic\")) {\n        request.proxyBasic = config[\"proxy-basic\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-digest\")) {\n        request.proxyDigest = config[\"proxy-digest\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-negotiate\")) {\n        request.proxyNegotiate = config[\"proxy-negotiate\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-ntlm\")) {\n        request.proxyNtlm = config[\"proxy-ntlm\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-ca-native\")) {\n        request.proxyCaNative = config[\"proxy-ca-native\"];\n    }\n    if (config[\"proxy-cacert\"]) {\n        request.proxyCacert = config[\"proxy-cacert\"];\n    }\n    if (config[\"proxy-capath\"]) {\n        request.proxyCapath = config[\"proxy-capath\"];\n    }\n    if (config[\"proxy-cert-type\"]) {\n        request.proxyCertType = config[\"proxy-cert-type\"];\n    }\n    if (config[\"proxy-cert\"]) {\n        request.proxyCert = config[\"proxy-cert\"];\n    }\n    if (config[\"proxy-ciphers\"]) {\n        request.proxyCiphers = config[\"proxy-ciphers\"];\n    }\n    if (config[\"proxy-crlfile\"]) {\n        request.proxyCrlfile = config[\"proxy-crlfile\"];\n    }\n    if (config[\"proxy-http2\"]) {\n        request.proxyType = \"http2\";\n    }\n    if (config[\"proxy1.0\"]) {\n        request.proxy = config[\"proxy1.0\"];\n        request.proxyType = \"http1\";\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-insecure\")) {\n        request.proxyInsecure = config[\"proxy-insecure\"];\n    }\n    if (config[\"proxy-key\"]) {\n        request.proxyKey = config[\"proxy-key\"];\n    }\n    if (config[\"proxy-key-type\"]) {\n        request.proxyKeyType = config[\"proxy-key-type\"];\n    }\n    if (config[\"proxy-pass\"]) {\n        request.proxyPass = config[\"proxy-pass\"];\n    }\n    if (config[\"proxy-pinnedpubkey\"]) {\n        request.proxyPinnedpubkey = config[\"proxy-pinnedpubkey\"];\n    }\n    if (config[\"proxy-pinnedpubkey\"]) {\n        request.proxyPinnedpubkey = config[\"proxy-pinnedpubkey\"];\n    }\n    if (config[\"proxy-service-name\"]) {\n        request.proxyServiceName = config[\"proxy-service-name\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-ssl-allow-beast\")) {\n        request.proxySslAllowBeast = config[\"proxy-ssl-allow-beast\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-ssl-auto-client-cert\")) {\n        request.proxySslAutoClientCert = config[\"proxy-ssl-auto-client-cert\"];\n    }\n    if (config[\"proxy-tls13-ciphers\"]) {\n        request.proxyTls13Ciphers = config[\"proxy-tls13-ciphers\"];\n    }\n    if (config[\"proxy-tlsauthtype\"]) {\n        request.proxyTlsauthtype = config[\"proxy-tlsauthtype\"];\n        if (request.proxyTlsauthtype.isString() &&\n            !eq(request.proxyTlsauthtype, \"SRP\")) {\n            warnf(global_, [\n                \"proxy-tlsauthtype\",\n                \"proxy-tlsauthtype is not supported: \" + request.proxyTlsauthtype,\n            ]);\n        }\n    }\n    if (config[\"proxy-tlspassword\"]) {\n        request.proxyTlspassword = config[\"proxy-tlspassword\"];\n    }\n    if (config[\"proxy-tlsuser\"]) {\n        request.proxyTlsuser = config[\"proxy-tlsuser\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxy-tlsv1\")) {\n        request.proxyTlsv1 = config[\"proxy-tlsv1\"];\n    }\n    if (config[\"proxy-user\"]) {\n        request.proxyUser = config[\"proxy-user\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"proxytunnel\")) {\n        request.proxytunnel = config[\"proxytunnel\"];\n    }\n    if (config[\"socks4\"]) {\n        request.proxy = config[\"socks4\"];\n        request.proxyType = \"socks4\";\n    }\n    if (config[\"socks4a\"]) {\n        request.proxy = config[\"socks4a\"];\n        request.proxyType = \"socks4a\";\n    }\n    if (config[\"socks5\"]) {\n        request.proxy = config[\"socks5\"];\n        request.proxyType = \"socks5\";\n    }\n    if (config[\"socks5-hostname\"]) {\n        request.proxy = config[\"socks5-hostname\"];\n        request.proxyType = \"socks5-hostname\";\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"socks5-basic\")) {\n        request.socks5Basic = config[\"socks5-basic\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"socks5-gssapi-nec\")) {\n        request.socks5GssapiNec = config[\"socks5-gssapi-nec\"];\n    }\n    if (config[\"socks5-gssapi-service\"]) {\n        request.socks5GssapiService = config[\"socks5-gssapi-service\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"socks5-gssapi\")) {\n        request.socks5Gssapi = config[\"socks5-gssapi\"];\n    }\n    if (config[\"haproxy-clientip\"]) {\n        request.haproxyClientIp = config[\"haproxy-clientip\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"haproxy-protocol\")) {\n        request.haproxyProtocol = config[\"haproxy-protocol\"];\n    }\n    if (config[\"max-time\"]) {\n        request.timeout = config[\"max-time\"];\n        if (config[\"max-time\"].isString() &&\n            // TODO: parseFloat() like curl\n            isNaN(parseFloat(config[\"max-time\"].toString()))) {\n            warnf(global_, [\n                \"max-time-not-number\",\n                \"option --max-time: expected a proper numerical parameter: \" +\n                    JSON.stringify(config[\"max-time\"].toString()),\n            ]);\n        }\n    }\n    if (config[\"connect-timeout\"]) {\n        request.connectTimeout = config[\"connect-timeout\"];\n        if (config[\"connect-timeout\"].isString() &&\n            isNaN(parseFloat(config[\"connect-timeout\"].toString()))) {\n            warnf(global_, [\n                \"connect-timeout-not-number\",\n                \"option --connect-timeout: expected a proper numerical parameter: \" +\n                    JSON.stringify(config[\"connect-timeout\"].toString()),\n            ]);\n        }\n    }\n    if (config[\"expect100-timeout\"]) {\n        request.expect100Timeout = config[\"expect100-timeout\"];\n        if (config[\"expect100-timeout\"].isString() &&\n            isNaN(parseFloat(config[\"expect100-timeout\"].toString()))) {\n            warnf(global_, [\n                \"expect100-timeout-not-number\",\n                \"option --expect100-timeout: expected a proper numerical parameter: \" +\n                    JSON.stringify(config[\"expect100-timeout\"].toString()),\n            ]);\n        }\n    }\n    if (config[\"happy-eyeballs-timeout-ms\"]) {\n        request.happyEyeballsTimeoutMs = config[\"happy-eyeballs-timeout-ms\"];\n    }\n    if (config[\"speed-limit\"]) {\n        request.speedLimit = config[\"speed-limit\"];\n    }\n    if (config[\"speed-time\"]) {\n        request.speedTime = config[\"speed-time\"];\n    }\n    if (config[\"limit-rate\"]) {\n        request.limitRate = config[\"limit-rate\"];\n    }\n    if (config[\"max-filesize\"]) {\n        request.maxFilesize = config[\"max-filesize\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"keepalive\")) {\n        request.keepAlive = config.keepalive;\n    }\n    if (config[\"keepalive-time\"]) {\n        request.keepAliveTime = config[\"keepalive-time\"];\n    }\n    if (config[\"alt-svc\"]) {\n        request.altSvc = config[\"alt-svc\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"location\")) {\n        request.followRedirects = config.location;\n    }\n    if (config[\"location-trusted\"]) {\n        request.followRedirectsTrusted = config[\"location-trusted\"];\n    }\n    if (config[\"max-redirs\"]) {\n        request.maxRedirects = config[\"max-redirs\"].trim();\n        if (config[\"max-redirs\"].isString() &&\n            !isInt(config[\"max-redirs\"].toString())) {\n            warnf(global_, [\n                \"max-redirs-not-int\",\n                \"option --max-redirs: expected a proper numerical parameter: \" +\n                    JSON.stringify(config[\"max-redirs\"].toString()),\n            ]);\n        }\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"post301\")) {\n        request.post301 = config.post301;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"post302\")) {\n        request.post302 = config.post302;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"post303\")) {\n        request.post303 = config.post303;\n    }\n    if (config.fail) {\n        request.fail = config.fail;\n    }\n    if (config.retry) {\n        request.retry = config.retry;\n    }\n    if (config[\"retry-max-time\"]) {\n        request.retryMaxTime = config[\"retry-max-time\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"ftp-skip-pasv-ip\")) {\n        request.ftpSkipPasvIp = config[\"ftp-skip-pasv-ip\"];\n    }\n    if (config.httpVersion) {\n        if (config.httpVersion === \"2\" ||\n            config.httpVersion === \"2-prior-knowledge\") {\n            request.http2 = true;\n        }\n        if (config.httpVersion === \"3\" || config.httpVersion === \"3-only\") {\n            request.http3 = true;\n        }\n        request.httpVersion = config.httpVersion;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"http0.9\")) {\n        request.http0_9 = config[\"http0.9\"];\n    }\n    if (config.resolve && config.resolve.length) {\n        request.resolve = config.resolve;\n    }\n    if (config[\"connect-to\"] && config[\"connect-to\"].length) {\n        request.connectTo = config[\"connect-to\"];\n    }\n    if (config[\"unix-socket\"]) {\n        request.unixSocket = config[\"unix-socket\"];\n    }\n    if (config[\"abstract-unix-socket\"]) {\n        request.abstractUnixSocket = config[\"abstract-unix-socket\"];\n    }\n    if (config[\"netrc-optional\"]) {\n        request.netrc = \"optional\";\n    }\n    else if (config.netrc || config[\"netrc-file\"]) {\n        request.netrc = \"required\";\n    }\n    else if (config.netrc === false) {\n        // TODO || config[\"netrc-optional\"] === false ?\n        request.netrc = \"ignored\";\n    }\n    if (config[\"netrc-file\"]) {\n        request.netrcFile = config[\"netrc-file\"];\n    }\n    if (config[\"use-ascii\"]) {\n        request.useAscii = config[\"use-ascii\"];\n    }\n    if (config[\"continue-at\"]) {\n        request.continueAt = config[\"continue-at\"];\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"crlf\")) {\n        request.crlf = config.crlf;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"clobber\")) {\n        request.clobber = config.clobber;\n    }\n    if (Object.prototype.hasOwnProperty.call(config, \"remote-time\")) {\n        request.remoteTime = config[\"remote-time\"];\n    }\n    // Global options\n    if (Object.prototype.hasOwnProperty.call(global_, \"verbose\")) {\n        request.verbose = global_.verbose;\n    }\n    if (Object.prototype.hasOwnProperty.call(global_, \"silent\")) {\n        request.silent = global_.silent;\n    }\n    return request;\n}\nexport function buildRequests(global_, stdin, stdinFile) {\n    if (!global_.configs.length) {\n        // shouldn't happen\n        warnf(global_, [\"no-configs\", \"got empty config object\"]);\n    }\n    return global_.configs.map((config) => buildRequest(global_, config, stdin, stdinFile));\n}\nexport function getFirst(requests, warnings, support) {\n    if (requests.length > 1) {\n        warnings.push([\n            \"next\",\n            // TODO: better message, we might have two requests because of\n            // --next or because of multiple curl commands or both\n            \"got \" +\n                requests.length +\n                \" curl requests, only converting the first one\",\n        ]);\n    }\n    const request = requests[0];\n    warnIfPartsIgnored(request, warnings, support);\n    return request;\n}\n//# sourceMappingURL=Request.js.map","export function warnf(global_, warning) {\n    global_.warnings.push(warning);\n}\nfunction underline(node, startIndex, endIndex, curlCommand) {\n    if (startIndex === endIndex) {\n        endIndex++;\n    }\n    // TODO: \\r ?\n    let lineStart = startIndex;\n    if (startIndex > 0) {\n        // If it's -1 we're on the first line\n        lineStart = curlCommand.lastIndexOf(\"\\n\", startIndex - 1) + 1;\n    }\n    let underlineLength = endIndex - startIndex;\n    let lineEnd = curlCommand.indexOf(\"\\n\", startIndex);\n    if (lineEnd === -1) {\n        lineEnd = curlCommand.length;\n    }\n    else if (lineEnd < endIndex) {\n        // Add extra \"^\" past the end of a line to signal that the node continues\n        underlineLength = lineEnd - startIndex + 1;\n    }\n    const line = curlCommand.slice(lineStart, lineEnd);\n    const underline = \" \".repeat(startIndex - lineStart) + \"^\".repeat(underlineLength);\n    return line + \"\\n\" + underline;\n}\nexport function underlineCursor(node, curlCommand) {\n    return underline(node, node.startIndex, node.endIndex, curlCommand);\n}\nexport function underlineNode(node, curlCommand) {\n    // doesn't include leading whitespace\n    const command = node.tree.rootNode;\n    let startIndex = node.startIndex;\n    let endIndex = node.endIndex;\n    if (!curlCommand) {\n        curlCommand = command.text;\n        startIndex -= command.startIndex;\n        endIndex -= command.startIndex;\n    }\n    return underline(node, startIndex, endIndex, curlCommand);\n}\nexport function underlineNodeEnd(node, curlCommand) {\n    // doesn't include leading whitespace\n    const command = node.tree.rootNode;\n    let startIndex = node.startIndex;\n    let endIndex = node.endIndex;\n    if (!curlCommand) {\n        curlCommand = command.text;\n        startIndex -= command.startIndex;\n        endIndex -= command.startIndex;\n    }\n    if (startIndex === endIndex) {\n        endIndex++;\n    }\n    // TODO: \\r ?\n    let lineStart = startIndex;\n    if (startIndex > 0) {\n        // If it's -1 we're on the first line\n        lineStart = curlCommand.lastIndexOf(\"\\n\", endIndex - 1) + 1;\n    }\n    const underlineStart = Math.max(startIndex, lineStart);\n    const underlineLength = endIndex - underlineStart;\n    let lineEnd = curlCommand.indexOf(\"\\n\", endIndex);\n    if (lineEnd === -1) {\n        lineEnd = curlCommand.length;\n    }\n    const line = curlCommand.slice(lineStart, lineEnd);\n    const underline = \" \".repeat(underlineStart - lineStart) + \"^\".repeat(underlineLength);\n    return line + \"\\n\" + underline;\n}\nexport function warnIfPartsIgnored(request, warnings, support) {\n    if (request.urls.length > 1 && !(support === null || support === void 0 ? void 0 : support.multipleUrls)) {\n        warnings.push([\n            \"multiple-urls\",\n            \"found \" +\n                request.urls.length +\n                \" URLs, only the first one will be used: \" +\n                request.urls\n                    .map((u) => JSON.stringify(u.originalUrl.toString()))\n                    .join(\", \"),\n        ]);\n    }\n    if (request.dataReadsFile && !(support === null || support === void 0 ? void 0 : support.dataReadsFile)) {\n        warnings.push([\n            \"unsafe-data\",\n            // TODO: better wording. Could be \"body:\" too\n            \"the generated data content is wrong, \" +\n                // TODO: might not come from \"@\"\n                JSON.stringify(\"@\" + request.dataReadsFile) +\n                \" means read the file \" +\n                JSON.stringify(request.dataReadsFile),\n        ]);\n    }\n    if (request.urls[0].queryReadsFile && !(support === null || support === void 0 ? void 0 : support.queryReadsFile)) {\n        warnings.push([\n            \"unsafe-query\",\n            \"the generated URL query string is wrong, \" +\n                JSON.stringify(\"@\" + request.urls[0].queryReadsFile) +\n                \" means read the file \" +\n                JSON.stringify(request.urls[0].queryReadsFile),\n        ]);\n    }\n    if (request.cookieFiles && !(support === null || support === void 0 ? void 0 : support.cookieFiles)) {\n        warnings.push([\n            \"cookie-files\",\n            \"passing a file for --cookie/-b is not supported: \" +\n                request.cookieFiles.map((c) => JSON.stringify(c.toString())).join(\", \"),\n        ]);\n    }\n}\n//# sourceMappingURL=Warnings.js.map","export const CURLAUTH_BASIC = 1 << 0;\nexport const CURLAUTH_DIGEST = 1 << 1;\nexport const CURLAUTH_NEGOTIATE = 1 << 2;\nexport const CURLAUTH_NTLM = 1 << 3;\nexport const CURLAUTH_DIGEST_IE = 1 << 4;\nexport const CURLAUTH_NTLM_WB = 1 << 5;\nexport const CURLAUTH_BEARER = 1 << 6;\nexport const CURLAUTH_AWS_SIGV4 = 1 << 7;\nexport const CURLAUTH_ANY = ~CURLAUTH_DIGEST_IE;\n// This is this function\n// https://github.com/curl/curl/blob/curl-7_86_0/lib/http.c#L455\n// which is not the correct function, since it works on the response.\n//\n// Curl also filters out auth schemes it doesn't support,\n// https://github.com/curl/curl/blob/curl-7_86_0/lib/setopt.c#L970\n// but we \"support\" all of them, so we don't need to do that.\nexport function pickAuth(mask) {\n    if (mask === CURLAUTH_ANY) {\n        return \"basic\";\n    }\n    const auths = [\n        [CURLAUTH_NEGOTIATE, \"negotiate\"],\n        [CURLAUTH_BEARER, \"bearer\"],\n        [CURLAUTH_DIGEST, \"digest\"],\n        [CURLAUTH_NTLM, \"ntlm\"],\n        [CURLAUTH_NTLM_WB, \"ntlm-wb\"],\n        [CURLAUTH_BASIC, \"basic\"],\n        // This check happens outside this function because we obviously\n        // don't need to to specify --no-basic to use aws-sigv4\n        // https://github.com/curl/curl/blob/curl-7_86_0/lib/setopt.c#L678-L679\n        [CURLAUTH_AWS_SIGV4, \"aws-sigv4\"],\n    ];\n    for (const [auth, authName] of auths) {\n        if (mask & auth) {\n            return authName;\n        }\n    }\n    return \"none\";\n}\n//# sourceMappingURL=auth.js.map","import { CCError, has } from \"../utils.js\";\nimport { eq, firstShellToken } from \"../shell/Word.js\";\nimport { warnf, underlineNode } from \"../Warnings.js\";\nimport { CURLAUTH_BASIC, CURLAUTH_DIGEST, CURLAUTH_NEGOTIATE, CURLAUTH_NTLM, CURLAUTH_NTLM_WB, CURLAUTH_BEARER, CURLAUTH_AWS_SIGV4, CURLAUTH_ANY, } from \"./auth.js\";\n// prettier-ignore\nexport const curlLongOpts = {\n    // BEGIN EXTRACTED OPTIONS\n    \"url\": { type: \"string\", name: \"url\" },\n    \"dns-ipv4-addr\": { type: \"string\", name: \"dns-ipv4-addr\" },\n    \"dns-ipv6-addr\": { type: \"string\", name: \"dns-ipv6-addr\" },\n    \"random-file\": { type: \"string\", name: \"random-file\" },\n    \"egd-file\": { type: \"string\", name: \"egd-file\" },\n    \"oauth2-bearer\": { type: \"string\", name: \"oauth2-bearer\" },\n    \"connect-timeout\": { type: \"string\", name: \"connect-timeout\" },\n    \"doh-url\": { type: \"string\", name: \"doh-url\" },\n    \"ciphers\": { type: \"string\", name: \"ciphers\" },\n    \"dns-interface\": { type: \"string\", name: \"dns-interface\" },\n    \"disable-epsv\": { type: \"bool\", name: \"disable-epsv\" },\n    \"no-disable-epsv\": { type: \"bool\", name: \"disable-epsv\", expand: false },\n    \"disallow-username-in-url\": { type: \"bool\", name: \"disallow-username-in-url\" },\n    \"no-disallow-username-in-url\": { type: \"bool\", name: \"disallow-username-in-url\", expand: false },\n    \"epsv\": { type: \"bool\", name: \"epsv\" },\n    \"no-epsv\": { type: \"bool\", name: \"epsv\", expand: false },\n    \"dns-servers\": { type: \"string\", name: \"dns-servers\" },\n    \"trace\": { type: \"string\", name: \"trace\" },\n    \"npn\": { type: \"bool\", name: \"npn\" },\n    \"no-npn\": { type: \"bool\", name: \"npn\", expand: false },\n    \"trace-ascii\": { type: \"string\", name: \"trace-ascii\" },\n    \"alpn\": { type: \"bool\", name: \"alpn\" },\n    \"no-alpn\": { type: \"bool\", name: \"alpn\", expand: false },\n    \"limit-rate\": { type: \"string\", name: \"limit-rate\" },\n    \"rate\": { type: \"string\", name: \"rate\" },\n    \"compressed\": { type: \"bool\", name: \"compressed\" },\n    \"no-compressed\": { type: \"bool\", name: \"compressed\", expand: false },\n    \"tr-encoding\": { type: \"bool\", name: \"tr-encoding\" },\n    \"no-tr-encoding\": { type: \"bool\", name: \"tr-encoding\", expand: false },\n    \"digest\": { type: \"bool\", name: \"digest\" },\n    \"no-digest\": { type: \"bool\", name: \"digest\", expand: false },\n    \"negotiate\": { type: \"bool\", name: \"negotiate\" },\n    \"no-negotiate\": { type: \"bool\", name: \"negotiate\", expand: false },\n    \"ntlm\": { type: \"bool\", name: \"ntlm\" },\n    \"no-ntlm\": { type: \"bool\", name: \"ntlm\", expand: false },\n    \"ntlm-wb\": { type: \"bool\", name: \"ntlm-wb\" },\n    \"no-ntlm-wb\": { type: \"bool\", name: \"ntlm-wb\", expand: false },\n    \"basic\": { type: \"bool\", name: \"basic\" },\n    \"no-basic\": { type: \"bool\", name: \"basic\", expand: false },\n    \"anyauth\": { type: \"bool\", name: \"anyauth\" },\n    \"no-anyauth\": { type: \"bool\", name: \"anyauth\", expand: false },\n    \"wdebug\": { type: \"bool\", name: \"wdebug\" },\n    \"no-wdebug\": { type: \"bool\", name: \"wdebug\", expand: false },\n    \"ftp-create-dirs\": { type: \"bool\", name: \"ftp-create-dirs\" },\n    \"no-ftp-create-dirs\": { type: \"bool\", name: \"ftp-create-dirs\", expand: false },\n    \"create-dirs\": { type: \"bool\", name: \"create-dirs\" },\n    \"no-create-dirs\": { type: \"bool\", name: \"create-dirs\", expand: false },\n    \"create-file-mode\": { type: \"string\", name: \"create-file-mode\" },\n    \"max-redirs\": { type: \"string\", name: \"max-redirs\" },\n    \"proxy-ntlm\": { type: \"bool\", name: \"proxy-ntlm\" },\n    \"no-proxy-ntlm\": { type: \"bool\", name: \"proxy-ntlm\", expand: false },\n    \"crlf\": { type: \"bool\", name: \"crlf\" },\n    \"no-crlf\": { type: \"bool\", name: \"crlf\", expand: false },\n    \"stderr\": { type: \"string\", name: \"stderr\" },\n    \"aws-sigv4\": { type: \"string\", name: \"aws-sigv4\" },\n    \"interface\": { type: \"string\", name: \"interface\" },\n    \"krb\": { type: \"string\", name: \"krb\" },\n    \"krb4\": { type: \"string\", name: \"krb\" },\n    \"haproxy-protocol\": { type: \"bool\", name: \"haproxy-protocol\" },\n    \"no-haproxy-protocol\": { type: \"bool\", name: \"haproxy-protocol\", expand: false },\n    \"haproxy-clientip\": { type: \"string\", name: \"haproxy-clientip\" },\n    \"max-filesize\": { type: \"string\", name: \"max-filesize\" },\n    \"disable-eprt\": { type: \"bool\", name: \"disable-eprt\" },\n    \"no-disable-eprt\": { type: \"bool\", name: \"disable-eprt\", expand: false },\n    \"eprt\": { type: \"bool\", name: \"eprt\" },\n    \"no-eprt\": { type: \"bool\", name: \"eprt\", expand: false },\n    \"xattr\": { type: \"bool\", name: \"xattr\" },\n    \"no-xattr\": { type: \"bool\", name: \"xattr\", expand: false },\n    \"ftp-ssl\": { type: \"bool\", name: \"ssl\" },\n    \"no-ftp-ssl\": { type: \"bool\", name: \"ssl\", expand: false },\n    \"ssl\": { type: \"bool\", name: \"ssl\" },\n    \"no-ssl\": { type: \"bool\", name: \"ssl\", expand: false },\n    \"ftp-pasv\": { type: \"bool\", name: \"ftp-pasv\" },\n    \"no-ftp-pasv\": { type: \"bool\", name: \"ftp-pasv\", expand: false },\n    \"socks5\": { type: \"string\", name: \"socks5\" },\n    \"tcp-nodelay\": { type: \"bool\", name: \"tcp-nodelay\" },\n    \"no-tcp-nodelay\": { type: \"bool\", name: \"tcp-nodelay\", expand: false },\n    \"proxy-digest\": { type: \"bool\", name: \"proxy-digest\" },\n    \"no-proxy-digest\": { type: \"bool\", name: \"proxy-digest\", expand: false },\n    \"proxy-basic\": { type: \"bool\", name: \"proxy-basic\" },\n    \"no-proxy-basic\": { type: \"bool\", name: \"proxy-basic\", expand: false },\n    \"retry\": { type: \"string\", name: \"retry\" },\n    \"retry-connrefused\": { type: \"bool\", name: \"retry-connrefused\" },\n    \"no-retry-connrefused\": { type: \"bool\", name: \"retry-connrefused\", expand: false },\n    \"retry-delay\": { type: \"string\", name: \"retry-delay\" },\n    \"retry-max-time\": { type: \"string\", name: \"retry-max-time\" },\n    \"proxy-negotiate\": { type: \"bool\", name: \"proxy-negotiate\" },\n    \"no-proxy-negotiate\": { type: \"bool\", name: \"proxy-negotiate\", expand: false },\n    \"form-escape\": { type: \"bool\", name: \"form-escape\" },\n    \"no-form-escape\": { type: \"bool\", name: \"form-escape\", expand: false },\n    \"ftp-account\": { type: \"string\", name: \"ftp-account\" },\n    \"proxy-anyauth\": { type: \"bool\", name: \"proxy-anyauth\" },\n    \"no-proxy-anyauth\": { type: \"bool\", name: \"proxy-anyauth\", expand: false },\n    \"trace-time\": { type: \"bool\", name: \"trace-time\" },\n    \"no-trace-time\": { type: \"bool\", name: \"trace-time\", expand: false },\n    \"ignore-content-length\": { type: \"bool\", name: \"ignore-content-length\" },\n    \"no-ignore-content-length\": { type: \"bool\", name: \"ignore-content-length\", expand: false },\n    \"ftp-skip-pasv-ip\": { type: \"bool\", name: \"ftp-skip-pasv-ip\" },\n    \"no-ftp-skip-pasv-ip\": { type: \"bool\", name: \"ftp-skip-pasv-ip\", expand: false },\n    \"ftp-method\": { type: \"string\", name: \"ftp-method\" },\n    \"local-port\": { type: \"string\", name: \"local-port\" },\n    \"socks4\": { type: \"string\", name: \"socks4\" },\n    \"socks4a\": { type: \"string\", name: \"socks4a\" },\n    \"ftp-alternative-to-user\": { type: \"string\", name: \"ftp-alternative-to-user\" },\n    \"ftp-ssl-reqd\": { type: \"bool\", name: \"ssl-reqd\" },\n    \"no-ftp-ssl-reqd\": { type: \"bool\", name: \"ssl-reqd\", expand: false },\n    \"ssl-reqd\": { type: \"bool\", name: \"ssl-reqd\" },\n    \"no-ssl-reqd\": { type: \"bool\", name: \"ssl-reqd\", expand: false },\n    \"sessionid\": { type: \"bool\", name: \"sessionid\" },\n    \"no-sessionid\": { type: \"bool\", name: \"sessionid\", expand: false },\n    \"ftp-ssl-control\": { type: \"bool\", name: \"ftp-ssl-control\" },\n    \"no-ftp-ssl-control\": { type: \"bool\", name: \"ftp-ssl-control\", expand: false },\n    \"ftp-ssl-ccc\": { type: \"bool\", name: \"ftp-ssl-ccc\" },\n    \"no-ftp-ssl-ccc\": { type: \"bool\", name: \"ftp-ssl-ccc\", expand: false },\n    \"ftp-ssl-ccc-mode\": { type: \"string\", name: \"ftp-ssl-ccc-mode\" },\n    \"libcurl\": { type: \"string\", name: \"libcurl\" },\n    \"raw\": { type: \"bool\", name: \"raw\" },\n    \"no-raw\": { type: \"bool\", name: \"raw\", expand: false },\n    \"post301\": { type: \"bool\", name: \"post301\" },\n    \"no-post301\": { type: \"bool\", name: \"post301\", expand: false },\n    \"keepalive\": { type: \"bool\", name: \"keepalive\" },\n    \"no-keepalive\": { type: \"bool\", name: \"keepalive\", expand: false },\n    \"socks5-hostname\": { type: \"string\", name: \"socks5-hostname\" },\n    \"keepalive-time\": { type: \"string\", name: \"keepalive-time\" },\n    \"post302\": { type: \"bool\", name: \"post302\" },\n    \"no-post302\": { type: \"bool\", name: \"post302\", expand: false },\n    \"noproxy\": { type: \"string\", name: \"noproxy\" },\n    \"socks5-gssapi-nec\": { type: \"bool\", name: \"socks5-gssapi-nec\" },\n    \"no-socks5-gssapi-nec\": { type: \"bool\", name: \"socks5-gssapi-nec\", expand: false },\n    \"proxy1.0\": { type: \"string\", name: \"proxy1.0\" },\n    \"tftp-blksize\": { type: \"string\", name: \"tftp-blksize\" },\n    \"mail-from\": { type: \"string\", name: \"mail-from\" },\n    \"mail-rcpt\": { type: \"string\", name: \"mail-rcpt\" },\n    \"ftp-pret\": { type: \"bool\", name: \"ftp-pret\" },\n    \"no-ftp-pret\": { type: \"bool\", name: \"ftp-pret\", expand: false },\n    \"proto\": { type: \"string\", name: \"proto\" },\n    \"proto-redir\": { type: \"string\", name: \"proto-redir\" },\n    \"resolve\": { type: \"string\", name: \"resolve\" },\n    \"delegation\": { type: \"string\", name: \"delegation\" },\n    \"mail-auth\": { type: \"string\", name: \"mail-auth\" },\n    \"post303\": { type: \"bool\", name: \"post303\" },\n    \"no-post303\": { type: \"bool\", name: \"post303\", expand: false },\n    \"metalink\": { type: \"bool\", name: \"metalink\" },\n    \"no-metalink\": { type: \"bool\", name: \"metalink\", expand: false },\n    \"sasl-authzid\": { type: \"string\", name: \"sasl-authzid\" },\n    \"sasl-ir\": { type: \"bool\", name: \"sasl-ir\" },\n    \"no-sasl-ir\": { type: \"bool\", name: \"sasl-ir\", expand: false },\n    \"test-event\": { type: \"bool\", name: \"test-event\" },\n    \"no-test-event\": { type: \"bool\", name: \"test-event\", expand: false },\n    \"unix-socket\": { type: \"string\", name: \"unix-socket\" },\n    \"path-as-is\": { type: \"bool\", name: \"path-as-is\" },\n    \"no-path-as-is\": { type: \"bool\", name: \"path-as-is\", expand: false },\n    \"socks5-gssapi-service\": { type: \"string\", name: \"proxy-service-name\" },\n    \"proxy-service-name\": { type: \"string\", name: \"proxy-service-name\" },\n    \"service-name\": { type: \"string\", name: \"service-name\" },\n    \"proto-default\": { type: \"string\", name: \"proto-default\" },\n    \"expect100-timeout\": { type: \"string\", name: \"expect100-timeout\" },\n    \"tftp-no-options\": { type: \"bool\", name: \"tftp-no-options\" },\n    \"no-tftp-no-options\": { type: \"bool\", name: \"tftp-no-options\", expand: false },\n    \"connect-to\": { type: \"string\", name: \"connect-to\" },\n    \"abstract-unix-socket\": { type: \"string\", name: \"abstract-unix-socket\" },\n    \"tls-max\": { type: \"string\", name: \"tls-max\" },\n    \"suppress-connect-headers\": { type: \"bool\", name: \"suppress-connect-headers\" },\n    \"no-suppress-connect-headers\": { type: \"bool\", name: \"suppress-connect-headers\", expand: false },\n    \"compressed-ssh\": { type: \"bool\", name: \"compressed-ssh\" },\n    \"no-compressed-ssh\": { type: \"bool\", name: \"compressed-ssh\", expand: false },\n    \"happy-eyeballs-timeout-ms\": { type: \"string\", name: \"happy-eyeballs-timeout-ms\" },\n    \"retry-all-errors\": { type: \"bool\", name: \"retry-all-errors\" },\n    \"no-retry-all-errors\": { type: \"bool\", name: \"retry-all-errors\", expand: false },\n    \"trace-ids\": { type: \"bool\", name: \"trace-ids\" },\n    \"no-trace-ids\": { type: \"bool\", name: \"trace-ids\", expand: false },\n    \"http1.0\": { type: \"bool\", name: \"http1.0\" },\n    \"http1.1\": { type: \"bool\", name: \"http1.1\" },\n    \"http2\": { type: \"bool\", name: \"http2\" },\n    \"http2-prior-knowledge\": { type: \"bool\", name: \"http2-prior-knowledge\" },\n    \"http3\": { type: \"bool\", name: \"http3\" },\n    \"http3-only\": { type: \"bool\", name: \"http3-only\" },\n    \"http0.9\": { type: \"bool\", name: \"http0.9\" },\n    \"no-http0.9\": { type: \"bool\", name: \"http0.9\", expand: false },\n    \"proxy-http2\": { type: \"bool\", name: \"proxy-http2\" },\n    \"no-proxy-http2\": { type: \"bool\", name: \"proxy-http2\", expand: false },\n    \"tlsv1\": { type: \"bool\", name: \"tlsv1\" },\n    \"tlsv1.0\": { type: \"bool\", name: \"tlsv1.0\" },\n    \"tlsv1.1\": { type: \"bool\", name: \"tlsv1.1\" },\n    \"tlsv1.2\": { type: \"bool\", name: \"tlsv1.2\" },\n    \"tlsv1.3\": { type: \"bool\", name: \"tlsv1.3\" },\n    \"tls13-ciphers\": { type: \"string\", name: \"tls13-ciphers\" },\n    \"proxy-tls13-ciphers\": { type: \"string\", name: \"proxy-tls13-ciphers\" },\n    \"sslv2\": { type: \"bool\", name: \"sslv2\" },\n    \"sslv3\": { type: \"bool\", name: \"sslv3\" },\n    \"ipv4\": { type: \"bool\", name: \"ipv4\" },\n    \"ipv6\": { type: \"bool\", name: \"ipv6\" },\n    \"append\": { type: \"bool\", name: \"append\" },\n    \"no-append\": { type: \"bool\", name: \"append\", expand: false },\n    \"user-agent\": { type: \"string\", name: \"user-agent\" },\n    \"cookie\": { type: \"string\", name: \"cookie\" },\n    \"alt-svc\": { type: \"string\", name: \"alt-svc\" },\n    \"hsts\": { type: \"string\", name: \"hsts\" },\n    \"use-ascii\": { type: \"bool\", name: \"use-ascii\" },\n    \"no-use-ascii\": { type: \"bool\", name: \"use-ascii\", expand: false },\n    \"cookie-jar\": { type: \"string\", name: \"cookie-jar\" },\n    \"continue-at\": { type: \"string\", name: \"continue-at\" },\n    \"data\": { type: \"string\", name: \"data\" },\n    \"data-raw\": { type: \"string\", name: \"data-raw\" },\n    \"data-ascii\": { type: \"string\", name: \"data-ascii\" },\n    \"data-binary\": { type: \"string\", name: \"data-binary\" },\n    \"data-urlencode\": { type: \"string\", name: \"data-urlencode\" },\n    \"json\": { type: \"string\", name: \"json\" },\n    \"url-query\": { type: \"string\", name: \"url-query\" },\n    \"dump-header\": { type: \"string\", name: \"dump-header\" },\n    \"referer\": { type: \"string\", name: \"referer\" },\n    \"cert\": { type: \"string\", name: \"cert\" },\n    \"cacert\": { type: \"string\", name: \"cacert\" },\n    \"cert-type\": { type: \"string\", name: \"cert-type\" },\n    \"key\": { type: \"string\", name: \"key\" },\n    \"key-type\": { type: \"string\", name: \"key-type\" },\n    \"pass\": { type: \"string\", name: \"pass\" },\n    \"engine\": { type: \"string\", name: \"engine\" },\n    \"ca-native\": { type: \"bool\", name: \"ca-native\" },\n    \"no-ca-native\": { type: \"bool\", name: \"ca-native\", expand: false },\n    \"proxy-ca-native\": { type: \"bool\", name: \"proxy-ca-native\" },\n    \"no-proxy-ca-native\": { type: \"bool\", name: \"proxy-ca-native\", expand: false },\n    \"capath\": { type: \"string\", name: \"capath\" },\n    \"pubkey\": { type: \"string\", name: \"pubkey\" },\n    \"hostpubmd5\": { type: \"string\", name: \"hostpubmd5\" },\n    \"hostpubsha256\": { type: \"string\", name: \"hostpubsha256\" },\n    \"crlfile\": { type: \"string\", name: \"crlfile\" },\n    \"tlsuser\": { type: \"string\", name: \"tlsuser\" },\n    \"tlspassword\": { type: \"string\", name: \"tlspassword\" },\n    \"tlsauthtype\": { type: \"string\", name: \"tlsauthtype\" },\n    \"ssl-allow-beast\": { type: \"bool\", name: \"ssl-allow-beast\" },\n    \"no-ssl-allow-beast\": { type: \"bool\", name: \"ssl-allow-beast\", expand: false },\n    \"ssl-auto-client-cert\": { type: \"bool\", name: \"ssl-auto-client-cert\" },\n    \"no-ssl-auto-client-cert\": { type: \"bool\", name: \"ssl-auto-client-cert\", expand: false },\n    \"proxy-ssl-auto-client-cert\": { type: \"bool\", name: \"proxy-ssl-auto-client-cert\" },\n    \"no-proxy-ssl-auto-client-cert\": { type: \"bool\", name: \"proxy-ssl-auto-client-cert\", expand: false },\n    \"pinnedpubkey\": { type: \"string\", name: \"pinnedpubkey\" },\n    \"proxy-pinnedpubkey\": { type: \"string\", name: \"proxy-pinnedpubkey\" },\n    \"cert-status\": { type: \"bool\", name: \"cert-status\" },\n    \"no-cert-status\": { type: \"bool\", name: \"cert-status\", expand: false },\n    \"doh-cert-status\": { type: \"bool\", name: \"doh-cert-status\" },\n    \"no-doh-cert-status\": { type: \"bool\", name: \"doh-cert-status\", expand: false },\n    \"false-start\": { type: \"bool\", name: \"false-start\" },\n    \"no-false-start\": { type: \"bool\", name: \"false-start\", expand: false },\n    \"ssl-no-revoke\": { type: \"bool\", name: \"ssl-no-revoke\" },\n    \"no-ssl-no-revoke\": { type: \"bool\", name: \"ssl-no-revoke\", expand: false },\n    \"ssl-revoke-best-effort\": { type: \"bool\", name: \"ssl-revoke-best-effort\" },\n    \"no-ssl-revoke-best-effort\": { type: \"bool\", name: \"ssl-revoke-best-effort\", expand: false },\n    \"tcp-fastopen\": { type: \"bool\", name: \"tcp-fastopen\" },\n    \"no-tcp-fastopen\": { type: \"bool\", name: \"tcp-fastopen\", expand: false },\n    \"proxy-tlsuser\": { type: \"string\", name: \"proxy-tlsuser\" },\n    \"proxy-tlspassword\": { type: \"string\", name: \"proxy-tlspassword\" },\n    \"proxy-tlsauthtype\": { type: \"string\", name: \"proxy-tlsauthtype\" },\n    \"proxy-cert\": { type: \"string\", name: \"proxy-cert\" },\n    \"proxy-cert-type\": { type: \"string\", name: \"proxy-cert-type\" },\n    \"proxy-key\": { type: \"string\", name: \"proxy-key\" },\n    \"proxy-key-type\": { type: \"string\", name: \"proxy-key-type\" },\n    \"proxy-pass\": { type: \"string\", name: \"proxy-pass\" },\n    \"proxy-ciphers\": { type: \"string\", name: \"proxy-ciphers\" },\n    \"proxy-crlfile\": { type: \"string\", name: \"proxy-crlfile\" },\n    \"proxy-ssl-allow-beast\": { type: \"bool\", name: \"proxy-ssl-allow-beast\" },\n    \"no-proxy-ssl-allow-beast\": { type: \"bool\", name: \"proxy-ssl-allow-beast\", expand: false },\n    \"login-options\": { type: \"string\", name: \"login-options\" },\n    \"proxy-cacert\": { type: \"string\", name: \"proxy-cacert\" },\n    \"proxy-capath\": { type: \"string\", name: \"proxy-capath\" },\n    \"proxy-insecure\": { type: \"bool\", name: \"proxy-insecure\" },\n    \"no-proxy-insecure\": { type: \"bool\", name: \"proxy-insecure\", expand: false },\n    \"proxy-tlsv1\": { type: \"bool\", name: \"proxy-tlsv1\" },\n    \"socks5-basic\": { type: \"bool\", name: \"socks5-basic\" },\n    \"no-socks5-basic\": { type: \"bool\", name: \"socks5-basic\", expand: false },\n    \"socks5-gssapi\": { type: \"bool\", name: \"socks5-gssapi\" },\n    \"no-socks5-gssapi\": { type: \"bool\", name: \"socks5-gssapi\", expand: false },\n    \"etag-save\": { type: \"string\", name: \"etag-save\" },\n    \"etag-compare\": { type: \"string\", name: \"etag-compare\" },\n    \"curves\": { type: \"string\", name: \"curves\" },\n    \"fail\": { type: \"bool\", name: \"fail\" },\n    \"no-fail\": { type: \"bool\", name: \"fail\", expand: false },\n    \"fail-early\": { type: \"bool\", name: \"fail-early\" },\n    \"no-fail-early\": { type: \"bool\", name: \"fail-early\", expand: false },\n    \"styled-output\": { type: \"bool\", name: \"styled-output\" },\n    \"no-styled-output\": { type: \"bool\", name: \"styled-output\", expand: false },\n    \"mail-rcpt-allowfails\": { type: \"bool\", name: \"mail-rcpt-allowfails\" },\n    \"no-mail-rcpt-allowfails\": { type: \"bool\", name: \"mail-rcpt-allowfails\", expand: false },\n    \"fail-with-body\": { type: \"bool\", name: \"fail-with-body\" },\n    \"no-fail-with-body\": { type: \"bool\", name: \"fail-with-body\", expand: false },\n    \"remove-on-error\": { type: \"bool\", name: \"remove-on-error\" },\n    \"no-remove-on-error\": { type: \"bool\", name: \"remove-on-error\", expand: false },\n    \"form\": { type: \"string\", name: \"form\" },\n    \"form-string\": { type: \"string\", name: \"form-string\" },\n    \"globoff\": { type: \"bool\", name: \"globoff\" },\n    \"no-globoff\": { type: \"bool\", name: \"globoff\", expand: false },\n    \"get\": { type: \"bool\", name: \"get\" },\n    \"no-get\": { type: \"bool\", name: \"get\", expand: false },\n    \"request-target\": { type: \"string\", name: \"request-target\" },\n    \"help\": { type: \"bool\", name: \"help\" },\n    \"no-help\": { type: \"bool\", name: \"help\", expand: false },\n    \"header\": { type: \"string\", name: \"header\" },\n    \"proxy-header\": { type: \"string\", name: \"proxy-header\" },\n    \"include\": { type: \"bool\", name: \"include\" },\n    \"no-include\": { type: \"bool\", name: \"include\", expand: false },\n    \"head\": { type: \"bool\", name: \"head\" },\n    \"no-head\": { type: \"bool\", name: \"head\", expand: false },\n    \"junk-session-cookies\": { type: \"bool\", name: \"junk-session-cookies\" },\n    \"no-junk-session-cookies\": { type: \"bool\", name: \"junk-session-cookies\", expand: false },\n    \"remote-header-name\": { type: \"bool\", name: \"remote-header-name\" },\n    \"no-remote-header-name\": { type: \"bool\", name: \"remote-header-name\", expand: false },\n    \"insecure\": { type: \"bool\", name: \"insecure\" },\n    \"no-insecure\": { type: \"bool\", name: \"insecure\", expand: false },\n    \"doh-insecure\": { type: \"bool\", name: \"doh-insecure\" },\n    \"no-doh-insecure\": { type: \"bool\", name: \"doh-insecure\", expand: false },\n    \"config\": { type: \"string\", name: \"config\" },\n    \"list-only\": { type: \"bool\", name: \"list-only\" },\n    \"no-list-only\": { type: \"bool\", name: \"list-only\", expand: false },\n    \"location\": { type: \"bool\", name: \"location\" },\n    \"no-location\": { type: \"bool\", name: \"location\", expand: false },\n    \"location-trusted\": { type: \"bool\", name: \"location-trusted\" },\n    \"no-location-trusted\": { type: \"bool\", name: \"location-trusted\", expand: false },\n    \"max-time\": { type: \"string\", name: \"max-time\" },\n    \"manual\": { type: \"bool\", name: \"manual\" },\n    \"no-manual\": { type: \"bool\", name: \"manual\", expand: false },\n    \"netrc\": { type: \"bool\", name: \"netrc\" },\n    \"no-netrc\": { type: \"bool\", name: \"netrc\", expand: false },\n    \"netrc-optional\": { type: \"bool\", name: \"netrc-optional\" },\n    \"no-netrc-optional\": { type: \"bool\", name: \"netrc-optional\", expand: false },\n    \"netrc-file\": { type: \"string\", name: \"netrc-file\" },\n    \"buffer\": { type: \"bool\", name: \"buffer\" },\n    \"no-buffer\": { type: \"bool\", name: \"buffer\", expand: false },\n    \"output\": { type: \"string\", name: \"output\" },\n    \"remote-name\": { type: \"bool\", name: \"remote-name\" },\n    \"no-remote-name\": { type: \"bool\", name: \"remote-name\", expand: false },\n    \"remote-name-all\": { type: \"bool\", name: \"remote-name-all\" },\n    \"no-remote-name-all\": { type: \"bool\", name: \"remote-name-all\", expand: false },\n    \"output-dir\": { type: \"string\", name: \"output-dir\" },\n    \"clobber\": { type: \"bool\", name: \"clobber\" },\n    \"no-clobber\": { type: \"bool\", name: \"clobber\", expand: false },\n    \"proxytunnel\": { type: \"bool\", name: \"proxytunnel\" },\n    \"no-proxytunnel\": { type: \"bool\", name: \"proxytunnel\", expand: false },\n    \"ftp-port\": { type: \"string\", name: \"ftp-port\" },\n    \"disable\": { type: \"bool\", name: \"disable\" },\n    \"no-disable\": { type: \"bool\", name: \"disable\", expand: false },\n    \"quote\": { type: \"string\", name: \"quote\" },\n    \"range\": { type: \"string\", name: \"range\" },\n    \"remote-time\": { type: \"bool\", name: \"remote-time\" },\n    \"no-remote-time\": { type: \"bool\", name: \"remote-time\", expand: false },\n    \"silent\": { type: \"bool\", name: \"silent\" },\n    \"no-silent\": { type: \"bool\", name: \"silent\", expand: false },\n    \"show-error\": { type: \"bool\", name: \"show-error\" },\n    \"no-show-error\": { type: \"bool\", name: \"show-error\", expand: false },\n    \"telnet-option\": { type: \"string\", name: \"telnet-option\" },\n    \"upload-file\": { type: \"string\", name: \"upload-file\" },\n    \"user\": { type: \"string\", name: \"user\" },\n    \"proxy-user\": { type: \"string\", name: \"proxy-user\" },\n    \"verbose\": { type: \"bool\", name: \"verbose\" },\n    \"no-verbose\": { type: \"bool\", name: \"verbose\", expand: false },\n    \"version\": { type: \"bool\", name: \"version\" },\n    \"no-version\": { type: \"bool\", name: \"version\", expand: false },\n    \"write-out\": { type: \"string\", name: \"write-out\" },\n    \"proxy\": { type: \"string\", name: \"proxy\" },\n    \"preproxy\": { type: \"string\", name: \"preproxy\" },\n    \"request\": { type: \"string\", name: \"request\" },\n    \"speed-limit\": { type: \"string\", name: \"speed-limit\" },\n    \"speed-time\": { type: \"string\", name: \"speed-time\" },\n    \"time-cond\": { type: \"string\", name: \"time-cond\" },\n    \"parallel\": { type: \"bool\", name: \"parallel\" },\n    \"no-parallel\": { type: \"bool\", name: \"parallel\", expand: false },\n    \"parallel-max\": { type: \"string\", name: \"parallel-max\" },\n    \"parallel-immediate\": { type: \"bool\", name: \"parallel-immediate\" },\n    \"no-parallel-immediate\": { type: \"bool\", name: \"parallel-immediate\", expand: false },\n    \"progress-bar\": { type: \"bool\", name: \"progress-bar\" },\n    \"no-progress-bar\": { type: \"bool\", name: \"progress-bar\", expand: false },\n    \"progress-meter\": { type: \"bool\", name: \"progress-meter\" },\n    \"no-progress-meter\": { type: \"bool\", name: \"progress-meter\", expand: false },\n    \"next\": { type: \"bool\", name: \"next\" },\n    // END EXTRACTED OPTIONS\n    // These are options that curl used to have.\n    // Those that don't conflict with the current options are supported by curlconverter.\n    // TODO: curl's --long-options can be shortened.\n    // For example if curl used to only have a single option, \"--blah\" then\n    // \"--bla\" \"--bl\" and \"--b\" all used to be valid options as well. If later\n    // \"--blaz\" was added, suddenly those 3 shortened options are removed (because\n    // they are now ambiguous).\n    // https://github.com/curlconverter/curlconverter/pull/280#issuecomment-931241328\n    port: { type: \"string\", name: \"port\", removed: \"7.3\" },\n    // These are now shoretened forms of --upload-file and --continue-at\n    //upload: { type: \"bool\", name: \"upload\", removed: \"7.7\" },\n    //continue: { type: \"bool\", name: \"continue\", removed: \"7.9\" },\n    \"ftp-ascii\": { type: \"bool\", name: \"use-ascii\", removed: \"7.10.7\" },\n    \"3p-url\": { type: \"string\", name: \"3p-url\", removed: \"7.16.0\" },\n    \"3p-user\": { type: \"string\", name: \"3p-user\", removed: \"7.16.0\" },\n    \"3p-quote\": { type: \"string\", name: \"3p-quote\", removed: \"7.16.0\" },\n    \"http2.0\": { type: \"bool\", name: \"http2\", removed: \"7.36.0\" },\n    \"no-http2.0\": { type: \"bool\", name: \"http2\", removed: \"7.36.0\" },\n    \"telnet-options\": { type: \"string\", name: \"telnet-option\", removed: \"7.49.0\" },\n    \"http-request\": { type: \"string\", name: \"request\", removed: \"7.49.0\" },\n    // --socks is now an ambiguous shortening of --socks4, --socks5 and a bunch more\n    //socks: { type: \"string\", name: \"socks5\", removed: \"7.49.0\" },\n    \"capath \": { type: \"string\", name: \"capath\", removed: \"7.49.0\" }, // trailing space\n    ftpport: { type: \"string\", name: \"ftp-port\", removed: \"7.49.0\" },\n    environment: { type: \"bool\", name: \"environment\", removed: \"7.54.1\" },\n    // These never had any effect\n    \"no-tlsv1\": { type: \"bool\", name: \"tlsv1\", removed: \"7.54.1\" },\n    \"no-tlsv1.2\": { type: \"bool\", name: \"tlsv1.2\", removed: \"7.54.1\" },\n    \"no-http2-prior-knowledge\": { type: \"bool\", name: \"http2-prior-knowledge\", removed: \"7.54.1\" },\n    \"no-ipv6\": { type: \"bool\", name: \"ipv6\", removed: \"7.54.1\" },\n    \"no-ipv4\": { type: \"bool\", name: \"ipv4\", removed: \"7.54.1\" },\n    \"no-sslv2\": { type: \"bool\", name: \"sslv2\", removed: \"7.54.1\" },\n    \"no-tlsv1.0\": { type: \"bool\", name: \"tlsv1.0\", removed: \"7.54.1\" },\n    \"no-tlsv1.1\": { type: \"bool\", name: \"tlsv1.1\", removed: \"7.54.1\" },\n    \"no-sslv3\": { type: \"bool\", name: \"sslv3\", removed: \"7.54.1\" },\n    \"no-http1.0\": { type: \"bool\", name: \"http1.0\", removed: \"7.54.1\" },\n    \"no-next\": { type: \"bool\", name: \"next\", removed: \"7.54.1\" },\n    \"no-tlsv1.3\": { type: \"bool\", name: \"tlsv1.3\", removed: \"7.54.1\" },\n    \"no-environment\": { type: \"bool\", name: \"environment\", removed: \"7.54.1\" },\n    \"no-http1.1\": { type: \"bool\", name: \"http1.1\", removed: \"7.54.1\" },\n    \"no-proxy-tlsv1\": { type: \"bool\", name: \"proxy-tlsv1\", removed: \"7.54.1\" },\n    \"no-http2\": { type: \"bool\", name: \"http2\", removed: \"7.54.1\" },\n};\n// curl lets you not type the full argument as long as it's unambiguous.\n// So --sil instead of --silent is okay, --s is not.\nexport const curlLongOptsShortened = {};\nfor (const [opt, val] of Object.entries(curlLongOpts)) {\n    const expand = \"expand\" in val ? val.expand : true;\n    const removed = \"removed\" in val ? val.removed : false;\n    if (expand && !removed) {\n        for (let i = 1; i < opt.length; i++) {\n            const shortenedOpt = opt.slice(0, i);\n            if (!Object.prototype.hasOwnProperty.call(curlLongOptsShortened, shortenedOpt)) {\n                if (!Object.prototype.hasOwnProperty.call(curlLongOpts, shortenedOpt)) {\n                    curlLongOptsShortened[shortenedOpt] = val;\n                }\n            }\n            else {\n                // If more than one option shortens to this, it's ambiguous\n                curlLongOptsShortened[shortenedOpt] = null;\n            }\n        }\n    }\n}\n// Arguments which are supported by all generators, because they're\n// easy to implement or because they're handled by upstream code and\n// affect something that's easy to implement.\nexport const COMMON_SUPPORTED_ARGS = [\n    \"url\",\n    \"proto-default\",\n    // Controls whether or not backslash-escaped [] {} will have the backslash removed.\n    \"globoff\",\n    // curl will exit if it finds auth credentials in the URL with this option,\n    // we remove it from the URL and emit a warning instead.\n    \"disallow-username-in-url\",\n    // Method\n    \"request\",\n    \"get\",\n    \"head\",\n    \"no-head\",\n    // Headers\n    \"header\", // TODO: can be a file\n    \"user-agent\",\n    \"referer\",\n    \"range\",\n    \"time-cond\",\n    \"cookie\", // TODO: can be a file\n    \"oauth2-bearer\",\n    // Basic Auth\n    \"user\",\n    \"basic\",\n    \"no-basic\",\n    // Data\n    \"data\",\n    \"data-raw\",\n    \"data-ascii\",\n    \"data-binary\",\n    \"data-urlencode\",\n    \"json\",\n    \"url-query\",\n    // TODO: --compressed is already the default for some runtimes, in\n    // which case we might have to only warn that --no-compressed isn't supported.\n];\nexport function toBoolean(opt) {\n    if (opt.startsWith(\"no-disable-\")) {\n        return true;\n    }\n    if (opt.startsWith(\"disable-\") || opt.startsWith(\"no-\")) {\n        return false;\n    }\n    return true;\n}\n// prettier-ignore\nexport const curlShortOpts = {\n    // BEGIN EXTRACTED SHORT OPTIONS\n    \"0\": \"http1.0\",\n    \"1\": \"tlsv1\",\n    \"2\": \"sslv2\",\n    \"3\": \"sslv3\",\n    \"4\": \"ipv4\",\n    \"6\": \"ipv6\",\n    \"a\": \"append\",\n    \"A\": \"user-agent\",\n    \"b\": \"cookie\",\n    \"B\": \"use-ascii\",\n    \"c\": \"cookie-jar\",\n    \"C\": \"continue-at\",\n    \"d\": \"data\",\n    \"D\": \"dump-header\",\n    \"e\": \"referer\",\n    \"E\": \"cert\",\n    \"f\": \"fail\",\n    \"F\": \"form\",\n    \"g\": \"globoff\",\n    \"G\": \"get\",\n    \"h\": \"help\",\n    \"H\": \"header\",\n    \"i\": \"include\",\n    \"I\": \"head\",\n    \"j\": \"junk-session-cookies\",\n    \"J\": \"remote-header-name\",\n    \"k\": \"insecure\",\n    \"K\": \"config\",\n    \"l\": \"list-only\",\n    \"L\": \"location\",\n    \"m\": \"max-time\",\n    \"M\": \"manual\",\n    \"n\": \"netrc\",\n    \"N\": \"no-buffer\",\n    \"o\": \"output\",\n    \"O\": \"remote-name\",\n    \"p\": \"proxytunnel\",\n    \"P\": \"ftp-port\",\n    \"q\": \"disable\",\n    \"Q\": \"quote\",\n    \"r\": \"range\",\n    \"R\": \"remote-time\",\n    \"s\": \"silent\",\n    \"S\": \"show-error\",\n    \"t\": \"telnet-option\",\n    \"T\": \"upload-file\",\n    \"u\": \"user\",\n    \"U\": \"proxy-user\",\n    \"v\": \"verbose\",\n    \"V\": \"version\",\n    \"w\": \"write-out\",\n    \"x\": \"proxy\",\n    \"X\": \"request\",\n    \"Y\": \"speed-limit\",\n    \"y\": \"speed-time\",\n    \"z\": \"time-cond\",\n    \"Z\": \"parallel\",\n    \"#\": \"progress-bar\",\n    \":\": \"next\",\n    // END EXTRACTED SHORT OPTIONS\n};\nexport const changedShortOpts = {\n    p: \"used to be short for --port <port> (a since-deleted flag) until curl 7.3\",\n    // TODO: some of these might be renamed options\n    t: \"used to be short for --upload (a since-deleted boolean flag) until curl 7.7\",\n    c: \"used to be short for --continue (a since-deleted boolean flag) until curl 7.9\",\n    // TODO: did -@ actually work?\n    \"@\": \"used to be short for --create-dirs until curl 7.10.7\",\n    Z: \"used to be short for --max-redirs <num> until curl 7.10.7\",\n    9: \"used to be short for --crlf until curl 7.10.8\",\n    8: \"used to be short for --stderr <file> until curl 7.10.8\",\n    7: \"used to be short for --interface <name> until curl 7.10.8\",\n    6: \"used to be short for --krb <level> (which itself used to be --krb4 <level>) until curl 7.10.8\",\n    // TODO: did these short options ever actually work?\n    5: \"used to be another way to specify the url until curl 7.10.8\",\n    \"*\": \"used to be another way to specify the url until curl 7.49.0\",\n    \"~\": \"used to be short for --xattr until curl 7.49.0\",\n};\n// type Satisfies<T, U extends T> = void;\n// type AssertSubsetKeys = Satisfies<\n//   keyof typeof curlLongOpts | \"authtype\" | \"proxyauthtype\",\n//   keyof OperationConfig\n// >;\n// These options can be specified more than once, they\n// are always returned as a list.\n// For all other options, if you specify it more than once\n// curl will use the last one.\nconst canBeList = new Set([\n    \"connect-to\",\n    \"cookie\",\n    \"data\",\n    \"form\",\n    \"header\",\n    \"hsts\",\n    \"mail-rcpt\",\n    \"output\",\n    \"proxy-header\",\n    \"quote\",\n    \"resolve\",\n    \"telnet-option\",\n    \"upload-file\",\n    \"url-query\",\n    \"url\",\n]);\nfunction checkSupported(global_, lookup, longArg, supportedOpts) {\n    if (supportedOpts && !supportedOpts.has(longArg.name)) {\n        // TODO: better message. include generator name?\n        warnf(global_, [\n            longArg.name,\n            lookup +\n                \" is not a supported option\" +\n                (longArg.removed ? \", it was removed in curl \" + longArg.removed : \"\"),\n        ]);\n    }\n}\nexport function pushProp(obj, prop, value) {\n    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {\n        obj[prop] = [];\n    }\n    obj[prop].push(value);\n    return obj;\n}\nfunction pushArgValue(global_, config, argName, value) {\n    // Note: cli.ts assumes that the property names on OperationConfig\n    // are the same as the passed in argument in an error message, so\n    // if you do something like\n    // echo curl example.com | curlconverter - --data-raw foo\n    // The error message will say\n    // \"if you pass --stdin or -, you can't also pass --data\"\n    // instead of \"--data-raw\".\n    switch (argName) {\n        case \"data\":\n        case \"data-ascii\":\n            return pushProp(config, \"data\", [\"data\", value]);\n        case \"data-binary\":\n            return pushProp(config, \"data\", [\n                // Unless it's a file, --data-binary works the same as --data\n                value.startsWith(\"@\") ? \"binary\" : \"data\",\n                value,\n            ]);\n        case \"data-raw\":\n            return pushProp(config, \"data\", [\n                // Unless it's a file, --data-raw works the same as --data\n                value.startsWith(\"@\") ? \"raw\" : \"data\",\n                value,\n            ]);\n        case \"data-urlencode\":\n            return pushProp(config, \"data\", [\"urlencode\", value]);\n        case \"json\":\n            config.json = true;\n            return pushProp(config, \"data\", [\"json\", value]);\n        case \"url-query\":\n            if (value.startsWith(\"+\")) {\n                return pushProp(config, \"url-query\", [\"raw\", value.slice(1)]);\n            }\n            return pushProp(config, \"url-query\", [\"urlencode\", value]);\n        case \"form\":\n            return pushProp(config, \"form\", { value, type: \"form\" });\n        case \"form-string\":\n            return pushProp(config, \"form\", { value, type: \"string\" });\n        case \"aws-sigv4\":\n            config.authtype |= CURLAUTH_AWS_SIGV4;\n            break;\n        case \"oauth2-bearer\":\n            config.authtype |= CURLAUTH_BEARER;\n            break;\n        case \"unix-socket\":\n        case \"abstract-unix-socket\":\n            // Ignore distinction\n            // TODO: this makes the error message wrong\n            // TODO: what's the difference?\n            pushProp(config, \"unix-socket\", value);\n            break;\n        case \"trace\":\n        case \"trace-ascii\":\n        case \"stderr\":\n        case \"libcurl\":\n        case \"config\":\n        case \"parallel-max\":\n            global_[argName] = value;\n            break;\n        case \"language\": // --language is a curlconverter specific option\n            global_[argName] = value.toString();\n            return;\n    }\n    return pushProp(config, argName, value);\n}\n// Might create a new config\nfunction setArgValue(global_, config, argName, toggle) {\n    switch (argName) {\n        case \"digest\":\n            if (toggle) {\n                config.authtype |= CURLAUTH_DIGEST;\n            }\n            else {\n                config.authtype &= ~CURLAUTH_DIGEST;\n            }\n            break;\n        case \"proxy-digest\":\n            if (toggle) {\n                config.proxyauthtype |= CURLAUTH_DIGEST;\n            }\n            else {\n                config.proxyauthtype &= ~CURLAUTH_DIGEST;\n            }\n            break;\n        case \"negotiate\":\n            if (toggle) {\n                config.authtype |= CURLAUTH_NEGOTIATE;\n            }\n            else {\n                config.authtype &= ~CURLAUTH_NEGOTIATE;\n            }\n            break;\n        case \"proxy-negotiate\":\n            if (toggle) {\n                config.proxyauthtype |= CURLAUTH_NEGOTIATE;\n            }\n            else {\n                config.proxyauthtype &= ~CURLAUTH_NEGOTIATE;\n            }\n            break;\n        case \"ntlm\":\n            if (toggle) {\n                config.authtype |= CURLAUTH_NTLM;\n            }\n            else {\n                config.authtype &= ~CURLAUTH_NTLM;\n            }\n            break;\n        case \"proxy-ntlm\":\n            if (toggle) {\n                config.proxyauthtype |= CURLAUTH_NTLM;\n            }\n            else {\n                config.proxyauthtype &= ~CURLAUTH_NTLM;\n            }\n            break;\n        case \"ntlm-wb\":\n            if (toggle) {\n                config.authtype |= CURLAUTH_NTLM_WB;\n            }\n            else {\n                config.authtype &= ~CURLAUTH_NTLM_WB;\n            }\n            break;\n        case \"basic\":\n            if (toggle) {\n                config.authtype |= CURLAUTH_BASIC;\n            }\n            else {\n                config.authtype &= ~CURLAUTH_BASIC;\n            }\n            break;\n        case \"proxy-basic\":\n            if (toggle) {\n                config.proxyauthtype |= CURLAUTH_BASIC;\n            }\n            else {\n                config.proxyauthtype &= ~CURLAUTH_BASIC;\n            }\n            break;\n        case \"anyauth\":\n            if (toggle) {\n                config.authtype = CURLAUTH_ANY;\n            }\n            break;\n        case \"proxy-anyauth\":\n            if (toggle) {\n                config.proxyauthtype = CURLAUTH_ANY;\n            }\n            break;\n        case \"location\":\n            config[\"location\"] = toggle;\n            break;\n        case \"location-trusted\":\n            config[\"location\"] = toggle;\n            config[\"location-trusted\"] = toggle;\n            break;\n        case \"http1.0\":\n            config.httpVersion = \"1.0\";\n            break;\n        case \"http1.1\":\n            config.httpVersion = \"1.1\";\n            break;\n        case \"http2\":\n            config.httpVersion = \"2\";\n            break;\n        case \"http2-prior-knowledge\":\n            config.httpVersion = \"2-prior-knowledge\";\n            break;\n        case \"http3\":\n            config.httpVersion = \"3\";\n            break;\n        case \"http3-only\":\n            config.httpVersion = \"3-only\";\n            break;\n        case \"tlsv1\":\n            config.tlsVersion = \"1\";\n            break;\n        case \"tlsv1.0\":\n            config.tlsVersion = \"1.0\";\n            break;\n        case \"tlsv1.1\":\n            config.tlsVersion = \"1.1\";\n            break;\n        case \"tlsv1.2\":\n            config.tlsVersion = \"1.2\";\n            break;\n        case \"tlsv1.3\":\n            config.tlsVersion = \"1.3\";\n            break;\n        case \"verbose\":\n        case \"version\":\n        case \"trace-time\":\n        case \"test-event\":\n        case \"progress-bar\":\n        case \"progress-meter\":\n        case \"fail-early\":\n        case \"styled-output\":\n        case \"help\":\n        case \"silent\":\n        case \"show-error\":\n        case \"parallel\":\n        case \"parallel-immediate\":\n        case \"stdin\": // --stdin or - is a curlconverter specific option\n            global_[argName] = toggle;\n            break;\n        case \"next\":\n            // curl ignores --next if the last url node doesn't have a url\n            if (toggle &&\n                config.url &&\n                config.url.length > 0 &&\n                config.url.length >= (config[\"upload-file\"] || []).length &&\n                config.url.length >= (config.output || []).length) {\n                config = { authtype: CURLAUTH_BASIC, proxyauthtype: CURLAUTH_BASIC };\n                global_.configs.push(config);\n            }\n            break;\n        default:\n            config[argName] = toggle;\n    }\n    return config;\n}\nexport function parseArgs(args, longOpts = curlLongOpts, shortenedLongOpts = curlLongOptsShortened, shortOpts = curlShortOpts, supportedOpts, warnings = []) {\n    let config = {\n        authtype: CURLAUTH_BASIC,\n        proxyauthtype: CURLAUTH_BASIC,\n    };\n    const global_ = { configs: [config], warnings };\n    const seen = [];\n    for (let i = 1, stillflags = true; i < args.length; i++) {\n        const arg = args[i];\n        if (stillflags && arg.startsWith(\"-\")) {\n            if (eq(arg, \"--\")) {\n                /* This indicates the end of the flags and thus enables the\n                   following (URL) argument to start with -. */\n                stillflags = false;\n            }\n            else if (arg.startsWith(\"--\")) {\n                const shellToken = firstShellToken(arg);\n                if (shellToken) {\n                    // TODO: if there's any text after the \"--\" or after the variable\n                    // we could narrow it down.\n                    throw new CCError(\"this \" +\n                        shellToken.type +\n                        \" could \" +\n                        (shellToken.type === \"command\" ? \"return\" : \"be\") +\n                        \" anything\\n\" +\n                        underlineNode(shellToken.syntaxNode));\n                }\n                const argStr = arg.toString();\n                const lookup = argStr.slice(2);\n                let longArg = shortenedLongOpts[lookup];\n                if (typeof longArg === \"undefined\") {\n                    longArg = longOpts[lookup];\n                }\n                if (longArg === null) {\n                    throw new CCError(\"option \" + argStr + \": is ambiguous\");\n                }\n                if (typeof longArg === \"undefined\") {\n                    // TODO: extract a list of deleted arguments to check here\n                    throw new CCError(\"option \" + argStr + \": is unknown\");\n                }\n                if (longArg.type === \"string\") {\n                    i++;\n                    if (i >= args.length) {\n                        throw new CCError(\"option \" + argStr + \": requires parameter\");\n                    }\n                    pushArgValue(global_, config, longArg.name, args[i]);\n                }\n                else {\n                    config = setArgValue(global_, config, longArg.name, toBoolean(argStr.slice(2))); // TODO: all shortened args work correctly?\n                }\n                checkSupported(global_, argStr, longArg, supportedOpts);\n                seen.push([longArg.name, argStr]);\n            }\n            else {\n                // Short option. These can look like\n                // -X POST    -> {request: 'POST'}\n                // or\n                // -XPOST     -> {request: 'POST'}\n                // or multiple options\n                // -ABCX POST -> {A: true, B: true, C: true, request: 'POST'}\n                // or multiple options and a value for the last one\n                // -ABCXPOST  -> {A: true, B: true, C: true, request: 'POST'}\n                // \"-\" passed to curl as an argument raises an error,\n                // curlconverter's command line uses it to read from stdin\n                if (arg.length === 1) {\n                    if (Object.prototype.hasOwnProperty.call(shortOpts, \"\")) {\n                        const shortFor = shortOpts[\"\"];\n                        const longArg = longOpts[shortFor];\n                        if (longArg === null) {\n                            throw new CCError(\"option -: is unknown\");\n                        }\n                        config = setArgValue(global_, config, longArg.name, toBoolean(shortFor));\n                        seen.push([longArg.name, \"-\"]);\n                    }\n                    else {\n                        throw new CCError(\"option -: is unknown\");\n                    }\n                }\n                for (let j = 1; j < arg.length; j++) {\n                    const jthChar = arg.get(j);\n                    if (typeof jthChar !== \"string\") {\n                        // A bash variable in the middle of a short option\n                        throw new CCError(\"this \" +\n                            jthChar.type +\n                            \" could \" +\n                            (jthChar.type === \"command\" ? \"return\" : \"be\") +\n                            \" anything\\n\" +\n                            underlineNode(jthChar.syntaxNode));\n                    }\n                    if (!has(shortOpts, jthChar)) {\n                        if (has(changedShortOpts, jthChar)) {\n                            throw new CCError(\"option \" + arg + \": \" + changedShortOpts[jthChar]);\n                        }\n                        // TODO: there are a few deleted short options we could report\n                        throw new CCError(\"option \" + arg + \": is unknown\");\n                    }\n                    const lookup = jthChar;\n                    const shortFor = shortOpts[lookup];\n                    const longArg = longOpts[shortFor];\n                    if (longArg === null) {\n                        // This could happen if curlShortOpts points to a renamed option or has a typo\n                        throw new CCError(\"ambiguous short option -\" + jthChar);\n                    }\n                    if (longArg.type === \"string\") {\n                        let val;\n                        if (j + 1 < arg.length) {\n                            // treat -XPOST as -X POST\n                            val = arg.slice(j + 1);\n                            j = arg.length;\n                        }\n                        else if (i + 1 < args.length) {\n                            i++;\n                            val = args[i];\n                        }\n                        else {\n                            throw new CCError(\"option \" + arg.toString() + \": requires parameter\");\n                        }\n                        pushArgValue(global_, config, longArg.name, val);\n                    }\n                    else {\n                        // Use shortFor because -N is short for --no-buffer\n                        // and we want to end up with {buffer: false}\n                        config = setArgValue(global_, config, longArg.name, toBoolean(shortFor));\n                    }\n                    if (lookup) {\n                        checkSupported(global_, \"-\" + lookup, longArg, supportedOpts);\n                        seen.push([longArg.name, \"-\" + lookup]);\n                    }\n                }\n            }\n        }\n        else {\n            if (typeof arg !== \"string\" &&\n                arg.tokens.length &&\n                typeof arg.tokens[0] !== \"string\") {\n                const isOrBeginsWith = arg.tokens.length === 1 ? \"is\" : \"begins with\";\n                warnings.push([\n                    \"ambiguous argument\",\n                    \"argument \" +\n                        isOrBeginsWith +\n                        \" a \" +\n                        arg.tokens[0].type +\n                        \", assuming it's a URL\\n\" +\n                        underlineNode(arg.tokens[0].syntaxNode),\n                ]);\n            }\n            pushArgValue(global_, config, \"url\", arg);\n            seen.push([\"url\", \"--url\"]);\n        }\n    }\n    for (const cfg of global_.configs) {\n        for (const [arg, values] of Object.entries(cfg)) {\n            if (Array.isArray(values) && !canBeList.has(arg)) {\n                cfg[arg] = values[values.length - 1];\n            }\n        }\n    }\n    return [global_, seen];\n}\n//# sourceMappingURL=opts.js.map","import { Word, eq } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\nimport yaml from \"yamljs\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"compressed\",\n    \"no-compressed\", // only explicitly disabling compression has an effect\n    \"netrc\",\n    \"netrc-optional\",\n    \"no-netrc\", // only explicitly disabling netrc has an effect\n    \"no-netrc-optional\",\n    \"cacert\",\n    \"cert\",\n    \"key\",\n    \"ciphers\",\n    \"insecure\",\n    \"no-insecure\",\n    \"anyauth\",\n    \"no-anyauth\",\n    \"digest\",\n    \"no-digest\",\n    \"aws-sigv4\",\n    \"negotiate\",\n    \"no-negotiate\",\n    // \"delegation\", // GSS/kerberos\n    // Not suported, just more specific warning\n    \"ntlm\",\n    \"no-ntlm\",\n    \"ntlm-wb\",\n    \"no-ntlm-wb\",\n    \"unix-socket\",\n    \"abstract-unix-socket\",\n    \"max-time\",\n    \"location\",\n    \"no-location\",\n    \"location-trusted\",\n    \"no-location-trusted\",\n    \"upload-file\",\n    \"output\",\n    \"form\",\n    \"form-string\",\n]);\nfunction getDataString(request, warnings) {\n    if (!request.data || !request.data.isString()) {\n        return;\n    }\n    const data = request.data.toString();\n    const contentType = request.headers.getContentType();\n    // TODO: delete Content-Type header when it's what Ansible will send anyway\n    // const exactContentType = request.headers.get(\"Content-Type\");\n    if (contentType === \"application/json\") {\n        try {\n            const dataAsJson = JSON.parse(data);\n            // TODO: if doesn't roundtrip, add commented out raw string\n            // TODO: we actually want to know how it's serialized by Ansible\n            // const roundtrips = JSON.stringify(dataAsJson) === dataStr;\n            return [dataAsJson, \"json\"];\n        }\n        catch (_a) { }\n    }\n    else if (contentType === \"application/x-www-form-urlencoded\") {\n        if (request.dataArray &&\n            request.dataArray.length === 1 &&\n            !(request.dataArray[0] instanceof Word) &&\n            !request.dataArray[0].name) {\n            const filetype = request.dataArray[0].filetype;\n            const filename = request.dataArray[0].filename.toString();\n            // TODO: and newlines have to be stripped for others\n            if (filetype === \"urlencode\") {\n                // TODO: or the other ones don't need to be?\n                warnings.push([\n                    \"urlencoded-file\",\n                    \"the file needs to be urlencoded: \" + JSON.stringify(filename),\n                ]);\n            }\n            return [filename, \"src\"];\n        }\n        const [queryList, queryDict] = parseQueryString(request.data);\n        if (queryDict) {\n            return [\n                Object.fromEntries(queryDict.map((q) => [\n                    q[0].toString(),\n                    Array.isArray(q[1])\n                        ? q[1].map((qv) => qv.toString())\n                        : q[1].toString(),\n                ])),\n                \"form-urlencoded\",\n            ];\n        }\n        if (queryList) {\n            return [\n                queryList.map((q) => [q[0].toString(), q[1].toString()]),\n                \"form-urlencoded\",\n            ];\n        }\n    }\n    return;\n}\nexport function _toAnsible(requests, warnings = []) {\n    // Only supported if there's one file and nothing else\n    const request = getFirst(requests, warnings, { dataReadsFile: true });\n    if (request.dataReadsFile &&\n        request.dataArray &&\n        (request.dataArray.length > 1 ||\n            (!(request.dataArray[0] instanceof Word) && request.dataArray[0].name))) {\n        warnings.push([\n            \"unsafe-data\",\n            \"the generated body is wrong, \" +\n                JSON.stringify(\"@\" + request.dataReadsFile) +\n                \" means read the file \" +\n                JSON.stringify(request.dataReadsFile),\n        ]);\n    }\n    const r = {\n        url: request.urls[0].url.toString(),\n        method: request.urls[0].method.toString(),\n    };\n    if (request.multipartUploads) {\n        const form = {};\n        for (const m of request.multipartUploads) {\n            // TODO: can't have duplicate keys\n            const name = m.name.toString();\n            form[name] = {};\n            if (\"content\" in m) {\n                form[name].content = m.content.toString();\n            }\n            else {\n                // TODO: get basename\n                form[name].filename = m.contentFile.toString();\n                if (m.filename && !eq(m.filename, m.contentFile)) {\n                    warnings.push([\n                        \"multipart-fake-filename\",\n                        // TODO: check if this is true, the only source is it's not in the example\n                        // https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html#examples\n                        \"Ansible doesn't allow reading from a file and changing the sent filename: \" +\n                            JSON.stringify(m.contentFile.toString()),\n                    ]);\n                }\n            }\n            if (\"contentType\" in m && m.contentType) {\n                form[name].mime_type = m.contentType.toString();\n            }\n        }\n        r.body = form;\n        r.body_format = \"form-multipart\";\n    }\n    else if (request.data) {\n        const d = getDataString(request, warnings);\n        if (d) {\n            const [body, format] = d;\n            if (format === \"src\") {\n                r.src = body;\n            }\n            else {\n                r.body = body;\n                if (format !== \"raw\") {\n                    r.body_format = format;\n                }\n            }\n        }\n        else {\n            r.body = request.data.toString();\n        }\n    }\n    else if (request.urls[0].uploadFile) {\n        r.src = request.urls[0].uploadFile.toString();\n    }\n    if (request.urls[0].output) {\n        r.dest = request.urls[0].output.toString();\n    }\n    if (request.headers.length) {\n        r.headers = {};\n        for (const h of request.headers) {\n            const [k, v] = h;\n            if (v !== null) {\n                r.headers[k.toString()] = v.toString();\n            }\n        }\n    }\n    if (request.urls[0].auth) {\n        const [username, password] = request.urls[0].auth;\n        if (username.toBool()) {\n            r.url_username = username.toString();\n        }\n        if (password.toBool()) {\n            r.url_password = password.toString();\n        }\n    }\n    // No idea if this stuff is correct\n    switch (request.authType) {\n        case \"basic\":\n            // TODO: if --basic explicitly passed, set this?\n            // r.force_basic_auth = true;\n            break;\n        case \"negotiate\":\n            r.use_gssapi = true;\n            break;\n        case \"ntlm\":\n        case \"ntlm-wb\":\n            // https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html#parameter-use_gssapi\n            warnings.push([\"ntlm\", \"Ansible doesn't support NTLM authentication.\"]);\n            break;\n    }\n    if (request.cacert) {\n        r.ca_path = request.cacert.toString();\n    }\n    if (request.cert) {\n        // TODO: might have password\n        const [cert, password] = request.cert;\n        r.client_cert = cert.toString();\n        if (password) {\n            warnings.push([\n                \"cert-password\",\n                \"Ansible does not support client certificate passwords: \" +\n                    JSON.stringify(password.toString()),\n            ]);\n        }\n    }\n    if (request.key) {\n        r.client_key = request.key.toString();\n    }\n    if (request.ciphers) {\n        r.ciphers = request.ciphers.toString();\n    }\n    if (request.insecure) {\n        r.validate_certs = false;\n    }\n    if (request.netrc === \"ignored\") {\n        r.use_netrc = false;\n    }\n    if (request.compressed === false) {\n        r.decompress = false;\n    }\n    // curl defaults to not following redirects, Ansible defaults to following\n    // safe redirects. Don't change that default unless it's explicitly set.\n    if (request.followRedirects === false) {\n        r.follow_redirects = \"none\";\n    }\n    else if (request.followRedirects === true) {\n        // curl will follow redirects to a different host but not send credentials\n        // Ansible will only follow redirects for GET or HEAD to the same host\n        r.follow_redirects = request.followRedirectsTrusted ? \"all\" : \"safe\";\n    }\n    if (request.timeout) {\n        const timeoutStr = request.timeout.toString();\n        const timeoutInt = parseInt(timeoutStr); // TODO: warn if wasn't int\n        if (isNaN(timeoutInt)) {\n            r.timeout = timeoutStr;\n            warnings.push([\n                \"ansible-timeout-not-int\",\n                \"couldn't parse timeout as an integer: \" + JSON.stringify(timeoutStr),\n            ]);\n        }\n        else {\n            r.timeout = timeoutInt;\n        }\n        warnings.push([\n            \"ansible-timeout\",\n            \"Ansible's timeout is socket-level but curl's is for the entire request.\",\n        ]);\n    }\n    if (request.unixSocket) {\n        r.unix_socket = request.unixSocket.toString();\n    }\n    return yaml.stringify([\n        {\n            name: request.urls[0].urlWithoutQueryList.toString(),\n            uri: r,\n            register: \"result\",\n        },\n    ], 100, 2);\n}\nexport function toAnsibleWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const ansible = _toAnsible(requests, warnings);\n    return [ansible, warnings];\n}\nexport function toAnsible(curlCommand) {\n    return toAnsibleWarn(curlCommand)[0];\n}\n//# sourceMappingURL=ansible.js.map","import { Word, eq, mergeWords } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"disallow-username-in-url\",\n    \"path-as-is\",\n    \"alt-svc\",\n    \"unix-socket\",\n    \"abstract-unix-socket\",\n    \"compressed\",\n    \"no-compressed\",\n    \"verbose\",\n    \"no-verbose\",\n    \"proxy\",\n    \"proxy-user\",\n    \"proxytunnel\",\n    \"noproxy\",\n    \"preproxy\",\n    \"proxy-anyauth\",\n    \"proxy-basic\",\n    \"proxy-digest\",\n    \"proxy-negotiate\",\n    \"proxy-ntlm\",\n    \"proxy-ca-native\",\n    \"proxy-cacert\",\n    \"proxy-capath\",\n    \"proxy-cert-type\",\n    \"proxy-cert\",\n    \"proxy-ciphers\",\n    \"proxy-crlfile\",\n    \"proxy-header\",\n    \"proxy-http2\",\n    \"proxy-insecure\",\n    \"proxy-key\",\n    \"proxy-key-type\",\n    \"proxy-pass\",\n    \"proxy-pinnedpubkey\",\n    \"proxy-service-name\",\n    \"proxy-ssl-allow-beast\",\n    \"proxy-ssl-auto-client-cert\",\n    \"proxy-tls13-ciphers\",\n    \"proxy-tlsuser\",\n    \"proxy-tlspassword\",\n    \"proxy-tlsauthtype\",\n    \"proxy-tlsv1\",\n    \"socks4\",\n    \"socks4a\",\n    \"socks5\",\n    \"socks5-hostname\",\n    \"socks5-basic\",\n    \"socks5-gssapi\",\n    \"socks5-gssapi-nec\",\n    \"socks5-gssapi-service\",\n    \"haproxy-clientip\",\n    \"haproxy-protocol\",\n    \"interface\",\n    \"netrc\",\n    \"netrc-file\",\n    \"netrc-optional\",\n    // \"anyauth\",\n    // \"no-anyauth\",\n    \"digest\",\n    \"no-digest\",\n    \"negotiate\",\n    \"no-negotiate\",\n    \"service-name\",\n    \"ntlm\",\n    \"no-ntlm\",\n    \"ntlm-wb\",\n    \"no-ntlm-wb\",\n    \"aws-sigv4\",\n    \"delegation\",\n    \"oauth2-bearer\",\n    \"ipv4\",\n    \"ipv6\",\n    \"local-port\",\n    \"ftp-skip-pasv-ip\",\n    \"sasl-authzid\",\n    \"sasl-ir\",\n    \"tr-encoding\",\n    \"tcp-fastopen\",\n    // Not parsed properly\n    // \"proto\",\n    // \"proto-redir\",\n    \"proto-default\",\n    \"ignore-content-length\",\n    \"no-ignore-content-length\",\n    \"remote-time\",\n    // \"time-cond\",\n    // requires that the underlying libcurl was built to support c-ares\n    // \"dns-interface\",\n    // \"dns-ipv4-addr\",\n    // \"dns-ipv6-addr\",\n    // \"dns-servers\",\n    // No effect\n    // \"dump-header\",\n    // \"include\",\n    // \"engine\",\n    // Adds a If-None-Match header\n    // \"etag-compare\",\n    // \"etag-save\", // No effect\n    \"fail\",\n    // \"fail-with-body\",\n    // \"fail-early\",\n    \"continue-at\",\n    \"speed-limit\",\n    \"speed-time\",\n    \"limit-rate\",\n    \"max-filesize\",\n    \"http0.9\",\n    \"http1.0\",\n    \"http1.1\",\n    \"http2\",\n    \"http2-prior-knowledge\",\n    \"http3\",\n    \"http3-only\",\n    \"cookie-jar\",\n    \"junk-session-cookies\",\n    \"crlf\",\n    \"no-crlf\",\n    \"use-ascii\",\n    // \"write-out\",\n    \"pass\",\n    \"cacert\",\n    \"capath\",\n    \"crlfile\",\n    \"pinnedpubkey\",\n    \"curves\",\n    \"cert\",\n    \"cert-status\",\n    \"cert-type\",\n    \"key\",\n    \"key-type\",\n    \"ca-native\",\n    \"ssl-allow-beast\",\n    \"ciphers\",\n    \"tls13-ciphers\",\n    \"tlsuser\",\n    \"tlspassword\",\n    \"tlsauthtype\",\n    \"ssl\",\n    \"ssl-auto-client-cert\",\n    \"ssl-no-revoke\",\n    \"ssl-reqd\",\n    \"ssl-revoke-best-effort\",\n    // \"sslv2\",  // ignored\n    // \"sslv3\",  // ignored\n    \"tlsv1\",\n    \"tlsv1.0\",\n    \"tlsv1.1\",\n    \"tlsv1.2\",\n    \"tlsv1.3\",\n    \"tls-max\",\n    // \"false-start\",\n    \"hsts\",\n    \"alpn\",\n    \"no-alpn\",\n    \"form\",\n    \"form-string\",\n    \"form-escape\",\n    \"no-form-escape\",\n    \"doh-url\",\n    \"doh-cert-status\",\n    // \"doh-insecure\",  // has no effect\n    \"location\",\n    \"no-location\",\n    \"location-trusted\",\n    \"no-location-trusted\",\n    \"max-redirs\",\n    \"post301\",\n    \"post302\",\n    \"post303\",\n    \"max-time\",\n    \"connect-timeout\",\n    \"expect100-timeout\",\n    \"happy-eyeballs-timeout-ms\",\n    \"resolve\",\n    \"connect-to\",\n    \"keepalive\",\n    \"no-keepalive\",\n    \"keepalive-time\",\n    \"insecure\",\n    \"no-insecure\",\n]);\nconst regexEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c) => {\n            switch (c) {\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 2) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            if (hex.length <= 4) {\n                return \"\\\\u\" + hex.padStart(4, \"0\");\n            }\n            return \"\\\\U\" + hex.padStart(8, \"0\");\n        }) +\n        '\"');\n}\nexport function repr(word, imports) {\n    const reprs = [];\n    for (const t of word.tokens) {\n        if (typeof t === \"string\") {\n            reprs.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            reprs.push(\"getenv(\" + reprStr(t.value) + \")\");\n            imports.add(\"stdlib.h\");\n        }\n        else if (t.type === \"command\") {\n            // TODO: read the FILE contents\n            reprs.push(\"popen(\" + reprStr(t.value) + ', \"r\")');\n            imports.add(\"stdio.h\");\n        }\n    }\n    // TODO: C can't concatenate strings\n    return reprs.join(\" + \");\n}\nexport function atof1000(word, imports) {\n    if (word.isString()) {\n        // TODO: check it's actually a valid float\n        const asFloat = parseFloat(word.toString());\n        if (!Number.isNaN(asFloat)) {\n            return Math.floor(asFloat * 1000) + \"L\";\n        }\n    }\n    return \"(long)(atof(\" + repr(word, imports) + \") * 1000)\";\n}\nexport function atoi(word, imports) {\n    if (word.isString()) {\n        // TODO: check it's actually a valid int\n        return word.toString();\n    }\n    return \"atoi(\" + repr(word, imports) + \")\";\n}\nexport function atol(word, imports) {\n    if (word.isString()) {\n        // TODO: check it's actually a valid int\n        return word.toString() + \"L\";\n    }\n    return \"atol(\" + repr(word, imports) + \")\";\n}\nconst AUTH_TO_VAR = {\n    basic: \"CURLAUTH_BASIC\",\n    negotiate: \"CURLAUTH_NEGOTIATE\",\n    // technically what --libcurl generates but older\n    // negotiate: \"CURLAUTH_GSSNEGOTIATE\",\n    digest: \"CURLAUTH_DIGEST\",\n    ntlm: \"CURLAUTH_NTLM\",\n    \"ntlm-wb\": \"CURLAUTH_NTLM_WB\",\n    bearer: \"CURLAUTH_BEARER\",\n    \"aws-sigv4\": \"CURLAUTH_AWS_SIGV4\",\n    none: \"CURLAUTH_NONE\",\n};\nfunction requestToC(request, warnings = [], imports) {\n    let preamble = \"\";\n    preamble += \"int main(int argc, char *argv[])\\n\";\n    preamble += \"{\\n\";\n    preamble += \"  CURLcode ret;\\n\";\n    preamble += \"  CURL *hnd;\\n\";\n    let vars = \"\";\n    let code = \"\";\n    code += \"  hnd = curl_easy_init();\\n\";\n    let cleanup = \"\";\n    cleanup += \"  curl_easy_cleanup(hnd);\\n\";\n    cleanup += \"  hnd = NULL;\\n\";\n    if (request.tcpFastopen) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_TCP_FASTOPEN, 1L);\\n\";\n    }\n    const bufferSize = request.limitRate\n        ? atol(request.limitRate, imports) // TODO: parse\n        : \"102400L\";\n    code += \"  curl_easy_setopt(hnd, CURLOPT_BUFFERSIZE, \" + bufferSize + \");\\n\";\n    if (request.localPort) {\n        const [start, end] = request.localPort;\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_LOCALPORT, \" +\n                atol(start, imports) +\n                \");\\n\";\n        let range = \"1L\";\n        if (end) {\n            range = atol(end, imports) + \"-\" + atol(start, imports);\n        }\n        code += \"  curl_easy_setopt(hnd, CURLOPT_LOCALPORTRANGE, \" + range + \");\\n\";\n    }\n    // TODO: if it doesn't have a query string from --data, it's better to\n    // do originalUrl because it doesn't need to have the http[s]://\n    const url = request.urls[0].url;\n    code += \"  curl_easy_setopt(hnd, CURLOPT_URL, \" + repr(url, imports) + \");\\n\";\n    code += \"  curl_easy_setopt(hnd, CURLOPT_NOPROGRESS, 1L);\\n\";\n    if (request.oauth2Bearer) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_XOAUTH2_BEARER, \" +\n                repr(request.oauth2Bearer, imports) +\n                \");\\n\";\n    }\n    if (request.proxy) {\n        const proxy = repr(request.proxy, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_PROXY, \" + proxy + \");\\n\";\n    }\n    if (request.proxyType) {\n        if (request.proxyType === \"http2\") {\n            code += \"  curl_easy_setopt(hnd, CURLOPT_PROXYTYPE, 3L);\\n\";\n        }\n        else if (request.proxyType === \"http1\") {\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXYTYPE, (long)CURLPROXY_HTTP_1_0);\\n\";\n        }\n        else if (request.proxyType === \"socks4\") {\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXYTYPE, (long)CURLPROXY_SOCKS4);\\n\";\n        }\n        else if (request.proxyType === \"socks4a\") {\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXYTYPE, (long)CURLPROXY_SOCKS4A);\\n\";\n        }\n        else if (request.proxyType === \"socks5\") {\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXYTYPE, (long)CURLPROXY_SOCKS5);\\n\";\n        }\n        else if (request.proxyType === \"socks5-hostname\") {\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXYTYPE, (long)CURLPROXY_SOCKS5_HOSTNAME);\\n\";\n        }\n    }\n    if (request.proxyAuth) {\n        const proxyUserpwd = repr(request.proxyAuth, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXYUSERPWD, \" + proxyUserpwd + \");\\n\";\n    }\n    if (request.proxytunnel) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_HTTPPROXYTUNNEL, 1L);\\n\";\n    }\n    if (request.proxyAuth) {\n        const proxyAuth = AUTH_TO_VAR[request.proxyAuthType];\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXYAUTH, (long)\" + proxyAuth + \");\\n\";\n    }\n    if (request.preproxy) {\n        const preproxy = repr(request.preproxy, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_PRE_PROXY, \" + preproxy + \");\\n\";\n    }\n    if (request.noproxy) {\n        const noproxy = repr(request.noproxy, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_NOPROXY, \" + noproxy + \");\\n\";\n    }\n    if (request.fail) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_FAILONERROR, 1L);\\n\";\n    }\n    if (request.netrc) {\n        const netrc = {\n            optional: \"CURL_NETRC_OPTIONAL\",\n            required: \"CURL_NETRC_REQUIRED\",\n            ignored: \"CURL_NETRC_IGNORED\",\n        }[request.netrc || \"ignored\"];\n        code += \"  curl_easy_setopt(hnd, CURLOPT_NETRC, (long)\" + netrc + \");\\n\";\n    }\n    if (request.netrcFile) {\n        const netrcFile = repr(request.netrcFile, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_NETRC_FILE, \" + netrcFile + \");\\n\";\n    }\n    if (request.useAscii) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_TRANSFERTEXT, 1L);\\n\";\n    }\n    if (request.urls[0].auth) {\n        const [username, password] = request.urls[0].auth;\n        const userpwd = repr(mergeWords(username, \":\", password), imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_USERPWD, \" + userpwd + \");\\n\";\n    }\n    if (request.timeout) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_TIMEOUT_MS, \" +\n                atof1000(request.timeout, imports) +\n                \");\\n\";\n    }\n    if (request.urls[0].uploadFile) {\n        // TODO\n    }\n    else if (request.multipartUploads) {\n        preamble += \"  curl_mime *mime1;\\n\";\n        preamble += \"  curl_mimepart *part1;\\n\";\n        vars += \"  mime1 = NULL;\\n\";\n        code += \"  mime1 = curl_mime_init(hnd);\\n\";\n        for (const m of request.multipartUploads) {\n            code += \"  part1 = curl_mime_addpart(mime1);\\n\";\n            if (\"contentFile\" in m && m.contentFile) {\n                code +=\n                    \"  curl_mime_filedata(part1, \" +\n                        repr(m.contentFile, imports) +\n                        \");\\n\";\n            }\n            else if (\"content\" in m && m.content) {\n                code +=\n                    \"  curl_mime_data(part1, \" +\n                        repr(m.content, imports) +\n                        \", CURL_ZERO_TERMINATED);\\n\";\n            }\n            if (\"encoder\" in m && m.encoder) {\n                code +=\n                    \"  curl_mime_encoder(part1, \" + repr(m.encoder, imports) + \");\\n\";\n            }\n            if (\"filename\" in m &&\n                m.filename &&\n                !(\"contentFile\" in m && m.contentFile && eq(m.filename, m.contentFile))) {\n                code +=\n                    \"  curl_mime_filename(part1, \" + repr(m.filename, imports) + \");\\n\";\n            }\n            else if (!m.filename && \"contentFile\" in m && m.contentFile) {\n                code += \"  curl_mime_filename(part1, NULL);\\n\";\n            }\n            code += \"  curl_mime_name(part1, \" + repr(m.name, imports) + \");\\n\";\n            if (\"contentType\" in m && m.contentType) {\n                code +=\n                    \"  curl_mime_type(part1, \" + repr(m.contentType, imports) + \");\\n\";\n            }\n            if (\"headers\" in m && m.headers) {\n                warnings.push([\n                    \"multipart-headers\",\n                    \"multipart headers are not supported: \" +\n                        m.headers.map((h) => h.toString()).join(\", \"),\n                ]);\n            }\n            if (\"headerFiles\" in m && m.headerFiles) {\n                warnings.push([\n                    \"multipart-headers\",\n                    \"multipart header files are not supported: \" +\n                        m.headerFiles.map((h) => h.toString()).join(\", \"),\n                ]);\n            }\n        }\n        code += \"  curl_easy_setopt(hnd, CURLOPT_MIMEPOST, mime1);\\n\";\n        cleanup += \"  curl_mime_free(mime1);\\n\";\n        cleanup += \"  mime1 = NULL;\\n\";\n    }\n    else if (request.data) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \" +\n                repr(request.data, imports) +\n                \");\\n\";\n        // this isn't correct if .data reads files\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_POSTFIELDSIZE_LARGE, (curl_off_t)\" +\n                request.data.length.toString() +\n                \");\\n\";\n    }\n    if (request.formEscape) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_MIME_OPTIONS, 1L);\\n\";\n    }\n    if (request.urls[0].auth) {\n        const curlAuth = AUTH_TO_VAR[request.authType];\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_HTTPAUTH, (long)\" + curlAuth + \");\\n\";\n    }\n    const headerLines = [];\n    for (const [headerName, headerValue] of request.headers) {\n        const h = headerName.toLowerCase();\n        if (eq(h, \"user-agent\") || eq(h, \"referer\")) {\n            continue;\n        }\n        if (headerValue === null) {\n            headerLines.push(\"  headers = curl_slist_append(headers, \" +\n                repr(mergeWords(headerName, \":\"), imports) +\n                \");\\n\");\n        }\n        else if (eq(headerValue, \"\")) {\n            headerLines.push(\"  headers = curl_slist_append(headers, \" +\n                repr(mergeWords(headerName, \";\"), imports) +\n                \");\\n\");\n        }\n        else {\n            headerLines.push(\"  headers = curl_slist_append(headers, \" +\n                repr(mergeWords(headerName, \": \", headerValue), imports) +\n                \");\\n\");\n        }\n    }\n    if (headerLines.length) {\n        preamble += \"  struct curl_slist *headers;\\n\";\n        vars += \"  headers = NULL;\\n\";\n        vars += headerLines.join(\"\");\n        code += \"  curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\\n\";\n        cleanup += \"  curl_slist_free_all(headers);\\n\";\n        cleanup += \"  headers = NULL;\\n\";\n    }\n    const referer = request.headers.get(\"referer\");\n    if (referer) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_REFERER, \" +\n                repr(referer, imports) +\n                \");\\n\";\n        // TODO: only if passed with --referer and not -H\n    }\n    const userAgent = request.headers.get(\"user-agent\");\n    if (userAgent) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_USERAGENT, \" +\n                repr(userAgent, imports) +\n                \");\\n\";\n    }\n    else if (userAgent === undefined) {\n        // TODO: needs to be kept up-to-date with VERSION in cli.ts\n        code += '  curl_easy_setopt(hnd, CURLOPT_USERAGENT, \"curl/8.2.1\");\\n';\n    }\n    if (request.followRedirects) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_FOLLOWLOCATION, 1L);\\n\";\n        if (request.followRedirectsTrusted) {\n            code += \"  curl_easy_setopt(hnd, CURLOPT_UNRESTRICTED_AUTH, 1L);\\n\";\n        }\n    }\n    if (request.awsSigV4) {\n        const awsSig = repr(request.awsSigV4, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_AWS_SIGV4, \" + awsSig + \");\\n\";\n    }\n    if (request.refererAuto) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_AUTOREFERER, 1L);\\n\";\n    }\n    if (request.proxyHeaders.length) {\n        // TODO: camelCase snake_case orjustoneword?\n        preamble += \"  struct curl_slist *proxy_headers;\\n\";\n        if (vars) {\n            vars += \"\\n\";\n        }\n        vars += \"  proxy_headers = NULL;\\n\";\n        for (const [headerName, headerValue] of request.proxyHeaders) {\n            if (headerValue === null) {\n                vars +=\n                    \"  proxy_headers = curl_slist_append(proxy_headers, \" +\n                        repr(mergeWords(headerName, \":\"), imports) +\n                        \");\\n\";\n            }\n            else if (eq(headerValue, \"\")) {\n                vars +=\n                    \"  proxy_headers = curl_slist_append(proxy_headers, \" +\n                        repr(mergeWords(headerName, \";\"), imports) +\n                        \");\\n\";\n            }\n            else {\n                vars +=\n                    \"  proxy_headers = curl_slist_append(proxy_headers, \" +\n                        repr(mergeWords(headerName, \": \", headerValue), imports) +\n                        \");\\n\";\n            }\n        }\n        code += \"  curl_easy_setopt(hnd, CURLOPT_PROXYHEADER, proxy_headers);\\n\";\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_HEADEROPT, (long)CURLHEADER_SEPARATE);\\n\";\n        cleanup += \"  curl_slist_free_all(proxy_headers);\\n\";\n        cleanup += \"  proxy_headers = NULL;\\n\";\n    }\n    const maxRedirs = request.maxRedirects || new Word(\"50\");\n    code +=\n        \"  curl_easy_setopt(hnd, CURLOPT_MAXREDIRS, \" +\n            atol(maxRedirs, imports) +\n            \");\\n\";\n    let httpVersion = \"CURL_HTTP_VERSION_2TLS\";\n    if (request.httpVersion) {\n        httpVersion = {\n            \"1.0\": \"CURL_HTTP_VERSION_1_0\",\n            \"1.1\": \"CURL_HTTP_VERSION_1_1\",\n            \"2\": \"CURL_HTTP_VERSION_2_0\",\n            \"2-prior-knowledge\": \"CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE\",\n            \"3\": \"CURL_HTTP_VERSION_3\",\n            \"3-only\": \"CURL_HTTP_VERSION_3ONLY\",\n        }[request.httpVersion];\n    }\n    code +=\n        \"  curl_easy_setopt(hnd, CURLOPT_HTTP_VERSION, (long)\" +\n            httpVersion +\n            \");\\n\";\n    if (request.http0_9) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_HTTP09_ALLOWED, 1L);\\n\";\n    }\n    if (request.post301 || request.post302 || request.post303) {\n        const postRedir = [];\n        if (request.post301) {\n            postRedir.push(\"CURL_REDIR_POST_301\");\n        }\n        if (request.post302) {\n            postRedir.push(\"CURL_REDIR_POST_302\");\n        }\n        if (request.post303) {\n            postRedir.push(\"CURL_REDIR_POST_303\");\n        }\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_POSTREDIR, \" +\n                postRedir.join(\" | \") +\n                \");\\n\";\n    }\n    if (request.compressed) {\n        code += '  curl_easy_setopt(hnd, CURLOPT_ACCEPT_ENCODING, \"\");\\n';\n    }\n    if (request.transferEncoding) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_TRANSFER_ENCODING, 1L);\\n\";\n    }\n    if (request.speedLimit || request.speedTime) {\n        const speedLimit = atol(request.speedLimit || new Word(\"1\"), imports);\n        const speedTime = atol(request.speedTime || new Word(\"30\"), imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_LOW_SPEED_LIMIT, \" + speedLimit + \");\\n\";\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_LOW_SPEED_TIME, \" + speedTime + \");\\n\";\n    }\n    if (request.limitRate) {\n        // TODO: parse\n        const limitRate = repr(request.limitRate, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_MAX_SEND_SPEED_LARGE, (curl_off_t)\" +\n                limitRate +\n                \");\\n\";\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_MAX_RECV_SPEED_LARGE, (curl_off_t)\" +\n                limitRate +\n                \");\\n\";\n    }\n    if (request.continueAt) {\n        if (!eq(request.continueAt, \"-\")) {\n            const continueAt = atoi(request.continueAt, imports);\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_RESUME_FROM_LARGE, (curl_off_t)\" +\n                    continueAt +\n                    \");\\n\";\n        }\n    }\n    if (request.pass) {\n        const pass = repr(request.pass, imports);\n        // TODO: --cert can also set this\n        code += \"  curl_easy_setopt(hnd, CURLOPT_KEYPASSWD, \" + pass + \");\\n\";\n    }\n    if (request.proxyPass) {\n        // TODO: --proxy-cert can also set this\n        const proxyPass = repr(request.proxyPass, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_KEYPASSWD, \" + proxyPass + \");\\n\";\n    }\n    if (request.cacert) {\n        const cacert = repr(request.cacert, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_CAINFO, \" + cacert + \");\\n\";\n    }\n    if (request.proxyCacert) {\n        const proxyCacert = repr(request.proxyCacert, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_CAINFO, \" + proxyCacert + \");\\n\";\n    }\n    if (request.capath || request.proxyCapath) {\n        if (request.capath) {\n            const capath = repr(request.capath, imports);\n            code += \"  curl_easy_setopt(hnd, CURLOPT_CAPATH, \" + capath + \");\\n\";\n            const proxyCapath = repr(request.proxyCapath || request.capath, imports);\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXY_CAPATH, \" + proxyCapath + \");\\n\";\n        }\n        else if (request.proxyCapath) {\n            // placate type checker\n            const proxyCapath = repr(request.proxyCapath, imports);\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXY_CAPATH, \" + proxyCapath + \");\\n\";\n        }\n    }\n    if (request.crlfile || request.proxyCrlfile) {\n        if (request.crlfile) {\n            const crlfile = repr(request.crlfile, imports);\n            code += \"  curl_easy_setopt(hnd, CURLOPT_CRLFILE, \" + crlfile + \");\\n\";\n            const proxyCrlfile = repr(request.proxyCrlfile || request.crlfile, imports);\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXY_CRLFILE, \" +\n                    proxyCrlfile +\n                    \");\\n\";\n        }\n        else if (request.proxyCrlfile) {\n            // placate type checker\n            const proxyCrlfile = repr(request.proxyCrlfile, imports);\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_PROXY_CRLFILE, \" +\n                    proxyCrlfile +\n                    \");\\n\";\n        }\n    }\n    if (request.pinnedpubkey) {\n        const pinnedpubkey = repr(request.pinnedpubkey, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PINNEDPUBLICKEY, \" +\n                pinnedpubkey +\n                \");\\n\";\n    }\n    // TODO: --proxy-pinnedpubkey ?\n    if (request.curves) {\n        const curves = repr(request.curves, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSL_EC_CURVES, \" + curves + \");\\n\";\n    }\n    if (request.cert) {\n        const [cert, pass] = request.cert;\n        if (pass) {\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_KEYPASSWD, \" +\n                    repr(pass, imports) +\n                    \");\\n\";\n        }\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_SSLCERT, \" +\n                repr(cert, imports) +\n                \");\\n\";\n    }\n    if (request.proxyCert) {\n        // TODO: split\n        const proxyCert = repr(request.proxyCert, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSLCERT, \" + proxyCert + \");\\n\";\n    }\n    if (request.certType) {\n        const certType = repr(request.certType, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSLCERTTYPE, \" + certType + \");\\n\";\n    }\n    if (request.proxyCertType) {\n        const proxyCertType = repr(request.proxyCertType, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSLCERTTYPE, \" +\n                proxyCertType +\n                \");\\n\";\n    }\n    if (request.key) {\n        const key = repr(request.key, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSLKEY, \" + key + \");\\n\";\n    }\n    if (request.proxyKey) {\n        const proxyKey = repr(request.proxyKey, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSLKEY, \" + proxyKey + \");\\n\";\n    }\n    if (request.keyType) {\n        const keyType = repr(request.keyType, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSLKEYTYPE, \" + keyType + \");\\n\";\n    }\n    if (request.proxyKeyType) {\n        const proxyKeyType = repr(request.proxyKeyType, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSLKEYTYPE, \" +\n                proxyKeyType +\n                \");\\n\";\n    }\n    if (request.insecure) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSL_VERIFYPEER, 0L);\\n\";\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSL_VERIFYHOST, 0L);\\n\";\n    }\n    if (request.proxyInsecure) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSL_VERIFYPEER, 0L);\\n\";\n        code += \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSL_VERIFYHOST, 0L);\\n\";\n    }\n    if (request.certStatus) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSL_VERIFYSTATUS, 1L);\\n\";\n    }\n    if (request.dohCertStatus) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_DOH_SSL_VERIFYSTATUS, 1L);\\n\";\n    }\n    let tlsVersion = null;\n    if (request.tlsVersion) {\n        tlsVersion = {\n            \"1\": \"CURL_SSLVERSION_TLSv1\",\n            \"1.0\": \"CURL_SSLVERSION_TLSv1_0\",\n            \"1.1\": \"CURL_SSLVERSION_TLSv1_1\",\n            \"1.2\": \"CURL_SSLVERSION_TLSv1_2\",\n            \"1.3\": \"CURL_SSLVERSION_TLSv1_3\",\n        }[request.tlsVersion];\n    }\n    let tlsMax = null;\n    if (request.tlsMax) {\n        if (request.tlsMax.isString()) {\n            const tlsMaxVal = request.tlsMax.toString();\n            switch (tlsMaxVal) {\n                case \"1.0\":\n                    tlsMax = \"CURL_SSLVERSION_MAX_TLSv1_0\";\n                    break;\n                case \"1.1\":\n                    tlsMax = \"CURL_SSLVERSION_MAX_TLSv1_1\";\n                    break;\n                case \"1.2\":\n                    tlsMax = \"CURL_SSLVERSION_MAX_TLSv1_2\";\n                    break;\n                case \"1.3\":\n                    tlsMax = \"CURL_SSLVERSION_MAX_TLSv1_3\";\n                    break;\n                case \"default\":\n                    tlsMax = \"CURL_SSLVERSION_MAX_DEFAULT\";\n                    break;\n                default:\n                    warnings.push([\n                        \"tls-max\",\n                        \"unknown value for --tls-max: \" + JSON.stringify(tlsMaxVal),\n                    ]);\n            }\n        }\n        else {\n            warnings.push([\n                \"tls-max\",\n                \"unparseable value for --tls-max: \" +\n                    JSON.stringify(request.tlsMax.toString()),\n            ]);\n        }\n    }\n    if (tlsVersion || tlsMax) {\n        if (!tlsVersion) {\n            // not really necessary since it's 0\n            tlsVersion = \"CURL_SSLVERSION_DEFAULT\";\n        }\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSLVERSION, (long)\";\n        if (tlsMax) {\n            code += \"(\" + tlsVersion + \" | \" + tlsMax + \")\";\n        }\n        else {\n            code += tlsVersion;\n        }\n        code += \");\\n\";\n    }\n    if (request.proxyTlsv1) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSLVERSION, (long)CURL_SSLVERSION_TLSv1);\\n\";\n    }\n    if (request.sslAllowBeast ||\n        request.sslNoRevoke ||\n        request.sslRevokeBestEffort ||\n        request.caNative ||\n        request.sslAutoClientCert) {\n        const sslOptions = [];\n        if (request.sslAllowBeast) {\n            sslOptions.push(\"CURLSSLOPT_ALLOW_BEAST\");\n        }\n        if (request.sslNoRevoke) {\n            sslOptions.push(\"CURLSSLOPT_NO_REVOKE\");\n        }\n        if (request.sslRevokeBestEffort) {\n            sslOptions.push(\"CURLSSLOPT_REVOKE_BEST_EFFORT\");\n        }\n        if (request.caNative) {\n            sslOptions.push(\"CURLSSLOPT_NATIVE_CA\");\n        }\n        if (request.sslAutoClientCert) {\n            sslOptions.push(\"CURLSSLOPT_AUTO_CLIENT_CERT\");\n        }\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_SSL_OPTIONS, (long)\" +\n                (sslOptions.length > 1 ? \"(\" : \"\") +\n                sslOptions.join(\" | \") +\n                (sslOptions.length > 1 ? \")\" : \"\") +\n                \");\\n\";\n    }\n    if (request.proxySslAllowBeast ||\n        request.proxyCaNative ||\n        request.proxySslAutoClientCert) {\n        const sslOptions = [];\n        if (request.proxySslAllowBeast) {\n            sslOptions.push(\"CURLSSLOPT_ALLOW_BEAST\");\n        }\n        if (request.proxyCaNative) {\n            sslOptions.push(\"CURLSSLOPT_NATIVE_CA\");\n        }\n        if (request.proxySslAutoClientCert) {\n            sslOptions.push(\"CURLSSLOPT_AUTO_CLIENT_CERT\");\n        }\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSL_OPTIONS, (long)\" +\n                sslOptions.join(\" | (long)\") +\n                \");\\n\";\n    }\n    if (request.pathAsIs) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_PATH_AS_IS, 1L);\\n\";\n    }\n    if (request.remoteTime) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_FILETIME, 1L);\\n\";\n    }\n    if (request.crlf) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_CRLF, 1L);\\n\";\n    }\n    if (request.cookieFiles) {\n        for (const cookieFile of request.cookieFiles) {\n            // TODO: why can curl set this more than once?\n            const cookieFile_ = repr(cookieFile, imports);\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_COOKIEFILE, \" + cookieFile_ + \");\\n\";\n        }\n    }\n    if (request.cookieJar) {\n        const cookieJar = repr(request.cookieJar, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_COOKIEJAR, \" + cookieJar + \");\\n\";\n    }\n    if (request.junkSessionCookies) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_COOKIESESSION, 1L);\\n\";\n    }\n    // TODO: this is more complicated.\n    // --head just sets CURLOPT_NOBODY and CURLOPT_FILETIME\n    // --upload-file just sets CURLOPT_UPLOAD and CURLOPT_INFILESIZE_LARGE\n    let expectedMethod = \"GET\";\n    if (request.data || request.multipartUploads) {\n        expectedMethod = \"POST\";\n    }\n    if (!eq(request.urls[0].method, expectedMethod)) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \" +\n                repr(request.urls[0].method, imports) +\n                \");\\n\";\n    }\n    if (request.interface) {\n        const interface_ = repr(request.interface, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_INTERFACE, \" + interface_ + \");\\n\";\n    }\n    if (request.krb) {\n        const krb = repr(request.krb, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_KRBLEVEL, \" + krb + \");\\n\";\n    }\n    if (request.connectTimeout) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_CONNECTTIMEOUT_MS, \" +\n                atof1000(request.connectTimeout, imports) +\n                \");\\n\";\n    }\n    if (request.dohUrl) {\n        const dohUrl = repr(request.dohUrl, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_DOH_URL, \" + dohUrl + \");\\n\";\n    }\n    if (request.ciphers) {\n        const ciphers = repr(request.ciphers, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_SSL_CIPHER_LIST, \" + ciphers + \");\\n\";\n    }\n    if (request.proxyCiphers) {\n        const proxyCiphers = repr(request.proxyCiphers, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SSL_CIPHER_LIST, \" +\n                proxyCiphers +\n                \");\\n\";\n    }\n    if (request.tls13Ciphers) {\n        const tls13Ciphers = repr(request.tls13Ciphers, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_TLS13_CIPHERS, \" + tls13Ciphers + \");\\n\";\n    }\n    if (request.proxyTls13Ciphers) {\n        const proxyTls13Ciphers = repr(request.proxyTls13Ciphers, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_TLS13_CIPHERS, \" +\n                proxyTls13Ciphers +\n                \");\\n\";\n    }\n    if (request.verbose) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_VERBOSE, 1L);\\n\";\n    }\n    if (request.maxFilesize) {\n        // TODO: parse\n        const maxFilesize = atol(request.maxFilesize, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_MAXFILESIZE_LARGE, (curl_off_t)\" +\n                maxFilesize +\n                \");\\n\";\n    }\n    // TODO: these should be mutually exclusive\n    if (request.ipv6) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_IPRESOLVE, 2L);\\n\";\n    }\n    else if (request.ipv4) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_IPRESOLVE, 1L);\\n\";\n    }\n    if (request.sslReqd || request.ssl) {\n        if (request.sslReqd) {\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_USE_SSL, (long)CURLUSESSL_ALL);\\n\";\n        }\n        else if (request.ssl) {\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_USE_SSL, (long)CURLUSESSL_TRY);\\n\";\n        }\n    }\n    if (request.socks5GssapiNec) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SOCKS5_GSSAPI_NEC, 1L);\\n\";\n    }\n    if (request.socks5Basic) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_SOCKS5_AUTH, (long)CURLAUTH_BASIC);\\n\";\n    }\n    else if (request.socks5Gssapi) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_SOCKS5_AUTH, (long)CURLAUTH_GSSNEGOTIATE);\\n\";\n    }\n    if (request.socks5GssapiService) {\n        const socks5GssapiService = repr(request.socks5GssapiService, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SERVICE_NAME, \" +\n                socks5GssapiService +\n                \");\\n\";\n    }\n    if (request.serviceName) {\n        const serviceName = repr(request.serviceName, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_SERVICE_NAME, \" + serviceName + \");\\n\";\n    }\n    if (request.proxyServiceName) {\n        const proxyServiceName = repr(request.proxyServiceName, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_SERVICE_NAME, \" +\n                proxyServiceName +\n                \");\\n\";\n    }\n    // TODO: check\n    if (request.ignoreContentLength) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_IGNORE_CONTENT_LENGTH, 1L);\\n\";\n    }\n    if (request.ftpSkipPasvIp !== false) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_FTP_SKIP_PASV_IP, 1L);\\n\";\n    }\n    if (request.keepAlive !== false) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_TCP_KEEPALIVE, 1L);\\n\";\n        if (request.keepAliveTime) {\n            const keepAliveTime = atol(request.keepAliveTime, imports);\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_TCP_KEEPIDLE, \" +\n                    keepAliveTime +\n                    \");\\n\";\n            code +=\n                \"  curl_easy_setopt(hnd, CURLOPT_TCP_KEEPINTVL, \" +\n                    keepAliveTime +\n                    \");\\n\";\n        }\n    }\n    if (request.proto) {\n        // TODO: parse\n        const proto = repr(request.proto, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_PROTOCOLS_STR, \" + proto + \");\\n\";\n    }\n    if (request.protoRedir) {\n        // TODO: parse\n        const protoRedir = repr(request.protoRedir, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_REDIR_PROTOCOLS_STR, \" +\n                protoRedir +\n                \");\\n\";\n    }\n    if (request.resolve) {\n        preamble += \"  struct curl_slist *resolve;\\n\";\n        if (vars) {\n            vars += \"\\n\";\n        }\n        vars += \"  resolve = NULL;\\n\";\n        for (const line of request.resolve) {\n            vars +=\n                \"  resolve = curl_slist_append(resolve, \" +\n                    repr(line, imports) +\n                    \");\\n\";\n        }\n        code += \"  curl_easy_setopt(hnd, CURLOPT_RESOLVE, resolve);\\n\";\n        cleanup += \"  curl_slist_free_all(resolve);\\n\";\n        cleanup += \"  resolve = NULL;\\n\";\n    }\n    if (request.connectTo) {\n        // TODO: camelCase snake_case orjustoneword?\n        preamble += \"  struct curl_slist *connect_to;\\n\";\n        if (vars) {\n            vars += \"\\n\";\n        }\n        vars += \"  connect_to = NULL;\\n\";\n        for (const line of request.connectTo) {\n            vars +=\n                \"  connect_to = curl_slist_append(connect_to, \" +\n                    repr(line, imports) +\n                    \");\\n\";\n        }\n        code += \"  curl_easy_setopt(hnd, CURLOPT_CONNECT_TO, connect_to);\\n\";\n        cleanup += \"  curl_slist_free_all(connect_to);\\n\";\n        cleanup += \"  connect_to = NULL;\\n\";\n    }\n    if (request.tlsuser) {\n        const tlsuser = repr(request.tlsuser, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_TLSAUTH_USERNAME, \" + tlsuser + \");\\n\";\n    }\n    if (request.tlspassword) {\n        const tlspassword = repr(request.tlspassword, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_TLSAUTH_PASSWORD, \" +\n                tlspassword +\n                \");\\n\";\n    }\n    if (request.tlsauthtype) {\n        const tlsauthtype = repr(request.tlsauthtype, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_TLSAUTH_TYPE, \" + tlsauthtype + \");\\n\";\n    }\n    if (request.proxyTlsuser) {\n        const proxyTlsuser = repr(request.proxyTlsuser, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_TLSAUTH_USERNAME, \" +\n                proxyTlsuser +\n                \");\\n\";\n    }\n    if (request.proxyTlspassword) {\n        const proxyTlspassword = repr(request.proxyTlspassword, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_TLSAUTH_PASSWORD, \" +\n                proxyTlspassword +\n                \");\\n\";\n    }\n    if (request.proxyTlsauthtype) {\n        const proxyTlsauthtype = repr(request.proxyTlsauthtype, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_PROXY_TLSAUTH_TYPE, \" +\n                proxyTlsauthtype +\n                \");\\n\";\n    }\n    if (request.delegation) {\n        if (eq(request.delegation, \"always\")) {\n            code += \"  curl_easy_setopt(hnd, CURLOPT_GSSAPI_DELEGATION, 2L);\\n\";\n        }\n        else if (eq(request.delegation, \"policy\")) {\n            code += \"  curl_easy_setopt(hnd, CURLOPT_GSSAPI_DELEGATION, 1L);\\n\";\n        }\n    }\n    if (request.saslAuthzid) {\n        const zid = repr(request.saslAuthzid, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SASL_AUTHZID, \" + zid + \");\\n\";\n    }\n    if (request.saslIr) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SASL_IR, 1L);\\n\";\n    }\n    if (request.alpn === false) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_SSL_ENABLE_ALPN, 0L);\\n\";\n    }\n    if (request.unixSocket) {\n        const socket = repr(request.unixSocket, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_UNIX_SOCKET_PATH, \" + socket + \");\\n\";\n    }\n    if (request.abstractUnixSocket) {\n        const socket = repr(request.abstractUnixSocket, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_ABSTRACT_UNIX_SOCKET, \" +\n                socket +\n                \");\\n\";\n    }\n    if (request.protoDefault) {\n        const protoDefault = repr(request.protoDefault, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_DEFAULT_PROTOCOL, \" +\n                protoDefault +\n                \");\\n\";\n    }\n    if (request.expect100Timeout) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_EXPECT_100_TIMEOUT_MS, \" +\n                atof1000(request.expect100Timeout, imports) +\n                \");\\n\";\n    }\n    if (request.happyEyeballsTimeoutMs) {\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS, \" +\n                atol(request.happyEyeballsTimeoutMs, imports) +\n                \");\\n\";\n    }\n    if (request.haproxyClientIp) {\n        const haproxyClientIp = repr(request.haproxyClientIp, imports);\n        code +=\n            \"  curl_easy_setopt(hnd, CURLOPT_HAPROXY_CLIENT_IP, \" +\n                haproxyClientIp +\n                \");\\n\";\n    }\n    if (request.haproxyProtocol) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_HAPROXYPROTOCOL, 1L);\\n\";\n    }\n    if (request.disallowUsernameInUrl) {\n        code += \"  curl_easy_setopt(hnd, CURLOPT_DISALLOW_USERNAME_IN_URL, 1L);\\n\";\n    }\n    if (request.altSvc) {\n        const altSvc = repr(request.altSvc, imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_ALTSVC, \" + altSvc + \");\\n\";\n    }\n    if (request.hsts) {\n        // TODO: warn that files aren't read?\n        const hsts = repr(request.hsts[request.hsts.length - 1], imports);\n        code += \"  curl_easy_setopt(hnd, CURLOPT_HSTS, \" + hsts + \");\\n\";\n    }\n    code += \"\\n\";\n    code += \"  ret = curl_easy_perform(hnd);\\n\";\n    let end = \"\";\n    end += \"  return (int)ret;\\n\";\n    end += \"}\\n\";\n    return (preamble +\n        (vars ? \"\\n\" + vars : \"\") +\n        \"\\n\" +\n        code +\n        \"\\n\" +\n        cleanup +\n        \"\\n\" +\n        end);\n}\nexport function printImports(imps) {\n    let s = \"\";\n    for (const imp of Array.from(imps).sort()) {\n        s += \"#include <\" + imp + \">\\n\";\n    }\n    return s;\n}\nexport function _toC(requests, warnings = []) {\n    const imports = new Set([\"curl/curl.h\"]);\n    const request = getFirst(requests, warnings, { cookieFiles: true });\n    const code = requestToC(request, warnings, imports);\n    return printImports(imports) + \"\\n\" + code;\n}\nexport function toCWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const c = _toC(requests, warnings);\n    return [c, warnings];\n}\nexport function toC(curlCommand) {\n    return toCWarn(curlCommand)[0];\n}\n//# sourceMappingURL=c.js.map","import { Word } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { esc as jsesc } from \"./javascript/javascript.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"max-time\",\n    \"proxy\",\n    \"proxy-user\",\n]);\nfunction repr(w) {\n    if (typeof w !== \"string\" && !w.isString()) {\n        // TODO: warn\n    }\n    let s = w.toString();\n    let quote = '\"';\n    if (s.includes('\"') && !s.includes(\"'\")) {\n        quote = \"'\";\n    }\n    // TODO: CFML doesn't support backslash escapes such as \\n\n    s = jsesc(s, quote).replace(/#/g, \"##\");\n    if (quote === '\"') {\n        return '\"' + s.replace(/\"/g, '\"\"') + '\"';\n    }\n    return \"'\" + s.replace(/'/g, \"''\") + \"'\";\n}\nexport function _toCFML(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    let cfmlCode = \"\";\n    cfmlCode += \"httpService = new http();\\n\";\n    cfmlCode += \"httpService.setUrl(\" + repr(request.urls[0].url) + \");\\n\";\n    cfmlCode += \"httpService.setMethod(\" + repr(request.urls[0].method) + \");\\n\";\n    if (request.cookies) {\n        for (const [headerName, headerValue] of request.cookies) {\n            cfmlCode +=\n                'httpService.addParam(type=\"cookie\", name=' +\n                    repr(headerName) +\n                    \", value=\" +\n                    repr(headerValue) +\n                    \");\\n\";\n        }\n        request.headers.delete(\"Cookie\");\n    }\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            cfmlCode +=\n                'httpService.addParam(type=\"header\", name=' +\n                    repr(headerName) +\n                    \", value=\" +\n                    repr(headerValue || new Word()) +\n                    \");\\n\";\n        }\n    }\n    if (request.timeout) {\n        cfmlCode +=\n            \"httpService.setTimeout(\" +\n                (parseInt(request.timeout.toString(), 10) || 0) +\n                \");\\n\";\n    }\n    if (request.urls[0].auth) {\n        const [authUser, authPassword] = request.urls[0].auth;\n        cfmlCode += \"httpService.setUsername(\" + repr(authUser) + \");\\n\";\n        cfmlCode += \"httpService.setPassword(\" + repr(authPassword || \"\") + \");\\n\";\n    }\n    if (request.proxy) {\n        const p = request.proxy.toString();\n        let proxy = p;\n        let proxyPort = \"1080\";\n        const proxyPart = p.match(/:([0-9]+)/);\n        if (proxyPart) {\n            proxy = p.slice(0, proxyPart.index);\n            proxyPort = proxyPart[1];\n        }\n        cfmlCode += \"httpService.setProxyServer(\" + repr(proxy) + \");\\n\";\n        cfmlCode += \"httpService.setProxyPort(\" + proxyPort.trim() + \");\\n\";\n        if (request.proxyAuth) {\n            const [proxyUser, proxyPassword] = request.proxyAuth.split(\":\", 2);\n            cfmlCode += \"httpService.setProxyUser(\" + repr(proxyUser) + \");\\n\";\n            cfmlCode +=\n                \"httpService.setProxyPassword(\" + repr(proxyPassword || \"\") + \");\\n\";\n        }\n    }\n    if (request.data || request.multipartUploads) {\n        if (request.multipartUploads) {\n            for (const m of request.multipartUploads) {\n                if (\"contentFile\" in m) {\n                    cfmlCode +=\n                        'httpService.addParam(type=\"file\", name=' +\n                            repr(m.name) +\n                            ', file=\"#expandPath(' +\n                            repr(m.contentFile) +\n                            ')#\");\\n';\n                }\n                else {\n                    cfmlCode +=\n                        'httpService.addParam(type=\"formfield\", name=' +\n                            repr(m.name) +\n                            \", value=\" +\n                            repr(m.content) +\n                            \");\\n\";\n                }\n            }\n        }\n        else if (!request.isDataRaw &&\n            request.data &&\n            request.data.charAt(0) === \"@\") {\n            cfmlCode +=\n                'httpService.addParam(type=\"body\", value=\"#' +\n                    (request.isDataBinary ? \"fileReadBinary\" : \"fileRead\") +\n                    \"(expandPath(\" +\n                    repr(request.data.toString().substring(1)) +\n                    '))#\");\\n';\n        }\n        else {\n            cfmlCode +=\n                'httpService.addParam(type=\"body\", value=' +\n                    repr(request.data) +\n                    \");\\n\";\n        }\n    }\n    cfmlCode += \"\\nresult = httpService.send().getPrefix();\\n\";\n    cfmlCode += \"writeDump(result);\\n\";\n    return cfmlCode;\n}\nexport function toCFMLWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const cfml = _toCFML(requests, warnings);\n    return [cfml, warnings];\n}\nexport function toCFML(curlCommand) {\n    return toCFMLWarn(curlCommand)[0];\n}\n//# sourceMappingURL=cfml.js.map","import { CCError } from \"../utils.js\";\nimport { Word, eq } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\n// \"Clojure strings are Java Strings.\"\n// https://clojure.org/reference/data_structures#Strings\nimport { reprStr } from \"./java/java.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    // \"http0.9\",\n    // \"http1.0\",\n    // \"http1.1\",\n    // \"no-http0.9\",\n    \"insecure\",\n    \"no-insecure\",\n    \"compressed\",\n    \"no-compressed\",\n    \"max-time\",\n    \"connect-timeout\",\n    \"max-redirs\",\n    \"location\",\n    \"no-location\",\n    \"location-trusted\",\n    \"no-location-trusted\",\n    // \"anyauth\",\n    // \"no-anyauth\",\n    \"digest\",\n    \"no-digest\",\n    // \"aws-sigv4\",\n    // \"negotiate\",\n    // \"no-negotiate\",\n    // \"delegation\", // GSS/kerberos\n    // \"service-name\", // GSS/kerberos\n    \"ntlm\",\n    \"no-ntlm\",\n    \"ntlm-wb\",\n    \"no-ntlm-wb\",\n    // \"upload-file\",\n    // \"output\",\n    // \"proxy\",\n    // \"proxy-user\",\n]);\nexport function repr(w, importLines) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            // (str) to return empty string if var missing\n            // TODO: is there a better way?\n            args.push(\"(str (System/getenv \" + reprStr(t.value) + \"))\");\n            // TODO: Seems to be unnecessary\n            // importLines.add(\"(import 'java.lang.System)\");\n        }\n        else {\n            importLines.add(\"(use '[clojure.java.shell :only [sh]])\");\n            args.push('(sh \"bash\" \"-c\" ' + reprStr(t.value) + \")\");\n        }\n    }\n    if (args.length > 1) {\n        // TODO: format on multiple lines if it's long enough?\n        return \"(str \" + args.join(\" \") + \")\";\n    }\n    return args[0];\n}\n// https://clojure.org/reference/reader#_symbols\n// https://clojure.org/reference/reader#_literals\nfunction safeAsKeyword(s) {\n    return /^[a-zA-Z_][a-zA-Z0-9*+!\\-_'?<>=]*$/.test(s);\n}\nfunction reprQueryDict(query, importLines) {\n    return (\"{\" +\n        query\n            .map((q) => {\n            const key = q[0].toString();\n            if (!q[0].isString() || !safeAsKeyword(key)) {\n                throw new CCError(\"can't use query key as Clojure keyword: \" + JSON.stringify(key));\n            }\n            return (\":\" +\n                key +\n                \" \" +\n                (Array.isArray(q[1])\n                    ? \"[\" + q[1].map((qq) => repr(qq, importLines)).join(\" \") + \"]\"\n                    : repr(q[1], importLines)));\n        })\n            .join(\"\\n \") +\n        \"}\");\n}\nfunction reprQueryList(query, importLines) {\n    // TODO: this is only necessary if there are repeated keys\n    return (\"[\" +\n        query\n            .map((q) => \"[\" + repr(q[0], importLines) + \" \" + repr(q[1], importLines) + \"]\")\n            .join(\"\\n \") +\n        \"]\");\n}\nfunction rerpQuery(queryList, queryDict, importLines) {\n    if (queryDict) {\n        try {\n            return reprQueryDict(queryDict, importLines);\n        }\n        catch (_a) { }\n    }\n    if (queryList) {\n        try {\n            return reprQueryList(queryList, importLines);\n        }\n        catch (_b) { }\n    }\n    return null;\n}\nfunction reprHeaders(headers, importLines) {\n    const lines = headers.headers\n        // Can't be null\n        .map(\n    // TODO: convert to keywords and lowercase known headers\n    // TODO: :content-type is a top-level key and changes how the body is interpreted\n    (h) => repr(h[0], importLines) + \" \" + repr(h[1], importLines));\n    return \"{\" + lines.join(\",\\n \") + \"}\";\n}\nfunction indent(s, indent) {\n    const withSpaces = \"\\n\" + \" \".repeat(indent);\n    return s.replace(/\\n/g, withSpaces);\n}\nfunction reprJson(obj, importLines) {\n    if (importLines && obj instanceof Word) {\n        return repr(obj, importLines);\n    }\n    switch (typeof obj) {\n        case \"string\":\n            return reprStr(obj);\n        case \"number\":\n            return obj.toString(); // TODO\n        case \"boolean\":\n            return obj ? \"true\" : \"false\";\n        case \"object\":\n            if (obj === null) {\n                return \"nil\";\n            }\n            if (Array.isArray(obj)) {\n                const objReprs = obj.map((o) => reprJson(o));\n                const totalLength = objReprs.reduce((a, b) => a + b.length, 0);\n                if (totalLength < 100) {\n                    return \"[\" + objReprs.join(\" \") + \"]\";\n                }\n                return \"[\" + indent(objReprs.join(\"\\n\"), 1) + \"]\";\n            }\n            else {\n                const objReprs = Object.entries(obj).map(([k, v]) => {\n                    if (!safeAsKeyword(k)) {\n                        throw new CCError(\"can't use JSON key as Clojure keyword: \" + JSON.stringify(k));\n                    }\n                    // TODO: indent logic is wrong?\n                    return \":\" + k + \" \" + indent(reprJson(v), 1 + k.length + 1);\n                });\n                const totalLength = objReprs.reduce((a, b) => a + b.length, 0);\n                if (totalLength < 100 && objReprs.every((o) => !o.includes(\"\\n\"))) {\n                    return \"{\" + objReprs.join(\" \") + \"}\";\n                }\n                return \"{\" + indent(objReprs.join(\"\\n\"), 1) + \"}\";\n            }\n        default:\n            throw new CCError(\"unexpect type in JSON: \" + typeof obj);\n    }\n}\nfunction addDataString(params, request, data, importLines) {\n    const contentType = request.headers.getContentType();\n    const exactContentType = request.headers.get(\"content-type\");\n    if (contentType === \"application/json\") {\n        const dataStr = data.toString();\n        const parsed = JSON.parse(dataStr);\n        // Only convert arrays and {} as Clojure objects\n        if (typeof parsed !== \"object\" || parsed === null) {\n            params[\"body\"] = repr(data, importLines);\n            return;\n        }\n        const roundtrips = JSON.stringify(parsed) === dataStr;\n        const jsonAsClojure = reprJson(parsed);\n        const originalAsStr = repr(data, importLines);\n        params[\"form-params\"] = jsonAsClojure;\n        importLines.add(\"(require '[cheshire.core :as json])\");\n        if (!roundtrips) {\n            params[\"commented-body\"] = originalAsStr; // commented-body is a special case\n        }\n        if (eq(exactContentType, \"application/json\")) {\n            request.headers.delete(\"content-type\");\n        }\n        // Put this line after the commented body so that the option map's closing }) isn't commented out\n        params[\"content-type\"] = \":json\";\n        if (eq(request.headers.get(\"accept\"), \"application/json\")) {\n            request.headers.delete(\"accept\");\n            params[\"accept\"] = \":json\";\n        }\n        return;\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        const [queryList, queryDict] = parseQueryString(data);\n        const formParams = rerpQuery(queryList, queryDict, importLines);\n        if (formParams !== null) {\n            if (eq(exactContentType, \"application/x-www-form-urlencoded\")) {\n                request.headers.delete(\"content-type\");\n            }\n            // TODO: check roundtrip, add a comment\n            params[\"form-params\"] = formParams;\n            return;\n        }\n    }\n    params[\"body\"] = repr(data, importLines);\n}\nfunction addData(params, request, data, importLines) {\n    if (data.length === 1 && data[0] instanceof Word && data[0].isString()) {\n        try {\n            return addDataString(params, request, data[0], importLines);\n        }\n        catch (_a) { }\n    }\n    const parts = [];\n    for (const d of data) {\n        if (d instanceof Word) {\n            parts.push(repr(d, importLines));\n        }\n        else {\n            const { filetype, name, filename } = d;\n            if (filetype === \"urlencode\" && name) {\n                // TODO: add this to the previous Word\n                parts.push(repr(name, importLines));\n            }\n            if (eq(filename, \"-\")) {\n                // TODO: does this work?\n                parts.push(\"(slurp *in*)\");\n            }\n            else {\n                parts.push(\"(clojure.java.io/file \" + repr(filename, importLines) + \")\");\n            }\n        }\n    }\n    if (parts.length === 1) {\n        params[\"body\"] = parts[0];\n    }\n    else {\n        // TODO: this probably doesn't work with files\n        // TODO: this needlessly nests str if there are variables/subcommands\n        params[\"body\"] = \"(str \" + parts.join(\" \") + \")\";\n    }\n}\nfunction reprMultipart(form, importLines, warnings) {\n    const parts = [];\n    for (const f of form) {\n        let part = \"{:name \" + repr(f.name, importLines);\n        if (\"content\" in f) {\n            part += \" :content \" + repr(f.content, importLines);\n        }\n        else {\n            part +=\n                \" :content (clojure.java.io/file \" +\n                    repr(f.contentFile, importLines) +\n                    \")\";\n            if (f.filename && !eq(f.filename, f.contentFile)) {\n                warnings.push([\n                    \"cant-fake-filename\",\n                    \"there's no way to send the filename \" +\n                        JSON.stringify(f.filename.toString()) +\n                        \" instead of \" +\n                        JSON.stringify(f.contentFile.toString()),\n                ]);\n            }\n        }\n        parts.push(part + \"}\");\n    }\n    return \"[\" + parts.join(\"\\n \") + \"]\";\n}\nexport function _toClojure(requests, warnings = []) {\n    const request = getFirst(requests, warnings, { dataReadsFile: true });\n    // TODO: merge require statements\n    const importLines = new Set([\n        \"(require '[clj-http.client :as client])\",\n    ]);\n    const methods = new Set([\n        \"GET\",\n        \"HEAD\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",\n        \"OPTIONS\",\n        \"COPY\",\n        \"MOVE\",\n        \"PATCH\",\n    ]);\n    const dataMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    const params = {};\n    let fn;\n    if (method.isString() && methods.has(methodStr)) {\n        fn = \"client/\" + methodStr.toLowerCase();\n    }\n    else {\n        // TODO: do all the other params still work?\n        fn = \"client/request\";\n        params[\"url\"] = \"\"; // placeholder so that it comes first\n        params[\"method\"] = repr(method, importLines);\n    }\n    let url = request.urls[0].url; // TODO: .urlWithOriginalQuery?\n    try {\n        const queryParams = rerpQuery(request.urls[0].queryList, request.urls[0].queryDict, importLines);\n        if (queryParams) {\n            params[\"query-params\"] = queryParams;\n            url = request.urls[0].urlWithoutQueryList;\n        }\n    }\n    catch (_a) { }\n    // addData() can delete headers, but to put them before the body we add a placeholder here\n    params[\"headers\"] = \"\";\n    if (request.urls[0].auth) {\n        const [user, pass] = request.urls[0].auth;\n        const authParam = {\n            basic: \"basic-auth\",\n            digest: \"digest-auth\",\n            // TODO: should be [\"user\" \"pass\" \"host\" \"domain\"]\n            // TODO: warn\n            ntlm: \"ntlm-auth\",\n            \"ntlm-wb\": \"ntlm-auth\",\n            // TODO: error\n            negotiate: \"basic-auth\",\n            bearer: \"basic-auth\",\n            \"aws-sigv4\": \"basic-auth\",\n            none: \"basic-auth\",\n        }[request.authType];\n        params[authParam] =\n            \"[\" + repr(user, importLines) + \" \" + repr(pass, importLines) + \"]\";\n    }\n    if (request.multipartUploads) {\n        params[\"multipart\"] = reprMultipart(request.multipartUploads, importLines, warnings);\n        // TODO: above warning probably also applies here\n    }\n    else if (request.dataArray && request.data) {\n        // Can delete headers\n        addData(params, request, request.dataArray, importLines);\n        if (!dataMethods.has(methodStr)) {\n            warnings.push([\n                \"data-not-posted\",\n                \"clj-http doesn't send data with \" + methodStr + \" requests\",\n            ]);\n        }\n    }\n    if (request.headers.length) {\n        // TODO: clojure http supports duplicate headers, they don't need to be merged\n        params[\"headers\"] = reprHeaders(request.headers, importLines);\n    }\n    else {\n        delete params[\"headers\"];\n    }\n    if (request.compressed === false) {\n        params[\":decompress-body\"] = \"false\";\n    }\n    if (request.insecure) {\n        params[\"insecure?\"] = \"true\";\n    }\n    if (request.followRedirects === false) {\n        params[\"redirect-strategy\"] = \":none\";\n    }\n    else if (request.followRedirects) {\n        if (request.followRedirectsTrusted) {\n            // TODO: is this right? Docs link 404's\n            params[\"redirect-strategy\"] = \":lax\";\n        }\n    }\n    if (request.maxRedirects) {\n        params[\"max-redirects\"] = request.maxRedirects.toString();\n    }\n    const times1000 = (n, importLines) => {\n        if (n.isString()) {\n            // TODO: this throws away text after the number\n            const asFloat = parseFloat(n.toString());\n            if (!isNaN(asFloat)) {\n                return (asFloat * 1000).toString();\n            }\n        }\n        return \"(* (Float/parseFloat \" + repr(n, importLines) + \") 1000)\";\n    };\n    if (request.timeout) {\n        const timeout = times1000(request.timeout, importLines);\n        params[\"socket-timeout\"] = timeout;\n        params[\"connection-timeout\"] = timeout;\n    }\n    if (request.connectTimeout) {\n        params[\"connection-timeout\"] = times1000(request.connectTimeout, importLines);\n    }\n    let code = \"(\" + fn;\n    if (fn === \"client/request\") {\n        params[\"url\"] = repr(url, importLines);\n    }\n    else {\n        code += \" \" + repr(url, importLines);\n    }\n    const paramLines = [];\n    let param, value;\n    for ([param, value] of Object.entries(params)) {\n        let commentOut = false;\n        if (param === \"commented-body\") {\n            commentOut = true;\n            param = \"body\";\n        }\n        const key = \":\" + param + \" \";\n        let paramStr = key + indent(value, key.length);\n        if (commentOut) {\n            paramStr = paramStr.replace(/^/gm, \";; \");\n        }\n        paramLines.push(paramStr);\n    }\n    if (paramLines.length) {\n        let paramStart = code.length + 1;\n        if (code.length > 70) {\n            paramStart = 1 + fn.length + 1;\n            code += \"\\n\" + \" \".repeat(paramStart);\n        }\n        else {\n            code += \" \";\n        }\n        // +1 for the outer \"{\"\n        code += indent(\"{\" + paramLines.join(\"\\n\") + \"}\", paramStart + 1);\n    }\n    return [...importLines].sort().join(\"\\n\") + \"\\n\\n\" + code + \")\\n\";\n}\nexport function toClojureWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const clojure = _toClojure(requests, warnings);\n    return [clojure, warnings];\n}\nexport function toClojure(curlCommand) {\n    return toClojureWarn(curlCommand)[0];\n}\n//# sourceMappingURL=clojure.js.map","import { has, isInt } from \"../utils.js\";\nimport { eq, joinWords } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"compressed\",\n    \"form\",\n    \"form-string\",\n    \"http0.9\",\n    \"http1.0\",\n    \"http1.1\",\n    \"insecure\",\n    \"no-compressed\",\n    \"no-digest\",\n    \"no-http0.9\",\n    \"no-insecure\",\n    \"proxy\",\n    \"upload-file\",\n    // \"output\",\n    // \"proxy-user\",\n]);\n// https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/\nconst regexEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c) => {\n            switch (c) {\n                case \"\\x00\":\n                    return \"\\\\0\";\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            if (c.length === 2) {\n                const first = c.charCodeAt(0);\n                const second = c.charCodeAt(1);\n                return (\"\\\\u\" +\n                    first.toString(16).padStart(4, \"0\") +\n                    \"\\\\u\" +\n                    second.toString(16).padStart(4, \"0\"));\n            }\n            const hex = c.charCodeAt(0).toString(16);\n            if (hex.length <= 4) {\n                return \"\\\\u\" + hex.padStart(4, \"0\");\n            }\n            // Shouldn't happen\n            return \"\\\\U\" + hex.padStart(8, \"0\");\n        }) +\n        '\"');\n}\nexport function repr(w, imports) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"Environment.GetEnvironmentVariable(\" + reprStr(t.value) + \")\");\n            imports.add(\"System\");\n        }\n        else {\n            // TODO: this needs to be two arguments the command name + list of args\n            args.push(\"System.Diagnostics.Process.Start(\" + reprStr(t.value) + \")\");\n            imports.add(\"System.Diagnostics\");\n        }\n    }\n    return args.join(\" + \");\n}\nexport function _toCSharp(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const imports = new Set([\"System.Net.Http\"]);\n    const methods = {\n        DELETE: \"Delete\",\n        GET: \"Get\",\n        PATCH: \"Patch\",\n        POST: \"Post\",\n        PUT: \"Put\",\n    };\n    const moreMethods = {\n        DELETE: \"Delete\",\n        GET: \"Get\",\n        HEAD: \"Head\",\n        OPTIONS: \"Options\",\n        PATCH: \"Patch\",\n        POST: \"Post\",\n        PUT: \"Put\",\n        TRACE: \"Trace\",\n    };\n    const method = request.urls[0].method.toString();\n    let methodStr = \"new HttpMethod(\" + repr(request.urls[0].method, imports) + \")\";\n    if (has(moreMethods, method)) {\n        methodStr = \"HttpMethod.\" + moreMethods[method];\n    }\n    const simple = has(methods, method) &&\n        !(request.headers.length ||\n            (request.urls[0].auth && request.authType === \"basic\") ||\n            request.multipartUploads ||\n            request.data ||\n            request.urls[0].uploadFile ||\n            request.urls[0].output);\n    let s = \"\";\n    if (request.insecure || request.proxy || request.compressed) {\n        s += \"HttpClientHandler handler = new HttpClientHandler();\\n\";\n        if (request.insecure) {\n            s +=\n                \"handler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;\\n\";\n        }\n        if (request.proxy) {\n            // TODO: probably need to parse the value a bit\n            // TODO: , true) ?\n            s +=\n                \"handler.Proxy = new WebProxy(\" + repr(request.proxy, imports) + \");\\n\";\n        }\n        if (request.compressed) {\n            s += \"handler.AutomaticDecompression = DecompressionMethods.All;\\n\";\n        }\n        s += \"\\n\";\n        s += \"HttpClient client = new HttpClient(handler);\\n\\n\";\n    }\n    else {\n        s += \"HttpClient client = new HttpClient();\\n\\n\";\n    }\n    if (simple) {\n        if (method === \"GET\") {\n            s +=\n                \"string responseBody = await client.GetStringAsync(\" +\n                    repr(request.urls[0].url, imports) +\n                    \");\\n\";\n        }\n        else {\n            s +=\n                \"HttpResponseMessage response = await client.\" +\n                    methods[method] +\n                    \"Async(\" +\n                    repr(request.urls[0].url, imports) +\n                    \");\\n\";\n            s += \"response.EnsureSuccessStatusCode();\\n\";\n            s +=\n                \"string responseBody = await response.Content.ReadAsStringAsync();\\n\";\n        }\n        return s;\n    }\n    s +=\n        \"HttpRequestMessage request = new HttpRequestMessage(\" +\n            methodStr +\n            \", \" +\n            repr(request.urls[0].url, imports) +\n            \");\\n\";\n    // https://docs.microsoft.com/en-us/dotnet/api/system.net.http.headers.httpcontentheaders\n    const contentHeaders = {\n        \"content-length\": \"ContentLength\",\n        \"content-location\": \"ContentLocation\",\n        \"content-md5\": \"ContentMD5\",\n        \"content-range\": \"ContentRange\",\n        \"content-type\": \"ContentType\",\n        expires: \"Expires\",\n        \"last-modified\": \"LastModified\",\n    };\n    const reqHeaders = request.headers.headers.filter((h) => !Object.keys(contentHeaders).includes(h[0].toLowerCase().toString()));\n    const reqContentHeaders = request.headers.headers.filter((h) => Object.keys(contentHeaders).includes(h[0].toLowerCase().toString()));\n    if (reqHeaders.length ||\n        (request.urls[0].auth && request.authType === \"basic\")) {\n        s += \"\\n\";\n        for (const [headerName, headerValue] of reqHeaders) {\n            if (headerValue === null) {\n                continue;\n            }\n            if ([\"accept-encoding\"].includes(headerName.toLowerCase().toString())) {\n                s += \"// \";\n            }\n            s +=\n                \"request.Headers.Add(\" +\n                    repr(headerName, imports) +\n                    \", \" +\n                    repr(headerValue, imports) +\n                    \");\\n\";\n        }\n        if (request.urls[0].auth && request.authType === \"basic\") {\n            // TODO: add request.rawAuth?\n            s +=\n                'request.Headers.Add(\"Authorization\", \"Basic \" + Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(' +\n                    repr(joinWords(request.urls[0].auth, \":\"), imports) +\n                    \")));\\n\";\n        }\n        s += \"\\n\";\n    }\n    if (request.urls[0].uploadFile) {\n        s +=\n            \"request.Content = new ByteArrayContent(File.ReadAllBytes(\" +\n                repr(request.urls[0].uploadFile, imports) +\n                \"));\\n\";\n    }\n    else if (request.multipartUploads) {\n        s += \"\\n\";\n        // TODO: get boundary from header\n        s += \"MultipartFormDataContent content = new MultipartFormDataContent();\\n\";\n        for (const m of request.multipartUploads) {\n            // MultipartRequest syntax looks like this:\n            //   content.Add(HttpContent(content), name, filename);\n            // TODO: wrap name in extra \"\" to match curl?\n            const name = repr(m.name, imports); // TODO: what if name is empty string?\n            const sentFilename = \"filename\" in m && m.filename;\n            s += \"content.Add(new \";\n            if (\"contentFile\" in m) {\n                if (eq(m.contentFile, \"-\")) {\n                    if (request.stdinFile) {\n                        s +=\n                            \"ByteArrayContent(File.ReadAllBytes(\" +\n                                repr(request.stdinFile, imports) +\n                                \")), \" +\n                                name;\n                        if (sentFilename) {\n                            s += \", Path.GetFileName(\" + repr(sentFilename, imports) + \")\";\n                        }\n                        s += \");\\n\";\n                    }\n                    else if (request.stdin) {\n                        s += \"StringContent(\" + repr(request.stdin, imports) + \"), \" + name;\n                        if (sentFilename) {\n                            s += \", Path.GetFileName(\" + repr(sentFilename, imports) + \")\";\n                        }\n                        s += \");\\n\";\n                    }\n                    else {\n                        // TODO: read entire stdin\n                        s += \"StringContent(Console.ReadLine()), \" + name;\n                        if (sentFilename) {\n                            s += \", Path.GetFileName(\" + repr(sentFilename, imports) + \")\";\n                        }\n                        s += \");\\n\";\n                    }\n                }\n                else {\n                    s +=\n                        \"ByteArrayContent(File.ReadAllBytes(\" +\n                            repr(m.contentFile, imports) +\n                            \")), \" +\n                            name;\n                    if (sentFilename) {\n                        s += \", Path.GetFileName(\" + repr(sentFilename, imports) + \")\";\n                    }\n                    s += \");\\n\";\n                }\n            }\n            else {\n                s +=\n                    \"StringContent(\" + repr(m.content, imports) + \"), \" + name + \");\\n\";\n            }\n        }\n        s += \"request.Content = content;\\n\";\n    }\n    else if (request.data) {\n        // TODO: parse\n        if (!request.isDataRaw && request.data.startsWith(\"@\")) {\n            // TODO: stdin\n            s +=\n                \"request.Content = new StringContent(File.ReadAllText(\" +\n                    repr(request.data.slice(1), imports) +\n                    ').Replace(\"\\\\n\", string.Empty).Replace(\"\\\\r\", string.Empty));\\n';\n        }\n        else {\n            s +=\n                \"request.Content = new StringContent(\" +\n                    repr(request.data, imports) +\n                    \");\\n\";\n        }\n    }\n    else if (request.headers.has(\"content-type\")) {\n        // This needs to be at the end.\n        // If the request has no content, you can't set the content-type\n        s += 'request.Content = new StringContent(\"\");\\n';\n    }\n    if (reqContentHeaders.length) {\n        for (const [headerName, headerValue] of reqContentHeaders) {\n            if (headerValue === null) {\n                continue;\n            }\n            const headerNameLower = headerName.toLowerCase().toString();\n            if (headerNameLower === \"content-type\") {\n                imports.add(\"System.Net.Http.Headers\");\n                if (headerValue.includes(\";\")) {\n                    s +=\n                        \"request.Content.Headers.ContentType = MediaTypeHeaderValue.Parse(\" +\n                            repr(headerValue, imports) +\n                            \");\\n\";\n                }\n                else {\n                    s +=\n                        \"request.Content.Headers.ContentType = new MediaTypeHeaderValue(\" +\n                            repr(headerValue, imports) +\n                            \");\\n\";\n                }\n            }\n            else if (headerNameLower === \"content-length\") {\n                if (headerValue.isString() && !isInt(headerValue.toString())) {\n                    warnings.push([\n                        \"content-length-not-int\",\n                        \"Content-Length header value is not a number: \" +\n                            repr(headerValue, imports),\n                    ]);\n                }\n                s +=\n                    \"// request.Content.Headers.ContentLength = \" +\n                        headerValue.split(\"\\n\")[0].toString() + // TODO: might have variable\n                        \";\\n\";\n            }\n            else if (has(contentHeaders, headerNameLower)) {\n                // placate type checker\n                // TODO: none of these are actually strings.\n                s +=\n                    \"request.Content.Headers.\" +\n                        contentHeaders[headerNameLower] +\n                        \" = \" +\n                        repr(headerValue, imports) +\n                        \";\\n\";\n            }\n        }\n    }\n    if (request.urls[0].uploadFile ||\n        request.data ||\n        request.multipartUploads ||\n        reqContentHeaders.length) {\n        s += \"\\n\";\n    }\n    s += \"HttpResponseMessage response = await client.SendAsync(request);\\n\";\n    s += \"response.EnsureSuccessStatusCode();\\n\";\n    s += \"string responseBody = await response.Content.ReadAsStringAsync();\\n\";\n    if (imports.size) {\n        s = \"using \" + [...imports].sort().join(\";\\nusing \") + \";\\n\\n\" + s;\n    }\n    return s;\n}\nexport function toCSharpWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const cSharp = _toCSharp(requests, warnings);\n    return [cSharp, warnings];\n}\nexport function toCSharp(curlCommand) {\n    return toCSharpWarn(curlCommand)[0];\n}\n//# sourceMappingURL=csharp.js.map","import { Word, eq } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\nimport { esc as jsesc } from \"./javascript/javascript.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"compressed\",\n    \"form\",\n    \"form-string\",\n    \"no-compressed\",\n]);\nfunction escape(value, quote) {\n    // Escape Dart's $string interpolation syntax\n    // TODO: does Dart have the same escape sequences as JS?\n    return jsesc(value, quote).replace(/\\$/g, \"\\\\$\");\n}\nfunction reprStr(value) {\n    const quote = value.includes(\"'\") && !value.includes('\"') ? '\"' : \"'\";\n    return quote + escape(value, quote) + quote;\n}\nfunction repr(value, imports) {\n    const ret = [];\n    for (const t of value.tokens) {\n        if (typeof t === \"string\") {\n            ret.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            ret.push(\"(Platform.environment[\" + reprStr(t.value) + \"] ?? '')\");\n            imports.add(\"dart:io\");\n        }\n        else {\n            ret.push(\"(await Process.run(\" +\n                reprStr(t.value) +\n                \", runInShell: true)).stdout\");\n            imports.add(\"dart:io\");\n        }\n    }\n    return ret.join(\" + \");\n}\nfunction reprWords(value, imports) {\n    if (value instanceof Word)\n        return repr(value, imports);\n    const ret = [];\n    for (const v of value) {\n        ret.push(repr(v, imports));\n    }\n    return \"[\" + ret.join(\", \") + \"]\";\n}\nexport function _toDart(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const imports = new Set();\n    if (request.urls[0].auth || request.isDataBinary)\n        imports.add(\"dart:convert\");\n    let s = \"void main() async {\\n\";\n    if (request.urls[0].auth) {\n        const [uname, pword] = request.urls[0].auth;\n        s +=\n            \"  final uname = \" +\n                repr(uname, imports) +\n                \";\\n\" +\n                \"  final pword = \" +\n                repr(pword, imports) +\n                \";\\n\" +\n                \"  final authn = 'Basic ${base64Encode(utf8.encode('$uname:$pword'))}';\\n\" +\n                \"\\n\";\n    }\n    const methods = [\"HEAD\", \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"];\n    const rawRequestObj = request.multipartUploads ||\n        !methods.includes(request.urls[0].method.toString());\n    const hasHeaders = request.headers.length ||\n        request.compressed ||\n        request.isDataBinary ||\n        request.urls[0].method.toLowerCase().toString() === \"put\";\n    if (hasHeaders && !rawRequestObj) {\n        s += \"  final headers = {\\n\";\n        for (const [hname, hval] of request.headers) {\n            s +=\n                \"    \" +\n                    repr(hname, imports) +\n                    \": \" +\n                    repr(hval !== null && hval !== void 0 ? hval : new Word(), imports) +\n                    \",\\n\";\n        }\n        if (request.urls[0].auth)\n            s += \"    'Authorization': authn,\\n\";\n        // TODO: headers might already have Accept-Encoding\n        if (request.compressed)\n            s += \"    'Accept-Encoding': 'gzip',\\n\";\n        s += \"  };\\n\";\n        s += \"\\n\";\n    }\n    if (request.urls[0].queryDict) {\n        s += \"  final params = {\\n\";\n        for (const [paramName, rawValue] of request.urls[0].queryDict) {\n            s +=\n                \"    \" +\n                    repr(paramName, imports) +\n                    \": \" +\n                    reprWords(rawValue, imports) +\n                    \",\\n\";\n        }\n        s += \"  };\\n\";\n        s += \"\\n\";\n    }\n    const hasData = request.data && !request.multipartUploads;\n    if (hasData && request.data) {\n        const [parsedQuery] = parseQueryString(request.data);\n        if (parsedQuery && parsedQuery.length) {\n            s += \"  final data = {\\n\";\n            for (const param of parsedQuery) {\n                const [key, val] = param;\n                s += \"    \" + repr(key, imports) + \": \" + repr(val, imports) + \",\\n\";\n            }\n            s += \"  };\\n\";\n            s += \"\\n\";\n        }\n        else {\n            s += `  final data = ${repr(request.data, imports)};\\n\\n`;\n        }\n    }\n    if (request.urls[0].queryDict) {\n        const urlString = repr(request.urls[0].urlWithoutQueryList, imports);\n        s +=\n            \"  final url = Uri.parse(\" +\n                urlString +\n                \")\\n\" +\n                \"      .replace(queryParameters: params);\\n\";\n    }\n    else {\n        s +=\n            \"  final url = Uri.parse(\" + repr(request.urls[0].url, imports) + \");\\n\";\n    }\n    s += \"\\n\";\n    if (rawRequestObj) {\n        let multipart = \"http.\";\n        if (request.multipartUploads) {\n            multipart += \"MultipartRequest\";\n        }\n        else {\n            multipart += \"Request\";\n        }\n        multipart += \"(\" + repr(request.urls[0].method, imports) + \", url)\";\n        for (const m of request.multipartUploads || []) {\n            // MultipartRequest syntax looks like this:\n            //   ..fields['user'] = 'nweiz@google.com'\n            // or\n            // ..files.add(await http.MultipartFile.fromPath(\n            //   'package', 'build/package.tar.gz',\n            //   contentType: MediaType('application', 'x-tar')))\n            const name = repr(m.name, imports); // TODO: what if name is empty string?\n            const sentFilename = \"filename\" in m && m.filename;\n            if (\"contentFile\" in m) {\n                multipart += \"\\n    ..files.add(await http.MultipartFile.\";\n                if (eq(m.contentFile, \"-\")) {\n                    if (request.stdinFile) {\n                        multipart += \"fromPath(\\n\";\n                        multipart +=\n                            \"      \" + name + \", \" + repr(request.stdinFile, imports);\n                        if (sentFilename && request.stdinFile !== sentFilename) {\n                            multipart += \",\\n\";\n                            multipart += \"      filename: \" + repr(sentFilename, imports);\n                        }\n                        multipart += \"))\";\n                    }\n                    else if (request.stdin) {\n                        multipart += \"fromString(\\n\";\n                        multipart += \"      \" + name + \", \" + repr(request.stdin, imports);\n                        if (sentFilename) {\n                            multipart += \",\\n\";\n                            multipart += \"      filename: \" + repr(sentFilename, imports);\n                        }\n                        multipart += \"))\";\n                    }\n                    else {\n                        multipart += \"fromString(\\n\";\n                        // TODO: read the entire thing, not one line.\n                        multipart +=\n                            \"      \" + name + \", stdin.readLineSync(encoding: utf8)\";\n                        if (sentFilename) {\n                            multipart += \",\\n\";\n                            multipart += \"      filename: \" + repr(sentFilename, imports);\n                        }\n                        multipart += \"))\";\n                        imports.add(\"dart:io\");\n                        imports.add(\"dart:convert\");\n                    }\n                }\n                else {\n                    multipart += \"fromPath(\\n\";\n                    multipart += \"      \" + name + \", \" + repr(m.contentFile, imports);\n                    if (sentFilename && m.contentFile !== sentFilename) {\n                        multipart += \",\\n\";\n                        multipart += \"      filename: \" + repr(sentFilename, imports);\n                    }\n                    multipart += \"))\";\n                }\n            }\n            else {\n                multipart +=\n                    \"\\n    ..fields[\" + name + \"] = \" + repr(m.content, imports);\n            }\n        }\n        multipart += \";\\n\\n\";\n        if (hasHeaders || request.urls[0].auth) {\n            s += \"  final req = \" + multipart;\n            if (request.headers.length) {\n                for (const [hname, hval] of request.headers) {\n                    s +=\n                        \"  req.headers[\" +\n                            repr(hname, imports) +\n                            \"] = \" +\n                            repr(hval || new Word(), imports) +\n                            \";\\n\";\n                }\n                s += \"\\n\";\n            }\n            if (request.urls[0].auth) {\n                s += \"  req.headers['Authorization'] = authn;\\n\";\n                s += \"\\n\";\n            }\n            s += \"  final stream = await req.send();\\n\";\n            s += \"  final res = await http.Response.fromStream(stream);\\n\";\n        }\n        else {\n            s += \"  final req = \" + multipart;\n            s += \"  final stream = await req.send();\\n\";\n            s += \"  final res = await http.Response.fromStream(stream);\\n\";\n        }\n        s +=\n            \"  final status = res.statusCode;\\n\" +\n                \"  if (status != 200) throw Exception('http.send\" +\n                \" error: statusCode= $status');\\n\" +\n                \"\\n\" +\n                \"  print(res.body);\\n\" +\n                \"}\";\n    }\n    else {\n        s +=\n            \"  final res = await http.\" +\n                request.urls[0].method.toLowerCase().toString() +\n                \"(url\";\n        if (hasHeaders)\n            s += \", headers: headers\";\n        else if (request.urls[0].auth)\n            s += \", headers: {'Authorization': authn}\";\n        if (hasData)\n            s += \", body: data\";\n        s += \");\\n\";\n        s +=\n            \"  final status = res.statusCode;\\n\" +\n                \"  if (status != 200) throw Exception('http.\" +\n                request.urls[0].method.toLowerCase().toString() +\n                \" error: statusCode= $status');\\n\" +\n                \"\\n\" +\n                \"  print(res.body);\\n\" +\n                \"}\";\n    }\n    let importString = \"\";\n    for (const imp of Array.from(imports).sort()) {\n        importString += \"import '\" + imp + \"';\\n\";\n    }\n    importString += \"import 'package:http/http.dart' as http;\\n\";\n    return importString + \"\\n\" + s + \"\\n\";\n}\nexport function toDartWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const dart = _toDart(requests, warnings);\n    return [dart, warnings];\n}\nexport function toDart(curlCommand) {\n    return toDartWarn(curlCommand)[0];\n}\n//# sourceMappingURL=dart.js.map","import { warnIfPartsIgnored } from \"../Warnings.js\";\nimport { Word, joinWords } from \"../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"insecure\",\n    \"no-insecure\",\n    \"next\",\n]);\nconst regexEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]|#\\{/gu;\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c) => {\n            switch (c[0]) {\n                case \"\\x00\":\n                    return \"\\\\0\";\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case \"\\x1B\":\n                    return \"\\\\e\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case '\"':\n                    return '\\\\\"';\n                case \"#\":\n                    return \"\\\\\" + c;\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 4) {\n                return \"\\\\u\" + hex.padStart(4, \"0\");\n            }\n            return \"\\\\u{\" + hex + \"}\";\n        }) +\n        '\"');\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"System.get_env(\" + reprStr(t.value) + ', \"\")');\n        }\n        else {\n            // TODO: strip newline?\n            // TODO: use System.cmd(), which needs to be two arguments the command name + list of args\n            args.push(\"elem(System.shell(\" + reprStr(t.value) + \"), 0)\");\n        }\n    }\n    return args.join(\" <> \");\n}\nfunction addIndent(value) {\n    // split on new lines and add 2 spaces of indentation to each line, except empty lines\n    return value\n        .split(\"\\n\")\n        .map((line) => (line ? \"  \" + line : line))\n        .join(\"\\n\");\n}\nfunction getCookies(request) {\n    if (!request.cookies || !request.cookies.length) {\n        return \"\";\n    }\n    // TODO: this duplicates work, just get it from request.headers\n    const cookies = joinWords(request.cookies.map((c) => joinWords(c, \"=\")), \"; \");\n    return `cookie: [${repr(cookies)}]`;\n}\nfunction getOptions(request, params) {\n    const hackneyOptions = [];\n    const auth = getBasicAuth(request);\n    if (auth) {\n        hackneyOptions.push(auth);\n    }\n    if (request.insecure) {\n        hackneyOptions.push(\":insecure\");\n    }\n    const cookies = getCookies(request);\n    if (cookies) {\n        hackneyOptions.push(cookies);\n    }\n    let hackneyOptionsString = \"\";\n    if (hackneyOptions.length > 1) {\n        hackneyOptionsString = `hackney: [\\n    ${hackneyOptions.join(\",\\n    \")}\\n  ]`;\n    }\n    else if (hackneyOptions.length) {\n        hackneyOptionsString = `hackney: [${hackneyOptions[0]}]`;\n    }\n    const optionsWithoutParams = `[${hackneyOptionsString}]`;\n    let options = optionsWithoutParams;\n    if (params !== \"[]\") {\n        options = \"\";\n        options += \"[\\n\";\n        options += \"    params: \" + addIndent(params).trim();\n        if (hackneyOptionsString) {\n            options += \",\\n\";\n            options += \"    \" + addIndent(hackneyOptionsString).trim();\n        }\n        options += \"\\n\";\n        options += \"  ]\";\n    }\n    return [options, optionsWithoutParams];\n}\nfunction getBasicAuth(request) {\n    if (!request.urls[0].auth) {\n        return \"\";\n    }\n    const [user, password] = request.urls[0].auth;\n    return `basic_auth: {${repr(user)}, ${repr(password)}}`;\n}\nfunction getQueryDict(request) {\n    if (!request.urls[0].queryList || !request.urls[0].queryList.length) {\n        return \"[]\";\n    }\n    let queryDict = \"[\\n\";\n    const queryDictLines = [];\n    for (const [paramName, rawValue] of request.urls[0].queryList) {\n        queryDictLines.push(`    {${repr(paramName)}, ${repr(rawValue)}}`);\n    }\n    queryDict += queryDictLines.join(\",\\n\");\n    queryDict += \"\\n  ]\";\n    return queryDict;\n}\nfunction getHeadersDict(request) {\n    if (!request.headers.length) {\n        return \"[]\";\n    }\n    let dict = \"[\\n\";\n    const dictLines = [];\n    for (const [headerName, headerValue] of request.headers) {\n        dictLines.push(`    {${repr(headerName)}, ${repr(headerValue !== null && headerValue !== void 0 ? headerValue : new Word())}}`);\n    }\n    dict += dictLines.join(\",\\n\");\n    dict += \"\\n  ]\";\n    return dict;\n}\nfunction getBody(request) {\n    const formData = getFormDataString(request);\n    return formData ? formData : '\"\"';\n}\nfunction getFormDataString(request) {\n    var _a;\n    if (request.multipartUploads) {\n        if (!request.multipartUploads.length) {\n            return `{:multipart, []}`;\n        }\n        const formParams = [];\n        for (const m of request.multipartUploads) {\n            if (\"contentFile\" in m) {\n                formParams.push(`    {:file, ${repr(m.contentFile)}, {\"form-data\", [{:name, ${repr(m.name)}}, {:filename, Path.basename(${repr((_a = m.filename) !== null && _a !== void 0 ? _a : m.contentFile)})}]}, []}`);\n            }\n            else {\n                formParams.push(`    {${repr(m.name)}, ${repr(m.content)}}`);\n            }\n        }\n        const formStr = formParams.join(\",\\n\");\n        if (formStr) {\n            return `{:multipart, [\n${formStr}\n  ]}`;\n        }\n    }\n    if (request.data) {\n        return getDataString(request);\n    }\n    return \"\";\n}\nfunction getDataString(request) {\n    if (!request.data) {\n        return \"\";\n    }\n    // TODO: JSON with Poison\n    if (!request.isDataRaw && request.data.startsWith(\"@\")) {\n        const filePath = request.data.slice(1);\n        if (request.isDataBinary) {\n            return `File.read!(${repr(filePath)})`;\n        }\n        else {\n            return `{:file, ${repr(filePath)}}`;\n        }\n    }\n    const [parsedQuery] = parseQueryString(request.data);\n    if (parsedQuery && parsedQuery.length) {\n        const data = parsedQuery.map((p) => {\n            const [key, value] = p;\n            return `    {${repr(key)}, ${repr(value)}}`;\n        });\n        return `{:form, [\\n${data.join(\",\\n\")}\\n  ]}`;\n    }\n    if (request.data.isString() &&\n        !request.data.includes(\"|\") &&\n        request.data.split(\"\\n\", 4).length > 3 &&\n        // No trailing whitespace, except possibly on the last line\n        !request.data.match(/[^\\S\\r\\n]\\n/)) {\n        return \"~s|\" + request.data.toString() + \"|\";\n    }\n    return repr(request.data);\n}\nfunction requestToElixir(request, warnings = []) {\n    warnIfPartsIgnored(request, warnings);\n    if (request.cookies) {\n        request.headers.delete(\"cookie\");\n    }\n    // delete!(url, headers \\\\ [], options \\\\ [])\n    // get!(url, headers \\\\ [], options \\\\ [])\n    // head!(url, headers \\\\ [], options \\\\ [])\n    // options!(url, headers \\\\ [], options \\\\ [])\n    // patch!(url, body, headers \\\\ [], options \\\\ [])\n    // post!(url, body, headers \\\\ [], options \\\\ [])\n    // put!(url, body \\\\ \"\", headers \\\\ [], options \\\\ [])\n    const methods = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"];\n    const bodyMethods = [\"PATCH\", \"POST\", \"PUT\"];\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    if (!methods.includes(methodStr)) {\n        warnings.push([\n            \"bad-method\",\n            \"Unsupported method \" + JSON.stringify(methodStr),\n        ]);\n    }\n    const isBodyMethod = bodyMethods.includes(methodStr);\n    const body = getBody(request);\n    const headers = getHeadersDict(request);\n    const params = getQueryDict(request);\n    // params can go in the options argument, but if we're using the full\n    // form, put them as a separate argument.\n    const [options, optionsWithoutParams] = getOptions(request, params);\n    if (isBodyMethod || (body === '\"\"' && methods.includes(methodStr))) {\n        // Add args backwards. As soon as we see a non-default value, we have to\n        // add all preceding arguments.\n        let args = [];\n        let keepArgs = false;\n        keepArgs || (keepArgs = options !== \"[]\");\n        if (keepArgs) {\n            args.push(options);\n        }\n        keepArgs || (keepArgs = headers !== \"[]\");\n        if (keepArgs) {\n            args.push(headers);\n        }\n        keepArgs || (keepArgs = body !== '\"\"');\n        if (keepArgs && isBodyMethod) {\n            args.push(body);\n        }\n        args.push(repr(request.urls[0].urlWithoutQueryList));\n        args = args.reverse();\n        let s = \"response = HTTPoison.\" + methodStr.toLowerCase() + \"!(\";\n        if (args.length === 1) {\n            // If we just need the method+URL, keep it all on one line\n            s += args[0];\n        }\n        else {\n            s += \"\\n\";\n            s += \"  \" + args.join(\",\\n  \");\n            s += \"\\n\";\n        }\n        return s + \")\\n\";\n    }\n    return `request = %HTTPoison.Request{\n  method: :${method.toLowerCase().toString()},\n  url: ${repr(request.urls[0].urlWithoutQueryList)},\n  body: ${body},\n  headers: ${headers},\n  options: ${optionsWithoutParams},\n  params: ${params}\n}\n\nresponse = HTTPoison.request(request)\n`;\n}\nexport function _toElixir(requests, warnings = []) {\n    return requests.map((r) => requestToElixir(r, warnings)).join(\"\\n\");\n}\nexport function toElixirWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const elixir = _toElixir(requests, warnings);\n    return [elixir, warnings];\n}\nexport function toElixir(curlCommand) {\n    return toElixirWarn(curlCommand)[0];\n}\n//# sourceMappingURL=elixir.js.map","import { CCError } from \"../utils.js\";\nimport { Word } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { reprStr as pyreprStr } from \"./python/python.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"insecure\",\n    \"no-insecure\",\n    \"compressed\",\n    \"no-compressed\",\n    \"max-time\",\n    \"form\",\n    \"form-string\",\n]);\nconst IF_ERR = \"\\tif err != nil {\\n\" + \"\\t\\tlog.Fatal(err)\\n\" + \"\\t}\\n\";\n// https://go.dev/ref/spec#String_literals\nfunction reprMaybeBacktick(s, vars, imports) {\n    return s.isString() && s.includes('\"')\n        ? reprBacktick(s, vars, imports)\n        : repr(s, vars, imports);\n}\nfunction reprBacktick(s, vars, imports) {\n    return s.isString() && !s.includes(\"`\") && !s.includes(\"\\r\")\n        ? \"`\" + s.toString() + \"`\"\n        : repr(s, vars, imports);\n}\nfunction reprStr(s) {\n    return pyreprStr(s, '\"');\n}\nfunction repr(w, vars, imports) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"os.Getenv(\" + reprStr(t.value) + \")\");\n            imports.add(\"os\");\n        }\n        else {\n            // TODO: Command takes a list of arguments .Command(\"ls\", \"-l\", \"-a\")\n            // TODO: if there's only one command, it would be nice to name the variable \"cmd\"\n            const execCall = \"exec.Command(\" + reprStr(t.value) + \").Output()\";\n            let i = 1;\n            let varName = \"cmd\" + i;\n            // We need to check because we often try to represent the same\n            // token twice and discard one of the attempts.\n            // This is linear time but hopefully there's not that many subcommands.\n            while (varName in vars && vars[varName] !== execCall) {\n                i++;\n                varName = \"cmd\" + i;\n                if (i > Number.MAX_SAFE_INTEGER) {\n                    throw new CCError(\"lol\");\n                }\n            }\n            vars[varName] = execCall;\n            args.push(varName);\n            imports.add(\"os/exec\");\n        }\n    }\n    return args.join(\" + \");\n}\nfunction timeoutAtoi(w, vars, imports) {\n    if (w.isString()) {\n        const asStr = w.toString();\n        // TODO: check using curl's syntax and convert to Go's float syntax\n        if (/^\\d+\\.?\\d*$/.test(asStr)) {\n            return asStr;\n        }\n    }\n    vars[\"timeout\"] = \"strconv.Atoi(\" + repr(w, vars, imports) + \")\";\n    imports.add(\"strconv\");\n    return \"timeout\";\n}\nexport function _toGo(requests, warnings = []) {\n    var _a;\n    const request = getFirst(requests, warnings);\n    const imports = new Set([\"fmt\", \"io\", \"log\", \"net/http\"]);\n    const vars = {};\n    let goCode = \"\";\n    if (request.multipartUploads) {\n        goCode += \"\\tform := new(bytes.Buffer)\\n\";\n        goCode += \"\\twriter := multipart.NewWriter(form)\\n\";\n        imports.add(\"bytes\");\n        imports.add(\"mime/multipart\");\n        let firstFile = true;\n        let firstField = true;\n        for (const m of request.multipartUploads) {\n            if (\"contentFile\" in m) {\n                const op = firstFile ? \":=\" : \"=\";\n                firstFile = false;\n                // TODO: Go sends name=<filename> but curl always sends name=\"data\"\n                goCode += `\\tfw, err ${op} writer.CreateFormFile(${repr(m.name, vars, imports)}, filepath.Base(${repr((_a = m.filename) !== null && _a !== void 0 ? _a : m.contentFile, vars, imports)}))\\n`;\n                goCode += IF_ERR;\n                imports.add(\"path/filepath\");\n                goCode += `\\tfd, err ${op} os.Open(${repr(m.contentFile, vars, imports)})\\n`;\n                goCode += IF_ERR;\n                imports.add(\"os\");\n                goCode += \"\\tdefer fd.Close()\\n\";\n                goCode += \"\\t_, err = io.Copy(fw, fd)\\n\";\n                goCode += IF_ERR;\n            }\n            else {\n                const op = firstField ? \":=\" : \"=\";\n                firstField = false;\n                goCode += `\\tformField, err ${op} writer.CreateFormField(${repr(m.name, vars, imports)})\\n`;\n                goCode += IF_ERR;\n                goCode += `\\t_, err = formField.Write([]byte(${reprMaybeBacktick(m.content, vars, imports)}))\\n`;\n            }\n            goCode += \"\\n\";\n        }\n        goCode += \"\\twriter.Close()\\n\";\n        goCode += \"\\n\";\n        request.headers.delete(\"content-type\");\n    }\n    if (request.insecure || request.compressed === false) {\n        goCode += \"\\ttr := &http.Transport{\\n\";\n        if (request.insecure) {\n            goCode += \"\\t\\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\\n\";\n            imports.add(\"crypto/tls\");\n        }\n        if (request.compressed === false) {\n            goCode += \"\\t\\tDisableCompression: true,\\n\";\n        }\n        goCode += \"\\t}\\n\";\n    }\n    goCode += \"\\tclient := &http.Client{\";\n    if (request.timeout) {\n        goCode += \"\\n\";\n        if (request.insecure || request.compressed === false) {\n            goCode += \"\\t\\tTransport: tr,\\n\";\n        }\n        goCode +=\n            \"\\t\\tTimeout: \" +\n                timeoutAtoi(request.timeout, vars, imports) +\n                \" * time.Second,\\n\";\n        goCode += \"\\t\";\n        imports.add(\"time\");\n    }\n    else if (request.insecure || request.compressed === false) {\n        goCode += \"Transport: tr\";\n    }\n    goCode += \"}\\n\";\n    if (request.data && !request.multipartUploads) {\n        goCode +=\n            \"\\tvar data = strings.NewReader(\" +\n                reprBacktick(request.data, vars, imports) +\n                \")\\n\";\n        imports.add(\"strings\");\n    }\n    goCode +=\n        \"\\treq, err := http.NewRequest(\" +\n            repr(request.urls[0].method, vars, imports) +\n            \", \" +\n            repr(request.urls[0].url, vars, imports);\n    goCode +=\n        \", \" +\n            (request.multipartUploads ? \"form\" : request.data ? \"data\" : \"nil\") +\n            \")\\n\";\n    goCode += IF_ERR;\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            let start = \"\\t\";\n            if (headerName.toLowerCase().toString() === \"accept-encoding\" &&\n                // By default Go will automatically decompress gzip,\n                // unless you set DisableCompression to true on the Transport\n                // or pass a custom Accept-Encoding header.\n                // By default curl won't automatically decompress gzip unless\n                // you pass --compressed, but we comment out the header in that\n                // case (request.compressed = undefined) too.\n                request.compressed !== false) {\n                start += \"// \";\n            }\n            goCode +=\n                start +\n                    \"req.Header.Set(\" +\n                    repr(headerName, vars, imports) +\n                    \", \" +\n                    reprMaybeBacktick(headerValue || new Word(), vars, imports) +\n                    \")\\n\";\n        }\n    }\n    if (request.multipartUploads) {\n        goCode +=\n            '\\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\\n';\n    }\n    if (request.urls[0].auth && request.authType === \"basic\") {\n        const [user, password] = request.urls[0].auth;\n        goCode +=\n            \"\\treq.SetBasicAuth(\" +\n                repr(user, vars, imports) +\n                \", \" +\n                repr(password, vars, imports) +\n                \")\\n\";\n    }\n    goCode += \"\\tresp, err := client.Do(req)\\n\";\n    goCode += IF_ERR;\n    goCode += \"\\tdefer resp.Body.Close()\\n\";\n    goCode += \"\\tbodyText, err := io.ReadAll(resp.Body)\\n\";\n    goCode += IF_ERR;\n    goCode += '\\tfmt.Printf(\"%s\\\\n\", bodyText)\\n';\n    goCode += \"}\";\n    let preamble = \"package main\\n\\n\";\n    preamble += \"import (\\n\";\n    for (const imp of Array.from(imports).sort()) {\n        preamble += '\\t\"' + imp + '\"\\n';\n    }\n    preamble += \")\\n\\n\";\n    preamble += \"func main() {\\n\";\n    // TODO: sorts wrong when >9 commands\n    for (const [name, expr] of Array.from(Object.entries(vars)).sort()) {\n        preamble += \"\\t\" + name + \", err := \" + expr + \"\\n\";\n        preamble += IF_ERR;\n    }\n    if (Object.values(vars).length) {\n        preamble += \"\\n\";\n    }\n    return preamble + goCode + \"\\n\";\n}\nexport function toGoWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const go = _toGo(requests, warnings);\n    return [go, warnings];\n}\nexport function toGo(curlCommand) {\n    return toGoWarn(curlCommand)[0];\n}\n//# sourceMappingURL=go.js.map","import { btoa } from \"../utils.js\";\nimport { warnIfPartsIgnored } from \"../Warnings.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    //   \"form\",\n    //   \"form-string\",\n    // TODO: generate digest auth header\n    \"anyauth\",\n    \"no-anyauth\",\n    \"http1.1\",\n    \"http2\",\n    \"http2-prior-knowledge\",\n    \"http3\",\n    \"http3-only\",\n]);\nfunction getDataString(request) {\n    if (!request.data) {\n        return null;\n    }\n    // TODO: is this correct?\n    const mimeType = request.headers.getContentType() || \"\";\n    try {\n        // TODO: look at dataArray and generate fileName:\n        const [parsedQuery] = parseQueryString(request.data);\n        if (parsedQuery && parsedQuery.length) {\n            return {\n                mimeType,\n                params: parsedQuery.map((q) => ({\n                    name: q[0].toString(),\n                    value: q[1].toString(),\n                })),\n            };\n        }\n    }\n    catch (_a) { }\n    const text = request.data.toString();\n    return { mimeType, text };\n}\nexport function _requestAndUrlToHar(request, url, warnings = []) {\n    const requestHar = {\n        method: url.method.toString(),\n        url: (url.queryList ? url.urlWithoutQueryList : url.url).toString(),\n        httpVersion: request.http3\n            ? \"HTTP/3\"\n            : request.http2\n                ? \"HTTP/2\"\n                : \"HTTP/1.1\",\n        cookies: [],\n        headers: [],\n        queryString: [],\n        headersSize: -1,\n        bodySize: -1,\n    };\n    if (request.cookies) {\n        // TODO: repeated cookies\n        requestHar.cookies = request.cookies.map((c) => ({\n            name: c[0].toString(),\n            value: c[1].toString(),\n        }));\n        request.headers.delete(\"Cookie\");\n    }\n    if (request.headers.length) {\n        requestHar.headers = request.headers.headers\n            .filter((h) => h[1] !== null)\n            .map((h) => ({ name: h[0].toString(), value: h[1].toString() }));\n    }\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        if (request.authType === \"basic\") {\n            // Generate Authorization header by hand\n            const authHeader = \"Basic \" + btoa(`${user.toString()}:${password.toString()}`);\n            requestHar.headers.push({ name: \"Authorization\", value: authHeader });\n        }\n    }\n    if (url.queryList) {\n        requestHar.queryString = url.queryList.map((q) => ({\n            // TODO: warn about variables\n            name: q[0].toString(),\n            value: q[1].toString(),\n        }));\n    }\n    if (request.data) {\n        const harData = getDataString(request);\n        if (harData) {\n            requestHar.postData = harData;\n        }\n    }\n    return requestHar;\n}\nexport function _toHarString(requests, warnings = []) {\n    const harRequests = [];\n    for (const request of requests) {\n        for (const url of request.urls) {\n            harRequests.push(_requestAndUrlToHar(request, url, warnings));\n        }\n    }\n    return (JSON.stringify({\n        log: {\n            version: \"1.2\",\n            entries: harRequests.map((r) => ({ request: r })),\n        },\n    }, null, 4) + \"\\n\");\n}\nexport function toHarStringWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    requests.map((r) => warnIfPartsIgnored(r, warnings, { multipleUrls: true }));\n    const har = _toHarString(requests, warnings);\n    return [har, warnings];\n}\nexport function toHarString(curlCommand) {\n    return toHarStringWarn(curlCommand)[0];\n}\n//# sourceMappingURL=har.js.map","import { btoa } from \"../utils.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"http0.9\",\n    \"http1.0\",\n    \"http1.1\",\n    \"http2\",\n    \"http2-prior-knowledge\",\n    \"http3\",\n    \"http3-only\",\n    \"no-http0.9\",\n    \"compressed\",\n    \"no-compressed\",\n    \"upload-file\",\n]);\nexport function repr(w) {\n    return w.tokens.map((t) => (typeof t === \"string\" ? t : t.text)).join(\"\");\n}\nexport function _toHTTP(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    let s = request.urls[0].method.toString() + \" \";\n    const urlObj = request.urls[0].urlObj;\n    let url = urlObj.path.toString() + urlObj.query.toString();\n    if (!url) {\n        url = \"/\";\n    }\n    s += url + \" \";\n    if (request.httpVersion === \"3\" || request.httpVersion === \"3-only\") {\n        s += \"HTTP/3\";\n    }\n    else if (request.httpVersion === \"2\" ||\n        request.httpVersion === \"2-prior-knowledge\") {\n        s += \"HTTP/2\";\n    }\n    else if (request.httpVersion === \"1.0\") {\n        s += \"HTTP/1.0\";\n    }\n    else {\n        s += \"HTTP/1.1\";\n    }\n    s += \"\\n\";\n    // These have to be done in reverse order because of prependIfMissing\n    if (request.urls[0].auth) {\n        const [user, pass] = request.urls[0].auth;\n        if (request.authType === \"basic\") {\n            request.headers.prependIfMissing(\"Authorization\", \"Basic \" + btoa(user.toString() + \":\" + pass.toString()));\n        }\n    }\n    if (request.compressed) {\n        request.headers.prependIfMissing(\"Accept-Encoding\", \"deflate, gzip\");\n        // Modern curl versions send this, but users are less likely to have\n        // decompressors for br and zstd.\n        // request.headers.setIfMissing(\"Accept-Encoding\", \"deflate, gzip, br, zstd\");\n    }\n    request.headers.prependIfMissing(\"Accept\", \"*/*\");\n    // TODO: update version with extract_curl_args.py\n    request.headers.prependIfMissing(\"User-Agent\", \"curl/8.2.1\");\n    request.headers.prependIfMissing(\"Host\", urlObj.host.toString());\n    // Generate a random boundary, just like curl\n    // TODO: this changes on every keystroke and in tests\n    // TODO: use a hash of something, like the data contents\n    let boundary = \"------------------------\" +\n        Array.from({ length: 16 }, () => \"0123456789abcdef\".charAt(Math.floor(Math.random() * 16))).join(\"\");\n    // crypto.getRandomValues() only available on Node 19+\n    // Array.from(crypto.getRandomValues(new Uint8Array(8)))\n    //   .map((b) => b.toString(16).padStart(2, \"0\"))\n    //   .join(\"\");\n    if (request.data) {\n        // TODO: we already added Content-Type earlier but curl puts Content-Type after Content-Length\n        request.headers.setIfMissing(\"Content-Length\", request.data.toString().length.toString());\n    }\n    else if (request.urls[0].uploadFile) {\n        const contentLength = \"<length of \" + request.urls[0].uploadFile.toString() + \">\";\n        const wasMissing = request.headers.setIfMissing(\"Content-Length\", contentLength);\n        if (wasMissing) {\n            warnings.push([\n                \"bad-content-length\",\n                \"Content-Length header needs to be set: \" +\n                    JSON.stringify(contentLength),\n            ]);\n        }\n    }\n    else if (request.multipartUploads) {\n        const contentType = request.headers.get(\"Content-Type\");\n        if (contentType) {\n            const m = contentType.toString().match(/boundary=(.*)/);\n            if (m) {\n                // curl actually doesn't respect the boundary in the Content-Type header\n                // and will append a second one and use that.\n                boundary = m[1];\n            }\n            else {\n                warnings.push([\n                    \"no-boundary\",\n                    `Content-Type header \"${contentType.toString()}\" does not specify a boundary.`,\n                ]);\n            }\n        }\n        else {\n            // TODO: could existing Content-Type have other stuff that needs to be preserved?\n            request.headers.set(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n        }\n    }\n    for (const [headerName, headerValue] of request.headers) {\n        if (headerValue === null) {\n            continue;\n        }\n        const value = headerValue.toString();\n        if (value) {\n            s += headerName.toString() + \": \" + value + \"\\n\";\n        }\n        else {\n            // Don't add extra space\n            s += headerName.toString() + \":\\n\";\n        }\n    }\n    s += \"\\n\";\n    if (request.data) {\n        s += request.data.toString();\n    }\n    else if (request.urls[0].uploadFile) {\n        s += request.urls[0].uploadFile.toString();\n        warnings.push([\n            \"upload-file\",\n            \"need to read data from file: \" +\n                JSON.stringify(request.urls[0].uploadFile.toString()),\n        ]);\n    }\n    else if (request.multipartUploads) {\n        for (const f of request.multipartUploads) {\n            s += \"--\" + boundary + \"\\n\";\n            s += \"Content-Disposition: form-data\";\n            s += '; name=\"' + f.name.toString() + '\"';\n            if (f.filename) {\n                s += '; filename=\"' + f.filename.toString() + '\"';\n            }\n            if (f.contentType) {\n                s += '\\nContent-Type: \"' + f.contentType.toString() + '\"';\n            }\n            // TODO: ; headers=\n            s += \"\\n\\n\";\n            if (\"content\" in f) {\n                s += f.content.toString();\n            }\n            else {\n                s += f.contentFile.toString();\n            }\n            s += \"\\n\";\n        }\n        s += \"--\" + boundary + \"--\";\n    }\n    return s + \"\\n\";\n}\nexport function toHTTPWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const http = _toHTTP(requests, warnings);\n    return [http, warnings];\n}\nexport function toHTTP(curlCommand) {\n    return toHTTPWarn(curlCommand)[0];\n}\n//# sourceMappingURL=http.js.map","import { CCError } from \"../utils.js\";\nimport { warnIfPartsIgnored } from \"../Warnings.js\";\nimport { Word, eq, mergeWords } from \"../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\nimport { repr, reprStr } from \"./wget.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"location\",\n    \"no-location\",\n    \"location-trusted\",\n    \"no-location-trusted\",\n    \"max-redirs\",\n    \"ciphers\",\n    \"insecure\",\n    \"cert\",\n    \"key\",\n    \"cacert\",\n    \"capath\",\n    \"proxy\",\n    // \"proxy-user\", // not supported\n    \"noproxy\", // not supported, just better error\n    \"timeout\",\n    \"connect-timeout\",\n    // Wget picks the auth and some it doesn't support but there's a more\n    // specific error message for those.\n    \"anyauth\",\n    \"no-anyauth\",\n    \"digest\",\n    \"no-digest\",\n    // \"aws-sigv4\", // not supported\n    \"negotiate\",\n    \"no-negotiate\",\n    \"delegation\", // GSS/kerberos\n    // \"service-name\", // GSS/kerberos, not supported\n    \"ntlm\",\n    \"no-ntlm\",\n    \"ntlm-wb\",\n    \"no-ntlm-wb\",\n    // HTTPie looks for a netrc file by default\n    // TODO: this doesn't work\n    \"no-netrc\", // only explicitly disabling netrc has an effect,\n    \"verbose\",\n    \"silent\",\n    // \"output\",\n    \"upload-file\",\n    \"next\",\n]);\nfunction escapeHeader(name) {\n    // TODO: more complicated, have to check that it's not already backslashed\n    // and not all values might be representable\n    return name.replace(\"=\", \"\\\\=\");\n}\nfunction escapeHeaderValue(value) {\n    if ((value.startsWith(\"=\"), value.startsWith(\"@\"))) {\n        value = value.prepend(\"\\\\\");\n    }\n    return value;\n}\nfunction escapeJsonName(name, isFirstKey = false) {\n    name = name\n        .replace(\"\\\\\", \"\\\\\\\\\")\n        .replace(\"[\", \"\\\\[\")\n        .replace(\"]\", \"\\\\]\")\n        .replace(\":\", \"\\\\:\") // both := need to be escaped individually or you get weird results\n        .replace(\"=\", \"\\\\=\");\n    // \"A regular integer in a path (e.g [10]) means an array index;\n    // but if you want it to be treated as a string, you can escape\n    // the whole number by using a backslash (\\) prefix.\"\n    // TODO: check this regex\n    if (!isFirstKey && /^\\d+$/.test(name)) {\n        name = \"\\\\\" + name;\n    }\n    return name;\n}\nfunction escapeJsonStr(value) {\n    // The backslash only has an effect on some characters and not\n    // the backslash itself, so it seems like there's no way to send a literal '\\='\n    // value = value.replace(\"\\\\=\", \"\\\\\\\\=\");\n    if (value.startsWith(\"\\\\=\")) {\n        throw new CCError(\"Unrepresentable JSON string: \" +\n            JSON.stringify(value) +\n            ' (starts with \"\\\\=\")');\n    }\n    if (value.startsWith(\"\\\\@\")) {\n        throw new CCError(\"Unrepresentable JSON string: \" +\n            JSON.stringify(value) +\n            ' (starts with \"\\\\@\")');\n    }\n    if (value.startsWith(\"=\") || value.startsWith(\"@\")) {\n        value = \"\\\\\" + value;\n    }\n    return value;\n}\nfunction toJson(obj, key = \"\") {\n    if (obj === null) {\n        return [reprStr(key) + \":=null\"];\n    }\n    else if (typeof obj === \"boolean\") {\n        return [reprStr(key) + \":=\" + obj.toString()];\n    }\n    else if (typeof obj === \"number\") {\n        return [reprStr(key) + \":=\" + reprStr(obj.toString())];\n    }\n    else if (typeof obj === \"string\") {\n        return [reprStr(key) + \"=\" + reprStr(escapeJsonStr(obj))];\n    }\n    else if (Array.isArray(obj)) {\n        if (!obj.length) {\n            return [reprStr(key) + \":=\" + \"[]\"];\n        }\n        return obj.map((item) => toJson(item, key + \"[]\")).flat();\n    }\n    else {\n        if (!Object.keys(obj).length) {\n            return [reprStr(key) + \":=\" + \"{}\"];\n        }\n        return Object.entries(obj)\n            .map(([name, value]) => toJson(value, key\n            ? key + \"[\" + escapeJsonName(name) + \"]\"\n            : escapeJsonName(name, true)))\n            .flat();\n    }\n}\nfunction jsonAsHttpie(flags, items, data) {\n    let json;\n    try {\n        json = JSON.parse(data);\n    }\n    catch (_a) { }\n    // Only non-empty, top-level objects and arrays can be serialized as command line arguments\n    if ((typeof json === \"object\" && json !== null && Object.keys(json).length) ||\n        (Array.isArray(json) && json.length)) {\n        let jsonItems;\n        try {\n            jsonItems = toJson(json);\n        }\n        catch (_b) { }\n        if (jsonItems) {\n            for (const jsonItem of jsonItems) {\n                items.push(jsonItem);\n            }\n            return;\n        }\n    }\n    flags.push(\"--raw \" + (reprStr(data) || \"''\"));\n}\nfunction escapeQueryName(name) {\n    // an unquoted \":\" turns into \": \"\n    return name.replace(\"\\\\\", \"\\\\\\\\\").replace(\":\", \"\\\\:\").replace(\"=\", \"\\\\=\");\n}\nfunction escapeQueryValue(value) {\n    // TODO: the backslash only has an effect on some characters and not\n    // the backslash itself, so it seems like there's no way to send a literal '\\='\n    // value = value.replace(\"\\\\=\", \"\\\\\\\\=\");\n    if ((value.startsWith(\"=\"), value.startsWith(\"@\"))) {\n        value = value.prepend(\"\\\\\");\n    }\n    return value;\n}\nfunction urlencodedAsHttpie(flags, items, data) {\n    let queryList;\n    try {\n        [queryList] = parseQueryString(data);\n    }\n    catch (_a) { }\n    if (!queryList) {\n        flags.push(\"--raw \" + (repr(data) || \"''\"));\n        return;\n    }\n    flags.push(\"--form\");\n    for (const [name, value] of queryList) {\n        items.push(repr(mergeWords(escapeQueryName(name), \"=\", escapeQueryValue(value))));\n    }\n}\nfunction formatData(flags, items, data, headers) {\n    const contentType = headers.getContentType();\n    if (contentType === \"application/json\" && data.isString()) {\n        jsonAsHttpie(flags, items, data.toString());\n    }\n    else if (contentType === \"application/x-www-form-urlencoded\") {\n        urlencodedAsHttpie(flags, items, data);\n    }\n    else {\n        flags.push(\"--raw \" + (repr(data) || \"''\"));\n    }\n}\n// TODO: does this work?\nfunction escapeFormName(name) {\n    return name.replace(\"\\\\\", \"\\\\\\\\\").replace(\"@\", \"\\\\@\").replace(\"=\", \"\\\\=\");\n}\nfunction requestToHttpie(request, url, warnings) {\n    const flags = [];\n    let method = null;\n    let urlArg = url.url;\n    const items = [];\n    if (url.uploadFile || request.data || request.multipartUploads) {\n        if (!eq(url.method, \"POST\")) {\n            method = repr(url.method);\n        }\n    }\n    else if (!eq(url.method, \"GET\")) {\n        method = repr(url.method);\n    }\n    // TODO: don't merge headers\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                items.push(repr(mergeWords(escapeHeader(headerName), \":\")));\n            }\n            else if (!headerValue.toBool()) {\n                items.push(repr(mergeWords(escapeHeader(headerName), \";\")));\n            }\n            else {\n                items.push(repr(mergeWords(escapeHeader(headerName), \":\", escapeHeaderValue(headerValue))));\n            }\n        }\n    }\n    if (url.auth) {\n        const [user, password] = url.auth;\n        if (request.authType === \"digest\") {\n            flags.push(\"-A digest\");\n        }\n        else if (request.authType === \"ntlm\" || request.authType === \"ntlm-wb\") {\n            flags.push(\"--auth-type=ntlm\");\n            warnings.push([\n                \"httpie-ntlm\",\n                \"NTLM auth requires the httpie-ntlm plugin\",\n            ]);\n        }\n        else if (request.authType === \"negotiate\") {\n            flags.push(\"--auth-type=negotiate\");\n            warnings.push([\n                \"httpie-negotiate\",\n                \"SPNEGO (GSS Negotiate) auth requires the httpie-negotiate plugin\",\n            ]);\n            // TODO: is this the same thing?\n            // } else if (request.authType === \"aws-sigv4\") {\n            //   warnings.push([\n            //     \"httpie-ntlm\",\n            //     \"aws-sigv4 auth is not supported and requires the httpie-aws-auth plugin\",\n            //   ]);\n        }\n        else if (request.authType !== \"basic\") {\n            warnings.push([\n                \"httpie-unsupported-auth\",\n                \"HTTPie doesn't support \" + request.authType + \" authentication\",\n            ]);\n        }\n        // TODO: -A bearer -a token\n        flags.push(\"-a \" + repr(mergeWords(user, \":\", password)));\n    }\n    if (url.queryList) {\n        urlArg = url.urlWithoutQueryList;\n        for (const [name, value] of url.queryList) {\n            items.push(repr(mergeWords(escapeQueryName(name), \"==\", escapeQueryValue(value))));\n        }\n    }\n    if (url.uploadFile) {\n        if (eq(url.uploadFile, \"-\") || eq(url.uploadFile, \".\")) {\n            warnings.push([\n                \"httpie-stdin\",\n                \"pass in the file contents to HTTPie through stdin\",\n            ]);\n        }\n        else {\n            items.push(\"@\" + repr(url.uploadFile));\n        }\n    }\n    else if (request.multipartUploads) {\n        flags.push(\"--multipart\");\n        for (const m of request.multipartUploads) {\n            if (\"content\" in m) {\n                items.push(repr(escapeFormName(m.name)) + \"=\" + repr(m.content));\n            }\n            else {\n                if (\"filename\" in m && m.filename) {\n                    items.push(repr(escapeFormName(m.name)) + \"@\" + repr(m.filename));\n                    if (!eq(m.filename, m.contentFile)) {\n                        warnings.push([\n                            \"httpie-multipart-fake-filename\",\n                            \"HTTPie doesn't support multipart uploads that read a certain filename but send a different filename\",\n                        ]);\n                    }\n                }\n                else {\n                    items.push(repr(escapeFormName(m.name)) + \"=@\" + repr(m.contentFile));\n                }\n            }\n        }\n    }\n    else if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        // TODO: surely --upload-file and this can't be identical,\n        // doesn't this ignore url encoding?\n        items.push(\"@\" + repr(request.dataArray[0].filename));\n    }\n    else if (request.data) {\n        formatData(flags, items, request.data, request.headers);\n    }\n    if (request.followRedirects || request.followRedirectsTrusted) {\n        flags.push(\"--follow\");\n    }\n    if (request.maxRedirects && request.maxRedirects.toString() !== \"30\") {\n        // TODO: escape/parse?\n        flags.push(\"--max-redirects=\" + repr(request.maxRedirects));\n    }\n    if (request.netrc === \"ignored\") {\n        flags.push(\"--ignore-netrc\");\n    }\n    if (request.proxy) {\n        flags.push(\"--proxy=http:\" + repr(request.proxy));\n        flags.push(\"--proxy=https:\" + repr(request.proxy));\n    }\n    if (request.proxyAuth) {\n        // TODO: add to proxy URL\n    }\n    if (request.noproxy) {\n        warnings.push([\n            \"httpie-noproxy\",\n            \"HTTPie requires passing noproxy through environment variables: \" +\n                JSON.stringify(request.noproxy.toString()),\n        ]);\n    }\n    if (request.insecure) {\n        flags.push(\"--verify=no\");\n    }\n    if (request.cacert) {\n        flags.push(\"--verify=\" + repr(request.cacert));\n    }\n    if (request.capath) {\n        flags.push(\"--verify=\" + repr(request.capath));\n    }\n    if (request.cert) {\n        flags.push(\"--cert=\" + repr(request.cert[0]));\n    }\n    if (request.key) {\n        flags.push(\"--cert-key=\" + repr(request.key));\n    }\n    if (request.cert && request.cert[1]) {\n        flags.push(\"--cert-key-pass=\" + repr(request.cert[1]));\n    }\n    // TODO: --ssl= for the version\n    if (request.ciphers) {\n        flags.push(\"--ciphers=\" + repr(request.ciphers));\n    }\n    if (request.connectTimeout) {\n        flags.push(\"--timeout=\" + repr(request.connectTimeout));\n    }\n    if (request.timeout) {\n        if (request.connectTimeout) {\n            warnings.push([\n                \"httpie-timeout-with-connect-timeout\",\n                \"ignoring --timeout because HTTPie's timeout is more similar to curl's --connect-timeout\",\n            ]);\n        }\n        else {\n            flags.push(\"--timeout=\" + repr(request.timeout));\n            // warn that this is not for the whole request\n            warnings.push([\n                \"httpie-timeout\",\n                \"HTTPie's timeout is just for the connection, not for the whole request\",\n            ]);\n        }\n    }\n    if (request.verbose) {\n        flags.push(\"--verbose\");\n    }\n    if (request.silent) {\n        flags.push(\"--quiet\");\n    }\n    function localhostShorthand(u) {\n        if (u.startsWith(\"localhost:\")) {\n            return u.slice(\"localhost\".length);\n        }\n        else if (u.startsWith(\"localhost/\") || eq(u, \"localhost\")) {\n            return u.slice(\"localhost\".length).prepend(\":\");\n        }\n        return u;\n    }\n    let command = \"http\";\n    if (urlArg.startsWith(\"https://\")) {\n        command = \"https\";\n        urlArg = localhostShorthand(urlArg.slice(\"https://\".length));\n    }\n    else if (urlArg.startsWith(\"http://\")) {\n        urlArg = localhostShorthand(urlArg.slice(\"http://\".length));\n    }\n    if (url.output) {\n        // TODO: pipe output\n    }\n    if (method) {\n        flags.push(method);\n    }\n    // If any of the field names or headers starts with a dash, add a -- argument\n    // TODO: this might have edge cases\n    if (items.some((i) => i.startsWith(\"-\"))) {\n        items.unshift(\"--\");\n    }\n    const args = [...flags, repr(urlArg), ...items];\n    const multiline = args.length > 3 || args.reduce((a, b) => a + b.length, 0) > 80 - 5;\n    const joiner = multiline ? \" \\\\\\n  \" : \" \";\n    return command + \" \" + args.join(joiner) + \"\\n\";\n}\nexport function _toHttpie(requests, warnings = []) {\n    const commands = [];\n    for (const request of requests) {\n        warnIfPartsIgnored(request, warnings, {\n            dataReadsFile: true,\n            // HTTPie has its own session.json file format\n            // cookieFiles: true,\n            multipleUrls: true,\n        });\n        if (request.dataReadsFile &&\n            request.dataArray &&\n            request.dataArray.length &&\n            (request.dataArray.length > 1 ||\n                (!(request.dataArray[0] instanceof Word) && request.dataArray[0].name))) {\n            warnings.push([\n                \"unsafe-data\",\n                \"the generated data content is wrong, \" +\n                    // TODO: might not come from \"@\"\n                    JSON.stringify(\"@\" + request.dataReadsFile) +\n                    \" means read the file \" +\n                    JSON.stringify(request.dataReadsFile),\n            ]);\n        }\n        for (const url of request.urls) {\n            commands.push(requestToHttpie(request, url, warnings));\n        }\n    }\n    return commands.join(\"\\n\\n\");\n}\nexport function toHttpieWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const httpie = _toHttpie(requests, warnings);\n    return [httpie, warnings];\n}\nexport function toHttpie(curlCommand) {\n    return toHttpieWarn(curlCommand)[0];\n}\n//# sourceMappingURL=httpie.js.map","import { joinWords } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { repr } from \"./java.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    // TODO\n    // \"form\",\n    // \"form-string\",\n]);\nexport function _toJavaHttpUrlConnection(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const imports = new Set([\n        \"java.io.IOException\",\n        \"java.io.InputStream\",\n        \"java.net.HttpURLConnection\",\n        \"java.net.URL\",\n        \"java.util.Scanner\",\n    ]);\n    let javaCode = \"\";\n    javaCode +=\n        \"        URL url = new URL(\" + repr(request.urls[0].url, imports) + \");\\n\";\n    javaCode +=\n        \"        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\\n\";\n    javaCode +=\n        \"        httpConn.setRequestMethod(\" +\n            repr(request.urls[0].method, imports) +\n            \");\\n\\n\";\n    let gzip = false;\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                continue;\n            }\n            javaCode +=\n                \"        httpConn.setRequestProperty(\" +\n                    repr(headerName, imports) +\n                    \", \" +\n                    repr(headerValue, imports) +\n                    \");\\n\";\n            if (headerName.toLowerCase().toString() === \"accept-encoding\" &&\n                headerValue) {\n                gzip = headerValue.indexOf(\"gzip\") !== -1;\n            }\n        }\n        javaCode += \"\\n\";\n    }\n    if (request.urls[0].auth) {\n        javaCode +=\n            \"        byte[] message = (\" +\n                repr(joinWords(request.urls[0].auth, \":\"), imports) +\n                ').getBytes(\"UTF-8\");\\n';\n        javaCode +=\n            \"        String basicAuth = DatatypeConverter.printBase64Binary(message);\\n\";\n        javaCode +=\n            '        httpConn.setRequestProperty(\"Authorization\", \"Basic \" + basicAuth);\\n';\n        javaCode += \"\\n\";\n        imports.add(\"javax.xml.bind.DatatypeConverter\");\n    }\n    if (request.data) {\n        javaCode += \"        httpConn.setDoOutput(true);\\n\";\n        javaCode +=\n            \"        OutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\\n\";\n        javaCode += \"        writer.write(\" + repr(request.data, imports) + \");\\n\";\n        javaCode += \"        writer.flush();\\n\";\n        javaCode += \"        writer.close();\\n\";\n        javaCode += \"        httpConn.getOutputStream().close();\\n\";\n        javaCode += \"\\n\";\n        imports.add(\"java.io.OutputStreamWriter\");\n    }\n    javaCode +=\n        \"        InputStream responseStream = httpConn.getResponseCode() / 100 == 2\\n\";\n    javaCode += \"                ? httpConn.getInputStream()\\n\";\n    javaCode += \"                : httpConn.getErrorStream();\\n\";\n    if (gzip) {\n        javaCode += '        if (\"gzip\".equals(httpConn.getContentEncoding())) {\\n';\n        javaCode +=\n            \"            responseStream = new GZIPInputStream(responseStream);\\n\";\n        javaCode += \"        }\\n\";\n        imports.add(\"java.util.zip.GZIPInputStream\");\n    }\n    javaCode +=\n        '        Scanner s = new Scanner(responseStream).useDelimiter(\"\\\\\\\\A\");\\n';\n    javaCode += '        String response = s.hasNext() ? s.next() : \"\";\\n';\n    javaCode += \"        System.out.println(response);\\n\";\n    javaCode += \"    }\\n\";\n    javaCode += \"}\";\n    let preambleCode = \"\";\n    for (const imp of Array.from(imports).sort()) {\n        preambleCode += \"import \" + imp + \";\\n\";\n    }\n    if (imports.size) {\n        preambleCode += \"\\n\";\n    }\n    preambleCode += \"class Main {\\n\";\n    preambleCode += \"\\n\";\n    if (imports.has(\"java.lang.Runtime\")) {\n        // Helper function that runs a bash command and always returns a string\n        preambleCode += \"    public static String exec(String cmd) {\\n\";\n        preambleCode += \"        try {\\n\";\n        preambleCode += \"            Process p = Runtime.getRuntime().exec(cmd);\\n\";\n        preambleCode += \"            p.waitFor();\\n\";\n        preambleCode +=\n            '            Scanner s = new Scanner(p.getInputStream()).useDelimiter(\"\\\\\\\\A\");\\n';\n        preambleCode += '            return s.hasNext() ? s.next() : \"\";\\n';\n        preambleCode += \"        } catch (Exception e) {\\n\";\n        preambleCode += '            return \"\";\\n';\n        preambleCode += \"        }\\n\";\n        preambleCode += \"    }\\n\";\n        preambleCode += \"\\n\";\n    }\n    preambleCode +=\n        \"    public static void main(String[] args) throws IOException {\\n\";\n    return preambleCode + javaCode + \"\\n\";\n}\nexport function toJavaHttpUrlConnectionWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const java = _toJavaHttpUrlConnection(requests, warnings);\n    return [java, warnings];\n}\nexport function toJavaHttpUrlConnection(curlCommand) {\n    return toJavaHttpUrlConnectionWarn(curlCommand)[0];\n}\n//# sourceMappingURL=httpurlconnection.js.map","import { Word, eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"connect-timeout\",\n    \"location\",\n    // \"location-trusted\",\n    \"upload-file\",\n    // TODO\n    // \"form\",\n    // \"form-string\",\n    \"http2\",\n]);\n// https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6\n// https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.3\n// Also used for Clojure\nconst regexEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nconst regexDigit = /[0-9]/; // it's 0-7 actually but that would generate confusing code\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c, index, string) => {\n            switch (c) {\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            if (c.length === 2) {\n                const first = c.charCodeAt(0);\n                const second = c.charCodeAt(1);\n                return (\"\\\\u\" +\n                    first.toString(16).padStart(4, \"0\") +\n                    \"\\\\u\" +\n                    second.toString(16).padStart(4, \"0\"));\n            }\n            if (c === \"\\0\" && !regexDigit.test(string.charAt(index + 1))) {\n                return \"\\\\0\";\n            }\n            return \"\\\\u\" + c.charCodeAt(0).toString(16).padStart(4, \"0\");\n        }) +\n        '\"');\n}\nexport function repr(w, imports) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"System.getenv(\" + reprStr(t.value) + \")\");\n            imports.add(\"java.lang.System\");\n        }\n        else {\n            args.push(\"exec(\" + reprStr(t.value) + \")\");\n            imports.add(\"java.lang.Runtime\");\n            imports.add(\"java.util.Scanner\");\n        }\n    }\n    return args.join(\" + \");\n}\nexport function _toJava(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const url = request.urls[0];\n    const imports = new Set([\n        \"java.net.URI\",\n        \"java.net.http.HttpClient\",\n        \"java.net.http.HttpRequest\",\n        \"java.net.http.HttpResponse\",\n        \"java.io.IOException\",\n    ]);\n    let javaCode = \"\";\n    javaCode += \"HttpClient client = \";\n    const clientLines = [];\n    if (request.followRedirects) {\n        // .NEVER is the default\n        // .ALWAYS will follow redirect from HTTPS to HTTP, which isn't what --location-trusted does\n        clientLines.push(\"    .followRedirects(HttpClient.Redirect.NORMAL)\\n\");\n    }\n    else if (request.followRedirects === false) {\n        clientLines.push(\"    .followRedirects(HttpClient.Redirect.NEVER)\\n\");\n    }\n    if (request.connectTimeout) {\n        // TODO: won't work if it's a float\n        clientLines.push(\"    .connectTimeout(Duration.ofSeconds(\" +\n            request.connectTimeout.toString() +\n            \"))\\n\");\n        imports.add(\"java.time.Duration\");\n    }\n    // TODO: Proxy\n    if (clientLines.length) {\n        javaCode += \"HttpClient.newBuilder()\\n\";\n        for (const line of clientLines) {\n            javaCode += line;\n        }\n        javaCode += \"    .build()\";\n    }\n    else {\n        javaCode += \"HttpClient.newHttpClient()\";\n    }\n    javaCode += \";\\n\";\n    javaCode += \"\\n\";\n    const methodCallArgs = [];\n    if (url.uploadFile) {\n        if (eq(url.uploadFile, \"-\") || eq(url.uploadFile, \".\")) {\n            warnings.push([\"upload-stdin\", \"uploading from stdin isn't supported\"]);\n        }\n        methodCallArgs.push(\"BodyPublishers.ofFile(Paths.get(\" + repr(url.uploadFile, imports) + \"))\");\n        imports.add(\"java.net.http.HttpRequest.BodyPublishers\");\n        imports.add(\"java.nio.file.Paths\");\n    }\n    else if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        // TODO: surely --upload-file and this can't be identical,\n        // doesn't this ignore url encoding?\n        methodCallArgs.push(\"BodyPublishers.ofFile(Paths.get(\" +\n            repr(request.dataArray[0].filename, imports) +\n            \"))\");\n        imports.add(\"java.net.http.HttpRequest.BodyPublishers\");\n        imports.add(\"java.nio.file.Paths\");\n    }\n    else if (request.data) {\n        methodCallArgs.push(\"BodyPublishers.ofString(\" + repr(request.data, imports) + \")\");\n        imports.add(\"java.net.http.HttpRequest.BodyPublishers\");\n    }\n    if (url.auth) {\n        const [name, password] = url.auth;\n        javaCode +=\n            \"String credentials = \" +\n                repr(name, imports) +\n                ' + \":\" + ' +\n                repr(password, imports) +\n                \";\\n\";\n        javaCode +=\n            'String auth = \"Basic \" + Base64.getEncoder().encodeToString(credentials.getBytes());\\n\\n';\n        imports.add(\"java.util.Base64\");\n        if (request.authType !== \"basic\") {\n            warnings.push([\n                \"unsupported-auth-type\",\n                `\"${request.authType}\" authentication is not supported`,\n            ]);\n        }\n    }\n    javaCode += \"HttpRequest request = HttpRequest.newBuilder()\\n\";\n    javaCode += \"    .uri(URI.create(\" + repr(url.url, imports) + \"))\\n\";\n    const methods = [\"DELETE\", \"GET\", \"POST\", \"PUT\"];\n    const dataMethods = [\"POST\", \"PUT\"];\n    const method = url.method;\n    let methodCall = \"method\";\n    if (!method.isString() ||\n        !methods.includes(method.toString()) ||\n        // If we appended something to methodCallArgs it means we need to send data\n        (methodCallArgs.length && !dataMethods.includes(method.toString()))) {\n        if (!methodCallArgs.length) {\n            methodCallArgs.push(\"HttpRequest.BodyPublishers.noBody()\");\n        }\n        methodCallArgs.unshift(repr(method, imports));\n    }\n    else {\n        if (!methodCallArgs.length && dataMethods.includes(method.toString())) {\n            methodCallArgs.push(\"HttpRequest.BodyPublishers.noBody()\");\n        }\n        methodCall = method.toString();\n    }\n    javaCode += \"    .\" + methodCall + \"(\" + methodCallArgs.join(\", \") + \")\\n\";\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                continue;\n            }\n            javaCode +=\n                \"    .setHeader(\" +\n                    repr(headerName, imports) +\n                    \", \" +\n                    repr(headerValue, imports) +\n                    \")\\n\";\n        }\n    }\n    if (url.auth) {\n        const authHeader = request.headers.lowercase\n            ? \"authorization\"\n            : \"Authorization\";\n        javaCode += '    .setHeader(\"' + authHeader + '\", auth)\\n';\n    }\n    if (request.http2) {\n        javaCode += \"    .version(HttpClient.Version.HTTP_2)\\n\";\n        // TODO: more granular control\n    }\n    if (request.timeout) {\n        // TODO: won't work if it's a float\n        javaCode +=\n            \"    .timeout(Duration.ofSeconds(\" + request.timeout.toString() + \"))\\n\";\n        imports.add(\"java.time.Duration\");\n    }\n    javaCode += \"    .build();\\n\";\n    javaCode += \"\\n\";\n    javaCode +=\n        \"HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\\n\";\n    let preambleCode = \"\";\n    for (const imp of Array.from(imports).sort()) {\n        preambleCode += \"import \" + imp + \";\\n\";\n    }\n    if (imports.size) {\n        preambleCode += \"\\n\";\n    }\n    // preambleCode += \"class Main {\\n\";\n    if (imports.has(\"java.lang.Runtime\")) {\n        // Helper function that runs a bash command and always returns a string\n        preambleCode += \"public static String exec(String cmd) {\\n\";\n        preambleCode += \"    try {\\n\";\n        preambleCode += \"        Process p = Runtime.getRuntime().exec(cmd);\\n\";\n        preambleCode += \"        p.waitFor();\\n\";\n        preambleCode +=\n            '        Scanner s = new Scanner(p.getInputStream()).useDelimiter(\"\\\\\\\\A\");\\n';\n        preambleCode += '        return s.hasNext() ? s.next() : \"\";\\n';\n        preambleCode += \"    } catch (Exception e) {\\n\";\n        preambleCode += '        return \"\";\\n';\n        preambleCode += \"    }\\n\";\n        preambleCode += \"}\\n\";\n        preambleCode += \"\\n\";\n    }\n    // preambleCode +=\n    //   \"    public static void main(String[] args) throws Exception {\\n\";\n    // return preambleCode + javaCode + \"    }\\n\" + \"}\" + \"\\n\";\n    return preambleCode + javaCode;\n}\nexport function toJavaWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const java = _toJava(requests, warnings);\n    return [java, warnings];\n}\nexport function toJava(curlCommand) {\n    return toJavaWarn(curlCommand)[0];\n}\n//# sourceMappingURL=java.js.map","import { joinWords, eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { repr } from \"./java.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"max-time\",\n]);\nexport const _toJavaJsoup = (requests, warnings = []) => {\n    const request = getFirst(requests, warnings);\n    const imports = new Set([\n        \"java.io.IOException\",\n        \"java.io.File\",\n        \"java.io.FileInputStream\",\n        \"org.jsoup.Jsoup\",\n        \"org.jsoup.Connection\",\n    ]);\n    let javaCode = \"\";\n    javaCode += \"\\nclass Main {\\n\\n\";\n    javaCode += \"\\tpublic static void main(String[] args) throws IOException {\\n\";\n    if (request.urls[0].auth) {\n        javaCode +=\n            \"\\t\\tbyte[] message = (\" +\n                repr(joinWords(request.urls[0].auth, \":\"), imports) +\n                ').getBytes(\"UTF-8\");\\n';\n        javaCode +=\n            \"\\t\\tString basicAuth = DatatypeConverter.printBase64Binary(message);\\n\";\n        javaCode += \"\\n\";\n        imports.add(\"javax.xml.bind.DatatypeConverter\");\n    }\n    javaCode +=\n        \"\\t\\tConnection.Response response = Jsoup.connect(\" +\n            repr(request.urls[0].url, imports) +\n            \")\\n\";\n    if (request.headers) {\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                continue;\n            }\n            if (eq(headerName.toLowerCase(), \"user-agent\")) {\n                javaCode +=\n                    \"\\t\\t\\t.userAgent\" + \"(\" + repr(headerValue, imports) + \")\\n\";\n            }\n            else if (eq(headerName.toLowerCase(), \"cookie\")) {\n                const cookieValues = headerValue.split(\";\");\n                for (const index in cookieValues) {\n                    javaCode +=\n                        \"\\t\\t\\t.cookie(\" +\n                            repr(cookieValues[index].split(\"=\")[0].trim(), imports) +\n                            \", \" +\n                            repr(cookieValues[index].split(\"=\")[1].trim(), imports) +\n                            \")\\n\";\n                }\n            }\n            else {\n                javaCode +=\n                    \"\\t\\t\\t.header(\" +\n                        repr(headerName, imports) +\n                        \", \" +\n                        repr(headerValue, imports) +\n                        \")\\n\";\n            }\n        }\n    }\n    if (request.urls[0].auth) {\n        javaCode += '\\t\\t\\t.header(\"Authorization\", \"Basic \" + basicAuth)\\n';\n    }\n    if (request.multipartUploads) {\n        javaCode += \"\\t\\t\\t.data(\";\n        for (const m of request.multipartUploads) {\n            const name = m.name;\n            const fileInputStream = \"new FileInputStream(new File(\";\n            const fileName = \"filename\";\n            if (\"contentFile\" in m) {\n                if (eq(m.contentFile, \"-\")) {\n                    if (request.stdinFile) {\n                        javaCode +=\n                            repr(name, imports) +\n                                '\", \"' +\n                                fileName +\n                                '\", ' +\n                                fileInputStream +\n                                repr(request.stdinFile, imports);\n                    }\n                    else if (request.stdin) {\n                        javaCode +=\n                            repr(name, imports) +\n                                '\", \"' +\n                                fileName +\n                                '\", ' +\n                                fileInputStream +\n                                repr(request.stdin, imports);\n                    }\n                }\n                else {\n                    javaCode +=\n                        repr(name, imports) +\n                            '\", \"' +\n                            fileName +\n                            '\", ' +\n                            fileInputStream +\n                            repr(m.contentFile, imports);\n                }\n            }\n            else {\n                javaCode +=\n                    repr(name, imports) +\n                        '\", \"' +\n                        fileName +\n                        '\",' +\n                        fileInputStream +\n                        repr(m.content, imports);\n            }\n        }\n        javaCode += \")))\\n\";\n    }\n    else if (request.data) {\n        javaCode += \"\\t\\t\\t.requestBody(\" + repr(request.data, imports) + \")\\n\";\n    }\n    // TODO: check method const exists\n    javaCode +=\n        \"\\t\\t\\t.method(org.jsoup.Connection.Method.\" +\n            request.urls[0].method.toString() +\n            \")\\n\";\n    javaCode += \"\\t\\t\\t.ignoreContentType(true)\\n\";\n    if (request.timeout) {\n        // TODO: multiply by 1000\n        javaCode += \"\\t\\t\\t.timeout(\" + request.timeout.toString() + \" * 1000)\\n\";\n    }\n    javaCode += \"\\t\\t\\t.execute();\\n\\n\";\n    javaCode += \"\\t\\tSystem.out.println(response.parse());\\n\";\n    javaCode += \"\\t}\\n\";\n    javaCode += \"}\";\n    let preambleCode = \"\";\n    for (const imp of Array.from(imports).sort()) {\n        preambleCode += \"import \" + imp + \";\\n\";\n    }\n    if (imports.size) {\n        preambleCode += \"\\n\";\n    }\n    return preambleCode + javaCode + \"\\n\";\n};\nexport const toJavaJsoupWarn = (curlCommand, warnings = []) => {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const java = _toJavaJsoup(requests, warnings);\n    return [java, warnings];\n};\nexport const toJavaJsoup = (curlCommand) => {\n    return toJavaJsoupWarn(curlCommand)[0];\n};\n//# sourceMappingURL=jsoup.js.map","import { Word, eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { repr } from \"./java.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"connect-timeout\",\n    \"location\",\n    \"location-trusted\",\n    \"upload-file\",\n    \"form\",\n    \"form-string\",\n]);\nexport function _toJavaOkHttp(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const url = request.urls[0];\n    const imports = new Set([\n        \"java.io.IOException\",\n        \"okhttp3.OkHttpClient\",\n        \"okhttp3.Request\",\n        \"okhttp3.Response\",\n    ]);\n    let javaCode = \"\";\n    javaCode += \"OkHttpClient client = new OkHttpClient()\";\n    const clientLines = [];\n    if (request.timeout) {\n        clientLines.push(\"    .callTimeout(\" +\n            request.timeout.toString() +\n            \", TimeUnit.SECONDS)\\n\");\n        imports.add(\"java.util.concurrent.TimeUnit\");\n    }\n    if (request.connectTimeout) {\n        clientLines.push(\"    .connectTimeout(\" +\n            request.connectTimeout.toString() +\n            \", TimeUnit.SECONDS)\\n\");\n        imports.add(\"java.util.concurrent.TimeUnit\");\n    }\n    if (request.followRedirects === false) {\n        clientLines.push(\"    .followRedirects(false)\\n\");\n        clientLines.push(\"    .followSslRedirects(false)\\n\");\n    }\n    // TODO: Proxy\n    if (clientLines.length) {\n        javaCode += \".newBuilder()\\n\";\n        for (const line of clientLines) {\n            javaCode += line;\n        }\n        javaCode += \"    .build()\";\n    }\n    javaCode += \";\\n\";\n    javaCode += \"\\n\";\n    if (url.auth) {\n        const [name, password] = url.auth;\n        javaCode +=\n            \"String credential = Credentials.basic(\" +\n                repr(name, imports) +\n                \", \" +\n                repr(password, imports) +\n                \");\\n\\n\";\n        imports.add(\"okhttp3.Credentials\");\n        if (request.authType !== \"basic\") {\n            warnings.push([\n                \"okhttp-unsupported-auth-type\",\n                \"OkHttp doesn't support auth type \" + request.authType,\n            ]);\n        }\n    }\n    const methodCallArgs = [];\n    if (url.uploadFile) {\n        if (eq(url.uploadFile, \"-\") || eq(url.uploadFile, \".\")) {\n            warnings.push([\"upload-stdin\", \"uploading from stdin isn't supported\"]);\n        }\n        methodCallArgs.push(\"file\");\n        javaCode +=\n            \"File file = new File(\" + repr(url.uploadFile, imports) + \");\\n\\n\";\n        imports.add(\"java.io.File\");\n    }\n    else if (request.multipartUploads) {\n        methodCallArgs.push(\"requestBody\");\n        javaCode += \"RequestBody requestBody = new MultipartBody.Builder()\\n\";\n        javaCode += \"    .setType(MultipartBody.FORM)\\n\";\n        for (const m of request.multipartUploads) {\n            const args = [repr(m.name, imports)];\n            if (\"content\" in m) {\n                args.push(repr(m.content, imports));\n            }\n            else {\n                if (\"filename\" in m && m.filename) {\n                    if (!eq(m.filename, m.contentFile)) {\n                        args.push(repr(m.filename, imports));\n                    }\n                    args.push(\"RequestBody.create(\" +\n                        '\"\", ' + // TODO: this is the media type\n                        \"new File(\" +\n                        repr(m.contentFile, imports) +\n                        \"))\");\n                    imports.add(\"java.io.File\");\n                }\n                else {\n                    // TODO: import\n                    // TODO: probably doesn't work\n                    args.push(\"Files.readAllBytes(\" + repr(m.contentFile, imports) + \")\");\n                }\n            }\n            javaCode += \"    .addFormDataPart(\" + args.join(\", \") + \")\\n\";\n        }\n        javaCode += \"    .build();\\n\\n\";\n        imports.add(\"okhttp3.RequestBody\");\n        imports.add(\"okhttp3.MultipartBody\");\n    }\n    else if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        // TODO: surely --upload-file and this can't be identical,\n        // doesn't this ignore url encoding?\n        methodCallArgs.push(\"file\");\n        javaCode +=\n            \"File file = new File(\" +\n                repr(request.dataArray[0].filename, imports) +\n                \");\\n\\n\";\n        imports.add(\"java.io.File\");\n    }\n    else if (request.data) {\n        const contentType = request.headers.getContentType();\n        if (contentType === \"application/x-www-form-urlencoded\") {\n            const [queryList] = parseQueryString(request.data);\n            if (!queryList) {\n                methodCallArgs.push(\"requestBody\");\n                javaCode +=\n                    \"String requestBody = \" + repr(request.data, imports) + \";\\n\\n\";\n            }\n            else {\n                methodCallArgs.push(\"formBody\");\n                javaCode += \"RequestBody formBody = new FormBody.Builder()\\n\";\n                for (const [name, value] of queryList) {\n                    javaCode +=\n                        \"    .add(\" +\n                            repr(name, imports) +\n                            \", \" +\n                            repr(value, imports) +\n                            \")\\n\";\n                }\n                javaCode += \"    .build();\\n\\n\";\n                imports.add(\"okhttp3.FormBody\");\n                imports.add(\"okhttp3.RequestBody\");\n            }\n        }\n        else {\n            methodCallArgs.push(\"requestBody\");\n            javaCode +=\n                \"String requestBody = \" + repr(request.data, imports) + \";\\n\\n\";\n        }\n    }\n    javaCode += \"Request request = new Request.Builder()\\n\";\n    javaCode += \"    .url(\" + repr(url.url, imports) + \")\\n\";\n    const methods = [\"DELETE\", \"GET\", \"HEAD\", \"PATCH\", \"POST\", \"PUT\"];\n    const dataMethods = [\"DELETE\", \"PATCH\", \"POST\", \"PUT\"];\n    const method = url.method;\n    let methodCall = \"method\";\n    if (!method.isString() ||\n        !methods.includes(method.toString()) ||\n        // If we appended something to methodCallArgs it means we need to send data\n        (methodCallArgs.length && !dataMethods.includes(method.toString()))) {\n        methodCallArgs.unshift(repr(method, imports));\n    }\n    else {\n        methodCall = method.toString().toLowerCase();\n    }\n    if (methodCall !== \"get\") {\n        javaCode += \"    .\" + methodCall + \"(\" + methodCallArgs.join(\", \") + \")\\n\";\n    }\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                continue;\n            }\n            javaCode +=\n                \"    .header(\" +\n                    repr(headerName, imports) +\n                    \", \" +\n                    repr(headerValue, imports) +\n                    \")\\n\";\n        }\n    }\n    if (url.auth) {\n        const authHeader = request.headers.lowercase\n            ? \"authorization\"\n            : \"Authorization\";\n        javaCode += '    .header(\"' + authHeader + '\", credential)\\n';\n    }\n    javaCode += \"    .build();\\n\";\n    javaCode += \"\\n\";\n    javaCode += \"try (Response response = client.newCall(request).execute()) {\\n\";\n    javaCode +=\n        '    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\\n';\n    javaCode += \"    response.body().string();\\n\";\n    javaCode += \"}\\n\";\n    let preambleCode = \"\";\n    for (const imp of Array.from(imports).sort()) {\n        preambleCode += \"import \" + imp + \";\\n\";\n    }\n    if (imports.size) {\n        preambleCode += \"\\n\";\n    }\n    if (imports.has(\"java.lang.Runtime\")) {\n        // Helper function that runs a bash command and always returns a string\n        preambleCode += \"public static String exec(String cmd) {\\n\";\n        preambleCode += \"    try {\\n\";\n        preambleCode += \"        Process p = Runtime.getRuntime().exec(cmd);\\n\";\n        preambleCode += \"        p.waitFor();\\n\";\n        preambleCode +=\n            '        Scanner s = new Scanner(p.getInputStream()).useDelimiter(\"\\\\\\\\A\");\\n';\n        preambleCode += '        return s.hasNext() ? s.next() : \"\";\\n';\n        preambleCode += \"    } catch (Exception e) {\\n\";\n        preambleCode += '        return \"\";\\n';\n        preambleCode += \"    }\\n\";\n        preambleCode += \"}\\n\";\n        preambleCode += \"\\n\";\n    }\n    return preambleCode + javaCode + \"\\n\";\n}\nexport function toJavaOkHttpWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const java = _toJavaOkHttp(requests, warnings);\n    return [java, warnings];\n}\nexport function toJavaOkHttp(curlCommand) {\n    return toJavaOkHttpWarn(curlCommand)[0];\n}\n//# sourceMappingURL=okhttp.js.map","import { isInt } from \"../../utils.js\";\nimport { Word, eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { reprStr, repr, reprStringToStringList, reprObj, toURLSearchParams, asParseFloatTimes1000, addImport, reprImports, } from \"./javascript.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"form\",\n    \"form-string\",\n    \"proxy\",\n    \"proxy-user\",\n]);\n// TODO: @\nfunction _getDataString(request, imports) {\n    if (!request.data) {\n        return [null, null];\n    }\n    const originalStringRepr = repr(request.data, imports);\n    const contentType = request.headers.getContentType();\n    // can have things like ; charset=utf-8 which we want to preserve\n    const exactContentType = request.headers.get(\"content-type\");\n    if (contentType === \"application/json\" && request.data.isString()) {\n        const dataStr = request.data.toString();\n        const parsed = JSON.parse(dataStr);\n        // Only arrays and {} can be passed to axios to be encoded as JSON\n        // TODO: check this in other generators\n        if (typeof parsed !== \"object\" || parsed === null) {\n            return [originalStringRepr, null];\n        }\n        const roundtrips = JSON.stringify(parsed) === dataStr;\n        const jsonAsJavaScript = reprObj(parsed, 1);\n        if (roundtrips &&\n            eq(exactContentType, \"application/json\") &&\n            eq(request.headers.get(\"accept\"), \"application/json, text/plain, */*\")) {\n            request.headers.delete(\"content-type\");\n            request.headers.delete(\"accept\");\n        }\n        return [jsonAsJavaScript, roundtrips ? null : originalStringRepr];\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        const [queryList, queryDict] = parseQueryString(request.data);\n        if (queryList) {\n            // Technically axios sends\n            // application/x-www-form-urlencoded;charset=utf-8\n            if (eq(exactContentType, \"application/x-www-form-urlencoded\")) {\n                request.headers.delete(\"content-type\");\n            }\n            // TODO: check roundtrip, add a comment\n            return [toURLSearchParams([queryList, queryDict], imports), null];\n        }\n        else {\n            return [originalStringRepr, null];\n        }\n    }\n    return [null, null];\n}\nfunction getDataString(request, imports) {\n    if (!request.data) {\n        return [null, null];\n    }\n    let dataString = null;\n    let commentedOutDataString = null;\n    try {\n        [dataString, commentedOutDataString] = _getDataString(request, imports);\n    }\n    catch (_a) { }\n    if (!dataString) {\n        dataString = repr(request.data, imports);\n    }\n    return [dataString, commentedOutDataString];\n}\nfunction buildConfigObject(request, method, methodStr, methods, dataMethods, hasSearchParams, imports) {\n    let code = \"{\\n\";\n    if (!methods.includes(methodStr)) {\n        // Axios uppercases methods\n        code += \"  method: \" + repr(method, imports) + \",\\n\";\n    }\n    if (hasSearchParams) {\n        // code += \"  params,\\n\";\n        code += \"  params: params,\\n\";\n    }\n    else if (request.urls[0].queryDict) {\n        code +=\n            \"  params: \" +\n                reprStringToStringList(request.urls[0].queryDict, 1, imports) +\n                \",\\n\";\n    }\n    const [dataString, commentedOutDataString] = getDataString(request, imports); // can delete headers\n    if (request.headers.length || request.multipartUploads) {\n        code += \"  headers: {\\n\";\n        if (request.multipartUploads) {\n            code += \"    ...form.getHeaders(),\\n\";\n        }\n        for (const [key, value] of request.headers) {\n            code +=\n                \"    \" +\n                    repr(key, imports) +\n                    \": \" +\n                    repr(value !== null && value !== void 0 ? value : new Word(), imports) +\n                    \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2);\n            code += \"\\n\";\n        }\n        code += \"  },\\n\";\n    }\n    if (request.urls[0].auth) {\n        const [username, password] = request.urls[0].auth;\n        code += \"  auth: {\\n\";\n        code += \"    username: \" + repr(username, imports);\n        if (password.toBool()) {\n            code += \",\\n\";\n            code += \"    password: \" + repr(password, imports) + \"\\n\";\n        }\n        else {\n            code += \"\\n\";\n        }\n        code += \"  },\\n\";\n    }\n    if (!dataMethods.includes(methodStr)) {\n        if (request.multipartUploads) {\n            code += \"  data: form,\\n\";\n        }\n        else if (request.data) {\n            if (commentedOutDataString) {\n                code += \"  // data: \" + commentedOutDataString + \",\\n\";\n            }\n            code += \"  data: \" + dataString + \",\\n\";\n        }\n    }\n    if (request.timeout) {\n        if (parseFloat(request.timeout.toString()) !== 0) {\n            code +=\n                \"  timeout: \" + asParseFloatTimes1000(request.timeout, imports) + \",\\n\";\n        }\n    }\n    if (request.proxy && request.proxy.toString() === \"\") {\n        // TODO: this probably won't be set if it's empty\n        // TODO: could have --socks5 proxy\n        code += \"  proxy: false,\\n\";\n    }\n    else if (request.proxy) {\n        // TODO: do this parsing in utils.ts\n        const proxy = request.proxy.includes(\"://\")\n            ? request.proxy\n            : request.proxy.prepend(\"http://\");\n        let [protocol, host] = proxy.split(\"://\", 2);\n        protocol =\n            protocol.toLowerCase().toString() === \"socks\"\n                ? new Word(\"socks4\")\n                : protocol.toLowerCase();\n        let port = \"1080\";\n        const proxyPart = host.match(/:([0-9]+$)/); // TODO: this shouldn't be a regex\n        if (proxyPart) {\n            host = host.slice(0, proxyPart.index);\n            port = proxyPart[1];\n        }\n        code += \"  proxy: {\\n\";\n        code += \"    protocol: \" + repr(protocol, imports) + \",\\n\";\n        code += \"    host: \" + repr(host, imports) + \",\\n\";\n        if (isInt(port)) {\n            code += \"    port: \" + port + \",\\n\";\n        }\n        else {\n            code += \"    port: \" + reprStr(port) + \",\\n\";\n        }\n        if (request.proxyAuth) {\n            const [proxyUser, proxyPassword] = request.proxyAuth.split(\":\", 2);\n            code += \"    auth: {\\n\";\n            code += \"      user: \" + repr(proxyUser, imports);\n            if (proxyPassword !== undefined) {\n                code += \",\\n\";\n                code += \"      password: \" + repr(proxyPassword, imports) + \"\\n\";\n            }\n            else {\n                code += \"\\n\";\n            }\n            code += \"    },\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2);\n            code += \"\\n\";\n        }\n        code += \"  },\\n\";\n    }\n    if (code.endsWith(\",\\n\")) {\n        code = code.slice(0, -2);\n    }\n    code += \"\\n}\";\n    return code;\n}\nexport function _toNodeAxios(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    let importCode = \"import axios from 'axios';\\n\";\n    const imports = [];\n    let code = \"\";\n    const hasSearchParams = request.urls[0].queryList &&\n        (!request.urls[0].queryDict ||\n            // https://stackoverflow.com/questions/42898009/multiple-fields-with-same-key-in-query-params-axios-request\n            request.urls[0].queryDict.some((q) => Array.isArray(q[1])));\n    if (hasSearchParams && request.urls[0].queryList) {\n        code += \"const params = new URLSearchParams();\\n\";\n        for (const [key, value] of request.urls[0].queryList) {\n            code +=\n                \"params.append(\" +\n                    repr(key, imports) +\n                    \", \" +\n                    repr(value, imports) +\n                    \");\\n\";\n        }\n        code += \"\\n\";\n    }\n    if (request.multipartUploads) {\n        importCode += \"import FormData from 'form-data';\\n\";\n        code += \"const form = new FormData();\\n\";\n        for (const m of request.multipartUploads) {\n            code += \"form.append(\" + repr(m.name, imports) + \", \";\n            if (\"contentFile\" in m) {\n                addImport(imports, \"* as fs\", \"fs\");\n                if (eq(m.contentFile, \"-\")) {\n                    code += \"fs.readFileSync(0).toString()\";\n                }\n                else {\n                    code += \"fs.readFileSync(\" + repr(m.contentFile, imports) + \")\";\n                }\n                if (\"filename\" in m && m.filename) {\n                    code += \", \" + repr(m.filename, imports);\n                }\n            }\n            else {\n                code += repr(m.content, imports);\n            }\n            code += \");\\n\";\n        }\n        code += \"\\n\";\n    }\n    const method = request.urls[0].method.toLowerCase();\n    const methodStr = method.toString();\n    const methods = [\"get\", \"delete\", \"head\", \"options\", \"post\", \"put\", \"patch\"];\n    code += \"const response = await axios\";\n    if (methods.includes(methodStr)) {\n        code += \".\" + methodStr;\n    }\n    code += \"(\";\n    const url = request.urls[0].queryDict || hasSearchParams\n        ? request.urls[0].urlWithoutQueryList\n        : request.urls[0].url;\n    // axios only supports posting data with these HTTP methods\n    // You can also post data with OPTIONS, but that has to go in the config object\n    const dataMethods = [\"post\", \"put\", \"patch\"];\n    let needsConfig = !!(!methods.includes(methodStr) ||\n        request.urls[0].queryList ||\n        request.urls[0].queryDict ||\n        request.headers.length ||\n        request.urls[0].auth ||\n        request.multipartUploads ||\n        (request.data && !dataMethods.includes(methodStr)) ||\n        request.timeout ||\n        request.proxy);\n    const needsData = dataMethods.includes(methodStr) &&\n        (request.data || request.multipartUploads || needsConfig);\n    let dataString, commentedOutDataString;\n    if (needsData) {\n        code += \"\\n\";\n        code += \"  \" + repr(url, imports) + \",\\n\";\n        if (request.multipartUploads) {\n            code += \"  form\";\n        }\n        else if (request.data) {\n            try {\n                [dataString, commentedOutDataString] = getDataString(request, imports);\n                if (!dataString) {\n                    dataString = repr(request.data, imports);\n                }\n            }\n            catch (_a) {\n                dataString = repr(request.data, imports);\n            }\n            if (commentedOutDataString) {\n                code += \"  // \" + commentedOutDataString + \",\\n\";\n            }\n            code += \"  \" + dataString;\n        }\n        else if (needsConfig) {\n            // TODO: this works but maybe undefined would be more correct?\n            code += \"  ''\";\n        }\n    }\n    else {\n        code += repr(url, imports);\n    }\n    // getDataString() can delete a header, so we can end up with an empty config\n    needsConfig = !!(!methods.includes(methodStr) ||\n        request.urls[0].queryList ||\n        request.urls[0].queryDict ||\n        request.headers.length ||\n        request.urls[0].auth ||\n        request.multipartUploads ||\n        (request.data && !dataMethods.includes(methodStr)) ||\n        request.timeout ||\n        request.proxy);\n    if (needsConfig) {\n        const config = buildConfigObject(request, method, methodStr, methods, dataMethods, !!hasSearchParams, imports);\n        if (needsData) {\n            code += \",\\n\";\n            for (const line of config.split(\"\\n\")) {\n                code += \"  \" + line + \"\\n\";\n            }\n        }\n        else {\n            code += \", \";\n            code += config;\n        }\n    }\n    else if (needsData) {\n        code += \"\\n\";\n    }\n    code += \");\\n\";\n    importCode += reprImports(imports);\n    return importCode + \"\\n\" + code;\n}\nexport function toNodeAxiosWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const nodeAxios = _toNodeAxios(requests, warnings);\n    return [nodeAxios, warnings];\n}\nexport function toNodeAxios(curlCommand) {\n    return toNodeAxiosWarn(curlCommand)[0];\n}\n//# sourceMappingURL=axios.js.map","import { eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { reprStr, repr, reprAsStringToStringDict, reprObj, asParseFloatTimes1000, asParseInt, toURLSearchParams, addImport, bySecondElem, } from \"./javascript.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"connect-timeout\",\n    \"location\",\n    \"no-location\",\n    \"location-trusted\", // not exactly supported, just better warning message\n    \"no-location-trusted\",\n    \"max-redirs\",\n    \"compressed\",\n    \"insecure\",\n    \"http2\",\n    \"http2-prior-knowledge\",\n    \"form\",\n    \"form-string\",\n    // TODO:\n    // \"cookie-jar\", // and cookie files\n    // TODO: tls using https: and agent:\n    // TODO: proxy stuff using agent:\n    // TODO: methodRewriting: true to match curl?\n]);\nfunction getBodyString(request, imports) {\n    const contentType = request.headers.getContentType();\n    // can have things like ; charset=utf-8 which we want to preserve\n    const exactContentType = request.headers.get(\"content-type\");\n    if (request.multipartUploads) {\n        if (eq(exactContentType, \"multipart/form-data\")) {\n            // TODO: comment it out instead?\n            request.headers.delete(\"content-type\");\n        }\n        return [\"body: form\", null];\n    }\n    if (!request.data) {\n        return [null, null];\n    }\n    // TODO: @\n    const simpleString = \"body: \" + repr(request.data, imports);\n    try {\n        if (contentType === \"application/json\" && request.data.isString()) {\n            const dataStr = request.data.toString();\n            const parsed = JSON.parse(dataStr);\n            const roundtrips = JSON.stringify(parsed) === dataStr;\n            const jsonAsJavaScript = \"json: \" + reprObj(parsed, 1);\n            if (roundtrips && eq(exactContentType, \"application/json\")) {\n                request.headers.delete(\"content-type\");\n            }\n            return [jsonAsJavaScript, roundtrips ? null : simpleString];\n        }\n        if (contentType === \"application/x-www-form-urlencoded\") {\n            const [queryList, queryDict] = parseQueryString(request.data);\n            if (queryDict && queryDict.every((v) => !Array.isArray(v[1]))) {\n                if (eq(exactContentType, \"application/x-www-form-urlencoded\")) {\n                    request.headers.delete(\"content-type\");\n                }\n                return [\n                    \"form: \" +\n                        reprAsStringToStringDict(queryDict, 1, imports),\n                    null,\n                ];\n            }\n            if (queryList) {\n                return [\n                    \"body: \" +\n                        toURLSearchParams([queryList, null], imports) +\n                        \".toString()\",\n                    null,\n                ];\n            }\n        }\n    }\n    catch (_a) { }\n    return [simpleString, null];\n}\nfunction buildOptionsObject(request, method, methodStr, methods, nonDataMethods, warnings, imports) {\n    let code = \"{\\n\";\n    if (!method.isString || !methods.includes(methodStr.toUpperCase())) {\n        code += \"  method: \" + repr(method, imports) + \",\\n\";\n    }\n    if (request.urls[0].queryDict &&\n        request.urls[0].queryDict.every((v) => !Array.isArray(v[1]))) {\n        code +=\n            \"  searchParams: \" +\n                reprAsStringToStringDict(request.urls[0].queryDict, 1, imports) +\n                \",\\n\";\n    }\n    else if (request.urls[0].queryList) {\n        code +=\n            \"  searchParams: \" +\n                toURLSearchParams([request.urls[0].queryList, null], imports) +\n                \",\\n\";\n    }\n    const [bodyString, commentedOutBodyString] = getBodyString(request, imports); // can delete headers\n    if (request.headers.length) {\n        const headers = request.headers.headers.filter((h) => h[1] !== null);\n        if (headers.length) {\n            code +=\n                \"  headers: \" + reprAsStringToStringDict(headers, 1, imports) + \",\\n\";\n        }\n    }\n    if (request.urls[0].auth) {\n        const [username, password] = request.urls[0].auth;\n        code += \"  username: \" + repr(username, imports) + \",\\n\";\n        if (password.toBool()) {\n            code += \"  password: \" + repr(password, imports) + \",\\n\";\n        }\n        if (request.authType !== \"basic\") {\n            // TODO: warn\n        }\n    }\n    if (request.data || request.multipartUploads) {\n        if (commentedOutBodyString) {\n            code += \"  // \" + commentedOutBodyString + \",\\n\";\n        }\n        code += \"  \" + bodyString + \",\\n\";\n        // TODO: Does this work for HEAD?\n        if (nonDataMethods.includes(methodStr.toUpperCase())) {\n            code += \"  allowGetBody: true,\\n\";\n        }\n    }\n    if (request.timeout || request.connectTimeout) {\n        code += \"    timeout: {\\n\";\n        if (request.timeout) {\n            code +=\n                \"    request: \" +\n                    asParseFloatTimes1000(request.timeout, imports) +\n                    \",\\n\";\n        }\n        if (request.connectTimeout) {\n            code +=\n                \"    connect: \" +\n                    asParseFloatTimes1000(request.connectTimeout, imports) +\n                    \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2);\n            code += \"\\n\";\n        }\n        code += \"  },\\n\";\n    }\n    // By default, curl doesn't follow redirects but got does.\n    let followRedirects = request.followRedirects;\n    if (followRedirects === undefined) {\n        followRedirects = true;\n    }\n    let maxRedirects = request.maxRedirects\n        ? asParseInt(request.maxRedirects, imports)\n        : null;\n    const hasMaxRedirects = followRedirects &&\n        maxRedirects &&\n        maxRedirects !== \"0\" &&\n        maxRedirects !== \"10\"; // got default\n    if (!followRedirects || maxRedirects === \"0\") {\n        code += \"  followRedirect: false,\\n\";\n    }\n    else if (maxRedirects) {\n        if (maxRedirects === \"-1\") {\n            maxRedirects = \"Infinity\";\n        }\n    }\n    if (followRedirects && request.followRedirectsTrusted) {\n        warnings.push([\n            \"--location-trusted\",\n            // TODO: is this true?\n            \"got doesn't have an easy way to disable removing the Authorization: header on redirect\",\n        ]);\n    }\n    if (hasMaxRedirects) {\n        code += \"  maxRedirects: \" + maxRedirects + \",\\n\";\n    }\n    if (request.compressed === false) {\n        code += \"  decompress: false,\\n\";\n    }\n    if (request.insecure) {\n        code += \"  https: {\\n\";\n        code += \"    rejectUnauthorized: false\\n\";\n        code += \"  },\\n\";\n    }\n    if (request.http2) {\n        code += \"  http2: true,\\n\";\n    }\n    if (code.endsWith(\",\\n\")) {\n        code = code.slice(0, -2);\n    }\n    code += \"\\n}\";\n    return code;\n}\nexport function _toNodeGot(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const imports = [];\n    let code = \"\";\n    if (request.multipartUploads) {\n        code += \"const form = new FormData();\\n\";\n        for (const m of request.multipartUploads) {\n            code += \"form.append(\" + repr(m.name, imports) + \", \";\n            if (\"contentFile\" in m) {\n                addImport(imports, \"* as fs\", \"fs\");\n                if (eq(m.contentFile, \"-\")) {\n                    code += \"fs.readFileSync(0).toString()\";\n                }\n                else {\n                    code += \"fs.readFileSync(\" + repr(m.contentFile, imports) + \")\";\n                }\n                if (\"filename\" in m && m.filename) {\n                    code += \", \" + repr(m.filename, imports);\n                }\n            }\n            else {\n                code += repr(m.content, imports);\n            }\n            code += \");\\n\";\n        }\n        code += \"\\n\";\n        // TODO: remove warning once Node 16 is EOL'd on 2023-09-11\n        warnings.push([\"node-form-data\", \"Node 18 is required for FormData\"]);\n    }\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    if (method.isString() && methodStr !== methodStr.toUpperCase()) {\n        warnings.push([\n            \"lowercase-method\",\n            \"got will uppercase the method: \" + JSON.stringify(methodStr),\n        ]);\n    }\n    // https://github.com/sindresorhus/got/blob/e24b89669931b36530219b9f49965d07da25a7e6/source/create.ts#L28\n    const methods = [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"HEAD\", \"DELETE\"];\n    // Got will error if you try sending data with these HTTP methods\n    const nonDataMethods = [\"GET\", \"HEAD\"];\n    code += \"const response = await got\";\n    if (method.isString() &&\n        methods.includes(methodStr.toUpperCase()) &&\n        methodStr.toUpperCase() !== \"GET\") {\n        code += \".\" + methodStr.toLowerCase();\n    }\n    code += \"(\";\n    const url = request.urls[0].queryList\n        ? request.urls[0].urlWithoutQueryList\n        : request.urls[0].url;\n    code += repr(url, imports);\n    const needsOptions = !!(!method.isString() ||\n        !methods.includes(methodStr.toUpperCase()) ||\n        request.urls[0].queryList ||\n        request.urls[0].queryDict ||\n        request.headers.length ||\n        request.urls[0].auth ||\n        request.multipartUploads ||\n        request.data ||\n        request.followRedirects ||\n        request.maxRedirects ||\n        request.compressed ||\n        request.insecure ||\n        request.http2 ||\n        request.timeout ||\n        request.connectTimeout);\n    if (needsOptions) {\n        code += \", \";\n        code += buildOptionsObject(request, method, methodStr, methods, nonDataMethods, warnings, imports);\n    }\n    code += \");\\n\";\n    let importCode = \"import got from 'got';\\n\";\n    for (const [varName, imp] of Array.from(imports).sort(bySecondElem)) {\n        importCode += \"import \" + varName + \" from \" + reprStr(imp) + \";\\n\";\n    }\n    return importCode + \"\\n\" + code;\n}\nexport function toNodeGotWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const nodeGot = _toNodeGot(requests, warnings);\n    return [nodeGot, warnings];\n}\nexport function toNodeGot(curlCommand) {\n    return toNodeGotWarn(curlCommand)[0];\n}\n//# sourceMappingURL=got.js.map","import { eq, mergeWords, joinWords } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { repr, reprObj, asParseFloatTimes1000, toURLSearchParams, reprImports, } from \"./javascript.js\";\nimport { dedent, getFormString } from \"./jquery.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"max-time\",\n]);\n// TODO: @\nfunction _getDataString(data, contentType, imports) {\n    const originalStringRepr = repr(data, imports);\n    if (contentType === \"application/json\" && data.isString()) {\n        const dataStr = data.toString();\n        const parsed = JSON.parse(dataStr);\n        // Only format arrays and {} as JavaScript objects\n        if (typeof parsed !== \"object\" || parsed === null) {\n            return [originalStringRepr, null];\n        }\n        const roundtrips = JSON.stringify(parsed) === dataStr;\n        const jsonAsJavaScript = \"JSON.stringify(\" + reprObj(parsed, 1) + \")\";\n        return [jsonAsJavaScript, roundtrips ? null : originalStringRepr];\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        const query = parseQueryString(data);\n        if (query[0]) {\n            // if (\n            //   eq(exactContentType, \"application/x-www-form-urlencoded; charset=utf-8\")\n            // ) {\n            //   exactContentType = null;\n            // }\n            // TODO: check roundtrip, add a comment\n            return [toURLSearchParams(query, imports) + \".toString()\", null];\n        }\n    }\n    return [originalStringRepr, null];\n}\nexport function getDataString(data, contentType, imports) {\n    let dataString = null;\n    let commentedOutDataString = null;\n    try {\n        [dataString, commentedOutDataString] = _getDataString(data, contentType, imports);\n    }\n    catch (_a) { }\n    if (!dataString) {\n        dataString = repr(data, imports);\n    }\n    return [dataString, commentedOutDataString];\n}\nexport function _toNodeHttp(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const imports = [];\n    let importCode = \"\";\n    let code = \"\";\n    let options = \"\";\n    const method = request.urls[0].method;\n    if (!eq(method, \"GET\")) {\n        options += \"  method: \" + repr(method, imports) + \",\\n\";\n    }\n    if (!eq(request.urls[0].method.toUpperCase(), method)) {\n        warnings.push([\n            \"method-case\",\n            \"http uppercases the method, so it will be changed to \" +\n                JSON.stringify(method.toUpperCase().toString()),\n        ]);\n    }\n    const url = request.urls[0].url;\n    let dataString, commentedOutDataString;\n    let formString;\n    const contentType = request.headers.getContentType();\n    if (request.multipartUploads) {\n        formString = getFormString(request.multipartUploads, imports);\n        code += formString;\n        // Node 18's native FormData doesn't have .pipe() or .getHeaders()\n        importCode += \"import FormData from 'form-data';\\n\";\n    }\n    else if (request.data) {\n        [dataString, commentedOutDataString] = getDataString(request.data, contentType, imports);\n    }\n    if (request.urls[0].auth) {\n        const [username, password] = request.urls[0].auth;\n        options +=\n            \"  auth: \" + repr(joinWords([username, password], \":\"), imports) + \",\\n\";\n    }\n    // TODO: warn about unsent headers\n    if (request.headers.length) {\n        options += \"  headers: {\\n\";\n        for (const [key, value] of request.headers) {\n            if (value === null) {\n                continue;\n            }\n            options +=\n                \"    \" + repr(key, imports) + \": \" + repr(value, imports) + \",\\n\";\n        }\n        if (formString) {\n            options += \"    ...form.getHeaders(),\\n\";\n        }\n        if (options.endsWith(\",\\n\")) {\n            options = options.slice(0, -2);\n            options += \"\\n\";\n        }\n        options += \"  },\\n\";\n    }\n    else if (formString) {\n        options += \"  headers: form.getHeaders(),\\n\";\n    }\n    if (request.timeout) {\n        options +=\n            \"  timeout: \" + asParseFloatTimes1000(request.timeout, imports) + \",\\n\";\n        // TODO: warn about differences from curl\n    }\n    if (options.endsWith(\",\\n\")) {\n        options = options.slice(0, -2);\n        options += \"\\n\";\n    }\n    const urlObj = request.urls[0].urlObj;\n    let optArg = repr(url, imports);\n    if (options) {\n        code += \"const options = {\\n\";\n        code += \"  hostname: \" + repr(urlObj.host, imports) + \",\\n\";\n        if (urlObj.host.includes(\":\")) {\n            // TODO\n            // code += \"  port: \" + repr(request.urls[0].urlObj.port, imports) + \",\\n\";\n            warnings.push([\n                \"node-http-port\",\n                \"Parsing the port out of the hostname is not supported. If you get an ENOTFOUND error, you'll need to do it manually\",\n            ]);\n        }\n        const path = mergeWords(urlObj.path, urlObj.query);\n        if (path.toBool()) {\n            code += \"  path: \" + repr(path, imports) + \",\\n\";\n        }\n        // code += \"  protocol: \" + repr(urlObj.scheme, imports) + \",\\n\";\n        code += options;\n        code += \"};\\n\";\n        code += \"\\n\";\n        optArg = \"options\";\n    }\n    const module = urlObj.scheme.toString() === \"https\" ? \"https\" : \"http\";\n    const fn = eq(method, \"GET\") && !dataString && !commentedOutDataString && !formString\n        ? \"get\"\n        : \"request\";\n    code +=\n        \"const req = \" + module + \".\" + fn + \"(\" + optArg + \", function (res) {\\n\";\n    code += \"  const chunks = [];\\n\";\n    code += \"\\n\";\n    code += \"  res.on('data', function (chunk) {\\n\";\n    code += \"    chunks.push(chunk);\\n\";\n    code += \"  });\\n\";\n    code += \"\\n\";\n    code += \"  res.on('end', function () {\\n\";\n    code += \"    const body = Buffer.concat(chunks);\\n\";\n    code += \"    console.log(body.toString());\\n\";\n    code += \"  });\\n\";\n    code += \"});\\n\";\n    if (commentedOutDataString) {\n        code += \"\\n// req.write(\" + commentedOutDataString + \");\";\n    }\n    if (dataString) {\n        code += \"\\nreq.write(\" + dedent(dataString) + \");\\n\";\n    }\n    else if (formString) {\n        code += \"\\nform.pipe(req);\\n\";\n    }\n    if (fn !== \"get\" && !formString) {\n        code += \"req.end();\\n\";\n    }\n    importCode = \"import \" + module + \" from '\" + module + \"';\\n\" + importCode;\n    importCode += reprImports(imports);\n    importCode += \"\\n\";\n    return importCode + code;\n}\nexport function toNodeHttpWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toNodeHttp(requests, warnings);\n    return [code, warnings];\n}\nexport function toNodeHttp(curlCommand) {\n    return toNodeHttpWarn(curlCommand)[0];\n}\n//# sourceMappingURL=http.js.map","import { warnIfPartsIgnored } from \"../../Warnings.js\";\nimport { Word, eq, joinWords } from \"../../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport jsescObj from \"jsesc\";\nexport const javaScriptSupportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"upload-file\",\n    \"form\",\n    \"form-string\",\n    \"digest\",\n    \"no-digest\",\n    \"next\",\n    // --no-compressed (the default) is unsupported though\n    \"compressed\",\n]);\nexport const nodeSupportedArgs = new Set([...javaScriptSupportedArgs, \"proxy\"]);\n// https://fetch.spec.whatwg.org/#forbidden-method\nexport const FORBIDDEN_METHODS = [\"CONNECT\", \"TRACE\", \"TRACK\"];\n// https://fetch.spec.whatwg.org/#forbidden-request-header\nexport const FORBIDDEN_HEADERS = [\n    \"Accept-Charset\",\n    \"Accept-Encoding\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Cookie\",\n    \"Cookie2\",\n    \"Date\",\n    \"DNT\",\n    \"Expect\",\n    \"Host\",\n    \"Keep-Alive\",\n    \"Origin\",\n    \"Referer\",\n    \"Set-Cookie\",\n    \"TE\",\n    \"Trailer\",\n    \"Transfer-Encoding\",\n    \"Upgrade\",\n    \"Via\",\n].map((h) => h.toLowerCase());\n// TODO: implement?\nexport function reprObj(value, indentLevel) {\n    const escaped = jsescObj(value, {\n        quotes: \"single\",\n        minimal: false,\n        compact: false,\n        indent: \"  \",\n        indentLevel: indentLevel ? indentLevel : 0,\n    });\n    if (typeof value === \"string\") {\n        return \"'\" + escaped + \"'\";\n    }\n    return escaped;\n}\nexport function reprPairs(d, indentLevel = 0, indent = \"  \", list = true, imports) {\n    if (d.length === 0) {\n        return list ? \"[]\" : \"{}\";\n    }\n    let code = list ? \"[\\n\" : \"{\\n\";\n    for (const [i, [key, value]] of d.entries()) {\n        code += indent.repeat(indentLevel + 1);\n        if (list) {\n            code += \"[\" + repr(key, imports) + \", \" + repr(value, imports) + \"]\";\n        }\n        else {\n            code += repr(key, imports) + \": \" + repr(value, imports);\n        }\n        code += i < d.length - 1 ? \",\\n\" : \"\\n\";\n    }\n    code += indent.repeat(indentLevel) + (list ? \"]\" : \"}\");\n    return code;\n}\nexport function reprAsStringToStringDict(d, indentLevel = 0, imports, indent = \"  \") {\n    return reprPairs(d, indentLevel, indent, false, imports);\n}\nexport function reprAsStringTuples(d, indentLevel = 0, imports, indent = \"  \") {\n    return reprPairs(d, indentLevel, indent, true, imports);\n}\nexport function reprStringToStringList(d, indentLevel = 0, imports, indent = \"  \", list = true) {\n    if (d.length === 0) {\n        return list ? \"[]\" : \"{}\";\n    }\n    let code = \"{\\n\";\n    for (const [i, [key, value]] of d.entries()) {\n        let valueStr;\n        if (Array.isArray(value)) {\n            valueStr = \"[\" + value.map((v) => repr(v, imports)).join(\", \") + \"]\";\n        }\n        else {\n            valueStr = repr(value, imports);\n        }\n        code += indent.repeat(indentLevel + 1);\n        code += repr(key, imports) + \": \" + valueStr;\n        code += i < d.length - 1 ? \",\\n\" : \"\\n\";\n    }\n    code += indent.repeat(indentLevel) + \"}\";\n    return code;\n}\n// Backtick quotes are not supported\nconst regexEscape = /'|\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nconst regexDigit = /[0-9]/;\nexport function esc(s, quote = \"'\") {\n    return s.replace(regexEscape, (c, index, string) => {\n        switch (c[0]) {\n            // https://mathiasbynens.be/notes/javascript-escapes#single\n            case \"\\\\\":\n                return \"\\\\\\\\\";\n            case \"\\b\":\n                return \"\\\\b\";\n            case \"\\f\":\n                return \"\\\\f\";\n            case \"\\n\":\n                return \"\\\\n\";\n            case \"\\r\":\n                return \"\\\\r\";\n            case \"\\t\":\n                return \"\\\\t\";\n            case \"\\v\":\n                return \"\\\\v\";\n            case \"'\":\n            case '\"':\n                return c === quote ? \"\\\\\" + c : c;\n            case \"\\0\":\n                // \\0 is null but \\01 is an octal escape\n                // if we have ['\\0', '1', '2']\n                // and we converted it to '\\\\012', it would be interpreted as octal\n                // so it needs to be converted to '\\\\x0012'\n                if (!regexDigit.test(string.charAt(index + 1))) {\n                    return \"\\\\0\";\n                }\n                break;\n        }\n        if (c.length === 2) {\n            const first = c.charCodeAt(0);\n            const second = c.charCodeAt(1);\n            return (\"\\\\u\" +\n                first.toString(16).padStart(4, \"0\") +\n                \"\\\\u\" +\n                second.toString(16).padStart(4, \"0\"));\n        }\n        const hex = c.charCodeAt(0).toString(16);\n        if (hex.length > 2) {\n            return \"\\\\u\" + hex.padStart(4, \"0\");\n        }\n        return \"\\\\x\" + hex.padStart(2, \"0\");\n    });\n}\nexport function reprStr(s, quote) {\n    if (quote === undefined) {\n        quote = \"'\";\n        if (s.includes(\"'\") && !s.includes('\"')) {\n            quote = '\"';\n        }\n    }\n    return quote + esc(s, quote) + quote;\n}\nexport function addImport(imports, name, from) {\n    // TODO: this is linear\n    for (const [n, f] of imports) {\n        if (n === name && f === from)\n            return;\n    }\n    imports.push([name, from]);\n}\nexport function reprImports(imports) {\n    let ret = \"\";\n    for (const [name, from] of imports.sort(bySecondElem)) {\n        if (name.startsWith(\"* as\")) {\n            ret += `import ${name} from ${reprStr(from)};\\n`;\n        }\n        else {\n            ret += `import { ${name} } from ${reprStr(from)};\\n`;\n        }\n    }\n    return ret;\n}\nexport function reprImportsRequire(imports) {\n    const ret = [];\n    if (imports.length === 0) {\n        return \"\";\n    }\n    for (const [name, from] of imports.sort(bySecondElem)) {\n        if (name.startsWith(\"* as \")) {\n            ret.push(`const ${name.slice(\"* as \".length)} = require(${reprStr(from)});`);\n        }\n        else if (name.includes(\".\")) {\n            ret.push(`const ${name} = require(${reprStr(from)}).${name};`);\n        }\n        else {\n            ret.push(`const ${name} = require(${reprStr(from)});`);\n        }\n    }\n    return ret.join(\"\\n\") + \"\\n\";\n}\nexport function repr(w, imports) {\n    // Node\n    const ret = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            ret.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            ret.push(\"process.env[\" + reprStr(t.value) + \"]\");\n        }\n        else {\n            ret.push(\"execSync(\" + reprStr(t.value) + \").stdout\");\n            addImport(imports, \"execSync\", \"node:child_process\");\n        }\n    }\n    return ret.join(\" + \");\n}\nexport function reprBrowser(w, warnings) {\n    const ret = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            ret.push(reprStr(t));\n        }\n        else {\n            ret.push(reprStr(t.text));\n            if (t.type === \"variable\") {\n                warnings.push([\n                    \"browser-has-no-env\",\n                    \"Can't access environment variable in browser JS: \" +\n                        JSON.stringify(t.value),\n                ]);\n            }\n            else {\n                warnings.push([\n                    \"browser-has-no-shell\",\n                    \"Can't run subcommands in browser JS: \" + JSON.stringify(t.value),\n                ]);\n            }\n        }\n    }\n    return ret.join(\" + \");\n}\nexport function reprFetch(w, isNode, imports) {\n    if (!isNode) {\n        // TODO: warn\n        return reprStr(w.toString());\n    }\n    return repr(w, imports);\n}\nexport function asParseFloat(w, imports) {\n    if (w.isString()) {\n        const originalValue = w.toString();\n        // TODO: reimplement curl's float parsing instead of parseFloat()\n        const asFloat = parseFloat(originalValue);\n        if (!isNaN(asFloat)) {\n            return originalValue;\n        }\n    }\n    return \"parseFloat(\" + repr(w, imports) + \")\";\n}\nexport function asParseFloatTimes1000(w, imports) {\n    if (w.isString()) {\n        const originalValue = w.toString();\n        // TODO: reimplement curl's float parsing instead of parseFloat()\n        // TODO: check overflow\n        const asFloat = parseFloat(originalValue) * 1000;\n        if (!isNaN(asFloat)) {\n            return asFloat.toString();\n        }\n    }\n    return \"parseFloat(\" + repr(w, imports) + \") * 1000\";\n}\nexport function asParseInt(w, imports) {\n    if (w.isString()) {\n        const originalValue = w.toString();\n        // TODO: reimplement curl's int parsing instead of parseInt()\n        const asInt = parseInt(originalValue);\n        if (!isNaN(asInt)) {\n            return originalValue;\n        }\n    }\n    return \"parseInt(\" + repr(w, imports) + \")\";\n}\nexport function bySecondElem(a, b) {\n    return a[1].localeCompare(b[1]);\n}\nexport function toURLSearchParams(query, imports, indent = 1) {\n    const [queryList, queryDict] = query;\n    const queryObj = queryDict && queryDict.every((q) => !Array.isArray(q[1]))\n        ? reprAsStringToStringDict(queryDict, indent, imports)\n        : reprAsStringTuples(queryList, indent, imports);\n    return \"new URLSearchParams(\" + queryObj + \")\";\n}\nexport function toDictOrURLSearchParams(query, imports, indent = 1) {\n    const [queryList, queryDict] = query;\n    if (queryDict && queryDict.every((v) => !Array.isArray(v[1]))) {\n        return reprAsStringToStringDict(queryDict, indent, imports);\n    }\n    return (\"new URLSearchParams(\" +\n        reprAsStringTuples(queryList, indent, imports) +\n        \")\");\n}\nexport function toFormData(multipartUploads, imports, fetchImports, warnings, isNode = true) {\n    let code = \"new FormData();\\n\";\n    for (const m of multipartUploads) {\n        // TODO: use .set() if all names are unique?\n        code += \"form.append(\" + reprFetch(m.name, isNode, imports) + \", \";\n        if (\"contentFile\" in m) {\n            if (isNode) {\n                if (eq(m.contentFile, \"-\")) {\n                    addImport(imports, \"* as fs\", \"fs\");\n                    code += \"fs.readFileSync(0).toString()\";\n                    if (m.filename) {\n                        code += \", \" + reprFetch(m.filename, isNode, imports);\n                    }\n                }\n                else {\n                    fetchImports.add(\"fileFromSync\");\n                    // TODO: do this in a way that doesn't set filename=\"\" if we don't have filename\n                    code +=\n                        \"fileFromSync(\" + reprFetch(m.contentFile, isNode, imports) + \")\";\n                }\n            }\n            else {\n                // TODO: does the second argument get sent as filename=\"\" ?\n                code +=\n                    \"File(['<data goes here>'], \" +\n                        reprFetch(m.contentFile, isNode, imports) +\n                        \")\";\n                // TODO: (massive todo) we could read the file if we're running in the command line\n                warnings.push([\n                    \"--form\",\n                    \"you can't read a file for --form/-F in the browser\",\n                ]);\n            }\n        }\n        else {\n            code += reprFetch(m.content, isNode, imports);\n        }\n        code += \");\\n\";\n    }\n    return code;\n}\nfunction getDataString(request, data, isNode, imports) {\n    const originalStringRepr = reprFetch(data, isNode, imports);\n    const contentType = request.headers.getContentType();\n    if (contentType === \"application/json\") {\n        try {\n            const dataStr = data.toString();\n            const parsed = JSON.parse(dataStr);\n            // Only bother for arrays and {}\n            if (typeof parsed !== \"object\" || parsed === null) {\n                return [originalStringRepr, null];\n            }\n            const roundtrips = JSON.stringify(parsed) === dataStr;\n            const jsonAsJavaScript = reprObj(parsed, 1);\n            const dataString = \"JSON.stringify(\" + jsonAsJavaScript + \")\";\n            return [dataString, roundtrips ? null : originalStringRepr];\n        }\n        catch (_a) {\n            return [originalStringRepr, null];\n        }\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        try {\n            const [queryList, queryDict] = parseQueryString(data);\n            if (queryList) {\n                // Technically node-fetch sends\n                // application/x-www-form-urlencoded;charset=utf-8\n                // TODO: handle repeated content-type header\n                if (eq(request.headers.get(\"content-type\"), \"application/x-www-form-urlencoded\")) {\n                    request.headers.delete(\"content-type\");\n                }\n                // TODO: check roundtrip, add a comment\n                // TODO: this isn't a dict anymore\n                return [toURLSearchParams([queryList, queryDict], imports), null];\n            }\n            return [originalStringRepr, null];\n        }\n        catch (_b) {\n            return [originalStringRepr, null];\n        }\n    }\n    return [originalStringRepr, null];\n}\nexport function getData(request, isNode, imports) {\n    if (!request.dataArray || request.multipartUploads) {\n        return [\"\", null];\n    }\n    if (request.dataArray.length === 1 &&\n        request.dataArray[0] instanceof Word &&\n        request.dataArray[0].isString()) {\n        try {\n            return getDataString(request, request.dataArray[0], isNode, imports);\n        }\n        catch (_a) { }\n    }\n    const parts = [];\n    const hasBinary = request.dataArray.some((d) => !(d instanceof Word) && d.filetype === \"binary\");\n    const encoding = hasBinary ? \"\" : \", 'utf-8'\";\n    for (const d of request.dataArray) {\n        if (d instanceof Word) {\n            parts.push(repr(d, imports));\n        }\n        else {\n            const { filetype, name, filename } = d;\n            if (filetype === \"urlencode\" && name) {\n                // TODO: add this to the previous Word\n                parts.push(reprFetch(name, isNode, imports));\n            }\n            // TODO: use the filetype\n            if (eq(filename, \"-\")) {\n                if (isNode) {\n                    addImport(imports, \"* as fs\", \"fs\");\n                    parts.push(\"fs.readFileSync(0\" + encoding + \")\");\n                }\n                else {\n                    // TODO: something else\n                    // TODO: warn that file needs content\n                    parts.push(\"new File([/* contents */], '<stdin>')\");\n                }\n            }\n            else {\n                if (isNode) {\n                    addImport(imports, \"* as fs\", \"fs\");\n                    parts.push(\"fs.readFileSync(\" +\n                        reprFetch(filename, isNode, imports) +\n                        encoding +\n                        \")\");\n                }\n                else {\n                    // TODO: warn that file needs content\n                    parts.push(\"new File([/* contents */], \" +\n                        reprFetch(filename, isNode, imports) +\n                        \")\");\n                }\n            }\n        }\n    }\n    if (parts.length === 0) {\n        return [\"''\", null];\n    }\n    if (parts.length === 1) {\n        return [parts[0], null];\n    }\n    let [start, joiner, end] = [\"new ArrayBuffer(\", \", \", \")\"];\n    const totalLength = parts.reduce((a, b) => a + b.length, 0);\n    if (totalLength > 80) {\n        start += \"\\n    \";\n        joiner = \",\\n    \";\n        end = \"\\n  )\";\n    }\n    return [start + parts.join(joiner) + end, null];\n}\nfunction requestToJavaScriptOrNode(request, warnings, fetchImports, imports, isNode) {\n    warnIfPartsIgnored(request, warnings, {\n        multipleUrls: true,\n        dataReadsFile: true,\n        // Not actually supported, just warned per-URL\n        queryReadsFile: true,\n    });\n    let code = \"\";\n    if (request.multipartUploads) {\n        if (isNode) {\n            // TODO: remove once Node 16 is EOL'd on 2023-09-11\n            fetchImports.add(\"FormData\");\n        }\n        code +=\n            \"const form = \" +\n                toFormData(request.multipartUploads, imports, fetchImports, warnings, isNode);\n        code += \"\\n\";\n    }\n    // Can delete content-type header\n    const [dataString, commentedOutDataString] = getData(request, isNode, imports);\n    let fn = \"fetch\";\n    if (request.urls[0].auth && request.authType === \"digest\") {\n        // TODO: if 'Authorization:' header is specified, don't set this\n        const [user, password] = request.urls[0].auth;\n        addImport(imports, \"* as DigestFetch\", \"digest-fetch\");\n        code +=\n            \"const client = new DigestFetch(\" +\n                reprFetch(user, isNode, imports) +\n                \", \" +\n                reprFetch(password, isNode, imports) +\n                \");\\n\";\n        fn = \"client.fetch\";\n    }\n    for (const urlObj of request.urls) {\n        code += fn + \"(\" + reprFetch(urlObj.url, isNode, imports);\n        if (urlObj.queryReadsFile) {\n            warnings.push([\n                \"unsafe-query\",\n                // TODO: better wording\n                \"the URL query string is not correct, \" +\n                    JSON.stringify(\"@\" + urlObj.queryReadsFile) +\n                    \" means it should read the file \" +\n                    JSON.stringify(urlObj.queryReadsFile),\n            ]);\n        }\n        const method = urlObj.method.toLowerCase();\n        const methodStr = urlObj.method.toString();\n        if (method.isString() && FORBIDDEN_METHODS.includes(methodStr)) {\n            warnings.push([\n                \"forbidden-method\",\n                \"the method \" +\n                    JSON.stringify(methodStr) +\n                    \" is not allowed in fetch()\",\n            ]);\n        }\n        let optionsCode = \"\";\n        if (!eq(method, \"get\")) {\n            // TODO: If you pass a weird method to fetch() it won't uppercase it\n            // const methods = []\n            // const method = methods.includes(request.method.toLowerCase()) ? request.method.toUpperCase() : request.method\n            optionsCode +=\n                \"  method: \" + reprFetch(urlObj.method, isNode, imports) + \",\\n\";\n        }\n        if (request.headers.length ||\n            (urlObj.auth && request.authType === \"basic\")) {\n            optionsCode += \"  headers: {\\n\";\n            for (const [headerName, headerValue] of request.headers) {\n                optionsCode +=\n                    \"    \" +\n                        reprFetch(headerName, isNode, imports) +\n                        \": \" +\n                        reprFetch(headerValue || new Word(), isNode, imports) +\n                        \",\\n\";\n                if (!isNode &&\n                    headerName.isString() &&\n                    FORBIDDEN_HEADERS.includes(headerName.toString().toLowerCase())) {\n                    warnings.push([\n                        \"forbidden-header\",\n                        JSON.stringify(headerName.toString()) +\n                            \" header is forbidden in fetch()\",\n                    ]);\n                }\n            }\n            if (urlObj.auth && request.authType === \"basic\") {\n                // TODO: if -H 'Authorization:' is passed, don't set this\n                optionsCode +=\n                    \"    'Authorization': 'Basic ' + btoa(\" +\n                        reprFetch(joinWords(urlObj.auth, \":\"), isNode, imports) +\n                        \"),\\n\";\n            }\n            if (optionsCode.endsWith(\",\\n\")) {\n                optionsCode = optionsCode.slice(0, -2);\n                optionsCode += \"\\n\";\n            }\n            optionsCode += \"  },\\n\";\n        }\n        if (urlObj.uploadFile) {\n            if (isNode) {\n                fetchImports.add(\"fileFromSync\");\n                optionsCode +=\n                    \"  body: fileFromSync(\" +\n                        reprFetch(urlObj.uploadFile, isNode, imports) +\n                        \"),\\n\";\n            }\n            else {\n                optionsCode +=\n                    \"  body: File(['<data goes here>'], \" +\n                        reprFetch(urlObj.uploadFile, isNode, imports) +\n                        \"),\\n\";\n                warnings.push([\n                    \"--form\",\n                    \"you can't read a file for --upload-file/-F in the browser\",\n                ]);\n            }\n        }\n        else if (request.multipartUploads) {\n            optionsCode += \"  body: form,\\n\";\n        }\n        else if (request.data) {\n            if (commentedOutDataString) {\n                optionsCode += \"  // body: \" + commentedOutDataString + \",\\n\";\n            }\n            optionsCode += \"  body: \" + dataString + \",\\n\";\n        }\n        if (isNode && request.proxy) {\n            // TODO: do this parsing in utils.ts\n            const proxy = request.proxy.includes(\"://\")\n                ? request.proxy\n                : request.proxy.prepend(\"http://\");\n            // TODO: could be more accurate\n            let [protocol] = proxy.split(\"://\", 2);\n            protocol = protocol.toLowerCase();\n            if (!protocol.toBool()) {\n                protocol = new Word(\"http\");\n            }\n            if (eq(protocol, \"socks\")) {\n                protocol = new Word(\"socks4\");\n                proxy.replace(/^socks/, \"socks4\");\n            }\n            if (eq(protocol, \"socks4\") ||\n                eq(protocol, \"socks5\") ||\n                eq(protocol, \"socks5h\") ||\n                eq(protocol, \"socks4a\")) {\n                addImport(imports, \"{ SocksProxyAgent }\", \"socks-proxy-agent\");\n                optionsCode +=\n                    \"  agent: new SocksProxyAgent(\" +\n                        reprFetch(proxy, isNode, imports) +\n                        \"),\\n\";\n            }\n            else if (eq(protocol, \"http\") || eq(protocol, \"https\")) {\n                addImport(imports, \"HttpsProxyAgent\", \"https-proxy-agent\");\n                optionsCode +=\n                    \"  agent: new HttpsProxyAgent(\" +\n                        reprFetch(proxy, isNode, imports) +\n                        \"),\\n\";\n            }\n            else {\n                warnings.push([\n                    \"--proxy\",\n                    \"failed to parse --proxy/-x or unknown protocol: \" + protocol,\n                ]);\n                // or this?\n                //   throw new CCError('Unsupported proxy scheme for ' + reprFetch(request.proxy))\n            }\n        }\n        if (optionsCode) {\n            if (optionsCode.endsWith(\",\\n\")) {\n                optionsCode = optionsCode.slice(0, -2);\n            }\n            code += \", {\\n\";\n            code += optionsCode;\n            code += \"\\n}\";\n        }\n        code += \");\\n\";\n    }\n    // TODO: generate some code for the output, like .json() if 'Accept': 'application/json'\n    return code;\n}\nexport function _toJavaScriptOrNode(requests, warnings, isNode) {\n    const fetchImports = new Set();\n    const imports = [];\n    const code = requests\n        .map((r) => requestToJavaScriptOrNode(r, warnings, fetchImports, imports, isNode))\n        .join(\"\\n\");\n    let importCode = \"\";\n    if (isNode) {\n        importCode += \"import fetch\";\n        if (fetchImports.size) {\n            importCode += \", { \" + Array.from(fetchImports).sort().join(\", \") + \" }\";\n        }\n        importCode += \" from 'node-fetch';\\n\";\n    }\n    if (imports.length) {\n        for (const [varName, imp] of Array.from(imports).sort(bySecondElem)) {\n            // TODO: check this\n            importCode += \"import \" + varName + \" from \" + reprStr(imp) + \";\\n\";\n        }\n    }\n    if (importCode) {\n        return importCode + \"\\n\" + code;\n    }\n    return code;\n}\nexport function _toJavaScript(requests, warnings = []) {\n    return _toJavaScriptOrNode(requests, warnings, false);\n}\nexport function _toNode(requests, warnings = []) {\n    return _toJavaScriptOrNode(requests, warnings, true);\n}\nexport function toJavaScriptWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, javaScriptSupportedArgs, warnings);\n    return [_toJavaScript(requests, warnings), warnings];\n}\nexport function toJavaScript(curlCommand) {\n    const [result] = toJavaScriptWarn(curlCommand);\n    return result;\n}\nexport function toNodeWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, nodeSupportedArgs, warnings);\n    return [_toNode(requests, warnings), warnings];\n}\nexport function toNode(curlCommand) {\n    return toNodeWarn(curlCommand)[0];\n}\n//# sourceMappingURL=javascript.js.map","import { eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { repr, reprObj, asParseFloatTimes1000, addImport, reprImports, } from \"./javascript.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"max-time\",\n]);\nexport function dedent(s) {\n    return s.replace(/^ {2}/gm, \"\");\n}\nexport function indent(s, indent = 1) {\n    const indentation = \"  \".repeat(indent);\n    return s.split(\"\\n\").join(\"\\n\" + indentation);\n}\nexport function commentOut(s, indent = 0) {\n    const indentation = \"  \".repeat(indent);\n    return s.split(\"\\n\").join(\"\\n\" + indentation + \"// \");\n}\nexport function serializeQuery(query, imports) {\n    const [queryList, queryDict] = query;\n    let code = \"\";\n    let traditional = false;\n    if (queryDict) {\n        code += \"{\\n\";\n        for (const [key, value] of queryDict) {\n            code += \"  \" + repr(key, imports) + \": \";\n            if (Array.isArray(value)) {\n                code += \"[\" + value.map((v) => repr(v, imports)).join(\", \") + \"]\";\n                traditional = true;\n            }\n            else {\n                code += repr(value, imports);\n            }\n            code += \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2);\n        }\n        code += \"\\n}\";\n    }\n    else if (queryList) {\n        code += \"[\\n\";\n        for (const [key, value] of queryList) {\n            code +=\n                \"  { name: \" +\n                    repr(key, imports) +\n                    \", value: \" +\n                    repr(value, imports) +\n                    \" },\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2);\n        }\n        code += \"\\n]\";\n    }\n    else {\n        // shouldn't happen\n        return [\"null\", false];\n    }\n    return [code, traditional];\n}\n// TODO: @\nfunction _getDataString(data, contentType, exactContentType, imports) {\n    let traditional = false;\n    const originalStringRepr = repr(data, imports);\n    if (contentType === \"application/json\" && data.isString()) {\n        const dataStr = data.toString();\n        const parsed = JSON.parse(dataStr);\n        // Only convert arrays and {} to JavaScript objects\n        if (typeof parsed !== \"object\" || parsed === null) {\n            return [exactContentType, originalStringRepr, null, traditional];\n        }\n        const roundtrips = JSON.stringify(parsed) === dataStr;\n        const jsonAsJavaScript = \"JSON.stringify(\" + reprObj(parsed, 1) + \")\";\n        return [\n            exactContentType,\n            jsonAsJavaScript,\n            roundtrips ? null : originalStringRepr,\n            traditional,\n        ];\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        const [queryList, queryDict] = parseQueryString(data);\n        if (queryList) {\n            if (eq(exactContentType, \"application/x-www-form-urlencoded; charset=utf-8\")) {\n                exactContentType = null;\n            }\n            let queryObj;\n            [queryObj, traditional] = serializeQuery([queryList, queryDict], imports);\n            // TODO: check roundtrip, add a comment\n            return [exactContentType, indent(queryObj), null, traditional];\n        }\n    }\n    return [exactContentType, originalStringRepr, null, traditional];\n}\nexport function getDataString(data, contentType, exactContentType, imports) {\n    let dataString = null;\n    let commentedOutDataString = null;\n    let traditional = false;\n    try {\n        [exactContentType, dataString, commentedOutDataString, traditional] =\n            _getDataString(data, contentType, exactContentType, imports);\n    }\n    catch (_a) { }\n    if (!dataString) {\n        dataString = repr(data, imports);\n    }\n    return [exactContentType, dataString, commentedOutDataString, traditional];\n}\nexport function getFormString(multipartUploads, imports) {\n    let code = \"const form = new FormData();\\n\";\n    for (const m of multipartUploads) {\n        code += \"form.append(\" + repr(m.name, imports) + \", \";\n        if (\"contentFile\" in m) {\n            // TODO: no fs in browser\n            addImport(imports, \"* as fs\", \"fs\");\n            if (eq(m.contentFile, \"-\")) {\n                code += \"fs.readFileSync(0).toString()\";\n            }\n            else {\n                code += \"fs.readFileSync(\" + repr(m.contentFile, imports) + \")\";\n            }\n            if (\"filename\" in m && m.filename) {\n                code += \", \" + repr(m.filename, imports);\n            }\n        }\n        else {\n            code += repr(m.content, imports);\n        }\n        code += \");\\n\";\n    }\n    code += \"\\n\";\n    return code;\n}\nexport function _toJavaScriptJquery(requests, warnings = []) {\n    var _a;\n    const request = getFirst(requests, warnings);\n    const imports = [];\n    let code = \"\";\n    // data: passed with these methods will be added to the URL instead\n    const nonDataMethods = [\"GET\", \"HEAD\"];\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    if (!eq(request.urls[0].method.toUpperCase(), method)) {\n        warnings.push([\n            \"method-case\",\n            \"jQuery uppercases the method, so it will be changed to \" +\n                JSON.stringify(method.toUpperCase().toString()),\n        ]);\n    }\n    const contentType = request.headers.getContentType();\n    let exactContentType = request.headers.get(\"content-type\");\n    request.headers.delete(\"content-type\");\n    let url = request.urls[0].url;\n    let dataString = null;\n    let commentedOutDataString = null;\n    let traditional = false;\n    if (request.multipartUploads) {\n        code += getFormString(request.multipartUploads, imports);\n        dataString = \"form\";\n        warnings.push([\n            \"multipart-form\",\n            // TODO: remove this when jQuery supports FormData\n            \"jQuery doesn't support sending FormData yet\",\n        ]);\n    }\n    else if (request.data) {\n        // can delete content-type header by returning null for exactContentType\n        [exactContentType, dataString, commentedOutDataString, traditional] =\n            getDataString(request.data, contentType, exactContentType, imports);\n        if (commentedOutDataString) {\n            commentedOutDataString = \"  // data: \" + commentedOutDataString + \",\\n\";\n        }\n    }\n    if (nonDataMethods.includes(methodStr)) {\n        if (request.urls[0].queryList) {\n            if (dataString) {\n                warnings.push([\n                    \"data-with-get\",\n                    \"jQuery doesn't allow sending data in the body with GET or HEAD requests\",\n                ]);\n                if (commentedOutDataString) {\n                    commentedOutDataString +=\n                        \"  // data: \" + indent(commentOut(dedent(dataString))) + \",\\n\";\n                }\n                else {\n                    commentedOutDataString =\n                        \"  // data: \" + indent(commentOut(dedent(dataString))) + \",\\n\";\n                }\n            }\n            [dataString, traditional] = serializeQuery([request.urls[0].queryList, (_a = request.urls[0].queryDict) !== null && _a !== void 0 ? _a : null], imports);\n            dataString = indent(dataString);\n            url = request.urls[0].urlWithoutQueryList;\n        }\n        else if (request.data || request.multipartUploads) {\n            warnings.push([\n                \"data-with-get\",\n                \"jQuery doesn't allow sending data with GET or HEAD requests. The data will be sent in the URL instead\",\n            ]);\n        }\n    }\n    const needsConfig = !!(request.headers.length ||\n        request.urls[0].auth ||\n        ((request.multipartUploads || request.data) &&\n            nonDataMethods.includes(methodStr)) ||\n        request.timeout ||\n        (exactContentType !== null && exactContentType !== undefined) ||\n        commentedOutDataString ||\n        traditional);\n    let done = \"\";\n    done += \".done(function(response) {\\n\";\n    done += \"  console.log(response);\\n\";\n    done += \"});\";\n    if (!needsConfig &&\n        method.isString() &&\n        [\"GET\", \"POST\"].includes(methodStr)) {\n        // TODO: .getJSON()\n        const fn = methodStr === \"GET\" ? \"get\" : \"post\";\n        code += \"$.\" + fn + \"(\";\n        code += repr(url, imports);\n        if (dataString) {\n            code += \", \" + dedent(dataString);\n        }\n        code += \")\\n\";\n        code += \"  \" + indent(done) + \"\\n\";\n    }\n    else {\n        code += \"$.ajax({\\n\";\n        code += \"  url: \" + repr(url, imports) + \",\\n\";\n        code += \"  crossDomain: true,\\n\";\n        if (methodStr !== \"GET\") {\n            // jQuery uppercases methods\n            const sentMethod = eq(request.urls[0].method.toUpperCase(), method)\n                ? method.toLowerCase()\n                : method;\n            code += \"  method: \" + repr(sentMethod, imports) + \",\\n\";\n        }\n        if (request.headers.length) {\n            code += \"  headers: {\\n\";\n            for (const [key, value] of request.headers) {\n                if (value === null) {\n                    continue;\n                }\n                code +=\n                    \"    \" + repr(key, imports) + \": \" + repr(value, imports) + \",\\n\";\n            }\n            if (code.endsWith(\",\\n\")) {\n                code = code.slice(0, -2);\n                code += \"\\n\";\n            }\n            code += \"  },\\n\";\n        }\n        if (exactContentType) {\n            code += \"  contentType: \" + repr(exactContentType, imports) + \",\\n\";\n        }\n        if (request.urls[0].auth) {\n            const [username, password] = request.urls[0].auth;\n            code += \"  username: \" + repr(username, imports) + \",\\n\";\n            code += \"  password: \" + repr(password, imports) + \",\\n\";\n        }\n        if (commentedOutDataString) {\n            code += commentedOutDataString;\n        }\n        if (dataString) {\n            code += \"  data: \" + dataString + \",\\n\";\n        }\n        if (traditional) {\n            code += \"  traditional: true,\\n\";\n        }\n        if (request.timeout) {\n            code +=\n                \"  timeout: \" + asParseFloatTimes1000(request.timeout, imports) + \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2);\n            code += \"\\n\";\n        }\n        code += \"})\" + done + \"\\n\";\n    }\n    let importCode = reprImports(imports);\n    if (importCode) {\n        importCode += \"\\n\";\n    }\n    return importCode + code;\n}\nexport function toJavaScriptJqueryWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const jquery = _toJavaScriptJquery(requests, warnings);\n    return [jquery, warnings];\n}\nexport function toJavaScriptJquery(curlCommand) {\n    return toJavaScriptJqueryWarn(curlCommand)[0];\n}\n//# sourceMappingURL=jquery.js.map","import { warnIfPartsIgnored } from \"../../Warnings.js\";\nimport { Word, eq, joinWords } from \"../../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { repr, asParseInt, asParseFloatTimes1000, toURLSearchParams, reprObj, toDictOrURLSearchParams, addImport, reprImports, FORBIDDEN_METHODS, } from \"./javascript.js\";\nimport { getFormString } from \"./jquery.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"upload-file\",\n    \"form\",\n    \"form-string\",\n    \"next\",\n    // --no-compressed (the default) is unsupported though\n    \"compressed\",\n    \"upload-file\",\n    \"retry\",\n    \"max-time\",\n]);\nfunction getDataString(request, data, imports) {\n    const originalStringRepr = \"body: \" + repr(data, imports);\n    const contentType = request.headers.getContentType();\n    if (contentType === \"application/json\") {\n        try {\n            const dataStr = data.toString();\n            const parsed = JSON.parse(dataStr);\n            const roundtrips = JSON.stringify(parsed) === dataStr;\n            const jsonAsJavaScript = reprObj(parsed, 1);\n            const dataString = \"json: \" + jsonAsJavaScript;\n            return [dataString, roundtrips ? null : originalStringRepr];\n        }\n        catch (_a) {\n            return [originalStringRepr, null];\n        }\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        try {\n            const [queryList, queryDict] = parseQueryString(data);\n            if (queryList) {\n                // Technically node-fetch sends\n                // application/x-www-form-urlencoded;charset=utf-8\n                // TODO: handle repeated content-type header\n                if (eq(request.headers.get(\"content-type\"), \"application/x-www-form-urlencoded\")) {\n                    request.headers.delete(\"content-type\");\n                }\n                // TODO: check roundtrip, add a comment\n                // TODO: this isn't a dict anymore\n                return [\n                    \"body: \" + toURLSearchParams([queryList, queryDict], imports),\n                    null,\n                ];\n            }\n            return [originalStringRepr, null];\n        }\n        catch (_b) {\n            return [originalStringRepr, null];\n        }\n    }\n    return [originalStringRepr, null];\n}\nexport function getData(request, isNode, imports) {\n    if (!request.dataArray || request.multipartUploads) {\n        return [\"\", null];\n    }\n    if (request.dataArray.length === 1 &&\n        request.dataArray[0] instanceof Word &&\n        request.dataArray[0].isString()) {\n        try {\n            return getDataString(request, request.dataArray[0], imports);\n        }\n        catch (_a) { }\n    }\n    const parts = [];\n    const hasBinary = request.dataArray.some((d) => !(d instanceof Word) && d.filetype === \"binary\");\n    const encoding = hasBinary ? \"\" : \", 'utf-8'\";\n    for (const d of request.dataArray) {\n        if (d instanceof Word) {\n            parts.push(repr(d, imports));\n        }\n        else {\n            const { filetype, name, filename } = d;\n            if (filetype === \"urlencode\" && name) {\n                // TODO: add this to the previous Word\n                parts.push(repr(name, imports));\n            }\n            // TODO: use the filetype\n            if (eq(filename, \"-\")) {\n                parts.push(\"fs.readFileSync(0\" + encoding + \")\");\n            }\n            else {\n                parts.push(\"fs.readFileSync(\" + repr(filename, imports) + encoding + \")\");\n            }\n            addImport(imports, \"* as fs\", \"fs\");\n        }\n    }\n    if (parts.length === 0) {\n        return [\"body: ''\", null];\n    }\n    if (parts.length === 1) {\n        return [\"body: \" + parts[0], null];\n    }\n    let start = \"new ArrayBuffer(\";\n    let joiner = \", \";\n    let end = \")\";\n    const totalLength = parts.reduce((a, b) => a + b.length, 0);\n    if (totalLength > 80) {\n        start += \"\\n    \";\n        joiner = \",\\n    \";\n        end = \"\\n  )\";\n    }\n    return [\"body: \" + start + parts.join(joiner) + end, null];\n}\nfunction requestToKy(request, warnings, imports) {\n    warnIfPartsIgnored(request, warnings, {\n        multipleUrls: true,\n        dataReadsFile: true,\n        // Not actually supported, just warned per-URL\n        queryReadsFile: true,\n    });\n    let code = \"\";\n    if (request.multipartUploads) {\n        code += getFormString(request.multipartUploads, imports);\n    }\n    // Can delete content-type header\n    const [dataString, commentedOutDataString] = getData(request, true, imports);\n    for (const urlObj of request.urls) {\n        let optionsCode = \"\";\n        const method = urlObj.method;\n        const methodStr = urlObj.method.toString();\n        const nonDataMethods = [\"GET\", \"HEAD\"];\n        const methods = [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"HEAD\", \"DELETE\"];\n        const url = urlObj.queryList ? urlObj.urlWithoutQueryList : urlObj.url;\n        if (method.isString() && methods.includes(methodStr)) {\n            const fn = methodStr.toLowerCase().toString();\n            code += \"ky.\" + fn + \"(\" + repr(url, imports);\n        }\n        else {\n            code += \"ky(\" + repr(url, imports);\n            optionsCode += \"  method: \" + repr(method, imports) + \",\\n\";\n            if (method.isString() && FORBIDDEN_METHODS.includes(methodStr)) {\n                warnings.push([\n                    \"forbidden-method\",\n                    \"the method \" +\n                        JSON.stringify(methodStr) +\n                        \" is not allowed in fetch() and therefore Ky\",\n                ]);\n            }\n        }\n        if (urlObj.queryList) {\n            optionsCode +=\n                \"searchParams: \" +\n                    toDictOrURLSearchParams([urlObj.queryList, urlObj.queryDict], imports);\n        }\n        if (urlObj.queryReadsFile) {\n            warnings.push([\n                \"unsafe-query\",\n                // TODO: better wording\n                \"the URL query string is not correct, \" +\n                    JSON.stringify(\"@\" + urlObj.queryReadsFile) +\n                    \" means it should read the file \" +\n                    JSON.stringify(urlObj.queryReadsFile),\n            ]);\n        }\n        if (request.headers.length ||\n            (urlObj.auth && request.authType === \"basic\")) {\n            optionsCode += \"  headers: {\\n\";\n            for (const [headerName, headerValue] of request.headers) {\n                optionsCode +=\n                    \"    \" +\n                        repr(headerName, imports) +\n                        \": \" +\n                        repr(headerValue || new Word(), imports) +\n                        \",\\n\";\n            }\n            if (urlObj.auth && request.authType === \"basic\") {\n                // TODO: if -H 'Authorization:' is passed, don't set this\n                optionsCode +=\n                    \"    'Authorization': 'Basic ' + btoa(\" +\n                        repr(joinWords(urlObj.auth, \":\"), imports) +\n                        \"),\\n\";\n            }\n            if (optionsCode.endsWith(\",\\n\")) {\n                optionsCode = optionsCode.slice(0, -2);\n                optionsCode += \"\\n\";\n            }\n            optionsCode += \"  },\\n\";\n        }\n        if (urlObj.uploadFile) {\n            addImport(imports, \"* as fs\", \"fs\");\n            optionsCode +=\n                \"  body: fs.readFileSync(\" + repr(urlObj.uploadFile, imports) + \"),\\n\";\n        }\n        else if (request.multipartUploads) {\n            optionsCode += \"  body: form,\\n\";\n        }\n        else if (request.data) {\n            if (commentedOutDataString) {\n                optionsCode += \"  // \" + commentedOutDataString + \",\\n\";\n            }\n            optionsCode += \"  \" + dataString + \",\\n\";\n        }\n        if (method.isString() &&\n            methodStr in nonDataMethods &&\n            (urlObj.uploadFile || request.data || request.multipartUploads)) {\n            warnings.push([\n                \"non-data-method\",\n                \"Ky doesn't support sending data with GET or HEAD requests\",\n            ]);\n        }\n        if (request.retry) {\n            optionsCode += \"  retry: \" + asParseInt(request.retry, imports);\n        }\n        if (request.timeout) {\n            optionsCode +=\n                \"  timeout: \" + asParseFloatTimes1000(request.timeout, imports);\n        }\n        if (optionsCode) {\n            if (optionsCode.endsWith(\",\\n\")) {\n                optionsCode = optionsCode.slice(0, -2);\n            }\n            code += \", {\\n\";\n            code += optionsCode;\n            code += \"\\n}\";\n        }\n        code += \");\\n\";\n    }\n    // TODO: generate some code for the output, like .json() if 'Accept': 'application/json'\n    return code;\n}\nexport function _toNodeKy(requests, warnings) {\n    const imports = [];\n    const code = requests\n        .map((r) => requestToKy(r, warnings || [], imports))\n        .join(\"\\n\");\n    const importCode = \"import ky from 'ky';\\n\" + reprImports(imports);\n    return importCode + \"\\n\" + code;\n}\nexport function toNodeKyWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toNodeKy(requests, warnings);\n    return [code, warnings];\n}\nexport function toNodeKy(curlCommand) {\n    return toNodeKyWarn(curlCommand)[0];\n}\n//# sourceMappingURL=ky.js.map","import { warnIfPartsIgnored } from \"../../Warnings.js\";\nimport { Word, eq, mergeWords } from \"../../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { repr, reprImportsRequire } from \"./javascript.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    // \"form\",\n    // \"form-string\",\n    \"next\",\n]);\n// https://github.com/nodejs/node/blob/135948d584ab6864b217b504f3eddf426d533bd4/lib/_http_client.js#L106\nconst INVALID_PATH_REGEX = /[^\\u0021-\\u00ff]/;\nfunction requestToNodeRequest(request, requestIndex, definedVariables, imports, warnings = []) {\n    warnIfPartsIgnored(request, warnings);\n    let nodeRequestCode = \"\";\n    if (request.headers.length) {\n        nodeRequestCode += defVar(definedVariables, \"headers\", \"{\\n\");\n        let i = 0;\n        for (const [headerName, headerValue] of request.headers) {\n            nodeRequestCode +=\n                \"    \" +\n                    repr(headerName, imports) +\n                    \": \" +\n                    repr(headerValue || new Word(), imports) +\n                    \"\";\n            nodeRequestCode += i < request.headers.length - 1 ? \",\\n\" : \"\\n\";\n            i++;\n        }\n        nodeRequestCode += \"};\\n\\n\";\n    }\n    if (request.data) {\n        nodeRequestCode += defVar(definedVariables, \"dataString\", repr(request.data, imports) + \";\\n\\n\");\n    }\n    nodeRequestCode += defVar(definedVariables, \"options\", \"{\\n\");\n    const path = mergeWords(request.urls[0].urlObj.path, request.urls[0].urlObj.query);\n    if (path.toBool() && INVALID_PATH_REGEX.test(path.toString())) {\n        warnings.push([\n            \"invalid-path-characters\",\n            \"encodeURI() is needed because request path contains unescaped characters\",\n        ]);\n        nodeRequestCode +=\n            \"    url: encodeURI(\" + repr(request.urls[0].url, imports) + \")\";\n    }\n    else {\n        nodeRequestCode += \"    url: \" + repr(request.urls[0].url, imports);\n    }\n    if (!eq(request.urls[0].method.toUpperCase(), \"GET\")) {\n        nodeRequestCode +=\n            \",\\n    method: \" + repr(request.urls[0].method.toUpperCase(), imports);\n    }\n    if (request.headers.length) {\n        nodeRequestCode += \",\\n\";\n        nodeRequestCode += \"    headers: headers\";\n        const h = request.headers.get(\"accept-encoding\");\n        if (h) {\n            const acceptedEncodings = h\n                .split(\",\")\n                .map((s) => s.trim().toLowerCase().toString());\n            if (acceptedEncodings.includes(\"gzip\") ||\n                acceptedEncodings.includes(\"deflate\")) {\n                nodeRequestCode += \",\\n    gzip: true\";\n            }\n        }\n    }\n    if (request.data) {\n        nodeRequestCode += \",\\n    body: dataString\";\n    }\n    if (request.urls[0].auth) {\n        nodeRequestCode += \",\\n\";\n        const [user, password] = request.urls[0].auth;\n        nodeRequestCode += \"    auth: {\\n\";\n        nodeRequestCode += \"        'user': \" + repr(user, imports) + \",\\n\";\n        nodeRequestCode += \"        'pass': \" + repr(password, imports) + \"\\n\";\n        nodeRequestCode += \"    }\\n\";\n    }\n    else {\n        nodeRequestCode += \"\\n\";\n    }\n    nodeRequestCode += \"};\\n\\n\";\n    if (requestIndex === 0) {\n        nodeRequestCode += \"function callback(error, response, body) {\\n\";\n        nodeRequestCode += \"    if (!error && response.statusCode == 200) {\\n\";\n        nodeRequestCode += \"        console.log(body);\\n\";\n        nodeRequestCode += \"    }\\n\";\n        nodeRequestCode += \"}\\n\\n\";\n    }\n    nodeRequestCode += \"request(options, callback);\";\n    return nodeRequestCode + \"\\n\";\n}\nfunction defVar(variables, name, value) {\n    if (!variables.has(name)) {\n        variables.add(name);\n        name = \"var \" + name;\n    }\n    return `${name} = ${value}`;\n}\nexport function _toNodeRequest(requests, warnings = []) {\n    const code = \"var request = require('request');\\n\";\n    const definedVariables = new Set([\"request\"]);\n    const imports = [];\n    const requestCode = requests.map((r, i) => requestToNodeRequest(r, i, definedVariables, imports, warnings));\n    return code + reprImportsRequire(imports) + \"\\n\" + requestCode.join(\"\\n\\n\");\n}\nexport function toNodeRequestWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    warnings.unshift([\"node-request\", \"the request package is deprecated\"]);\n    const nodeRequests = _toNodeRequest(requests, warnings);\n    return [nodeRequests, warnings];\n}\nexport function toNodeRequest(curlCommand) {\n    return toNodeRequestWarn(curlCommand)[0];\n}\n//# sourceMappingURL=request.js.map","import { eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { repr, reprObj, asParseInt, asParseFloatTimes1000, addImport, reprImports, } from \"./javascript.js\";\nimport { indent } from \"./jquery.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"max-time\",\n    \"connect-timeout\",\n    \"location\", // --no-location only has an effect\n    \"max-redirs\",\n    \"retry\",\n    \"insecure\",\n    \"cert\",\n    \"key\",\n    \"cacert\",\n    \"http2\",\n]);\nfunction serializeQuery(fn, query, imports) {\n    const [queryList, queryDict] = query;\n    let code = \"\";\n    if (queryDict) {\n        code += \"{\\n\";\n        for (const [key, value] of queryDict) {\n            code += \"  \" + repr(key, imports) + \": \";\n            if (Array.isArray(value)) {\n                code += \"[\" + value.map((v) => repr(v, imports)).join(\", \") + \"]\";\n            }\n            else {\n                code += repr(value, imports);\n            }\n            code += \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2);\n        }\n        code += \"\\n}\";\n        code = \"  .\" + fn + \"(\" + indent(code) + \")\\n\";\n    }\n    else if (queryList) {\n        for (const [key, value] of queryList) {\n            code +=\n                \"  .\" +\n                    fn +\n                    \"({ \" +\n                    repr(key, imports) +\n                    \": \" +\n                    repr(value, imports) +\n                    \" })\\n\";\n        }\n    }\n    else {\n        // shouldn't happen\n        return \"\";\n    }\n    return code;\n}\n// TODO: @\nfunction _getDataString(request, contentType, exactContentType, imports) {\n    if (!request.data) {\n        return [exactContentType, null, null];\n    }\n    const originalStringRepr = \"  .send(\" + repr(request.data, imports) + \")\\n\";\n    if (contentType === \"application/json\" && request.data.isString()) {\n        const dataStr = request.data.toString();\n        const parsed = JSON.parse(dataStr);\n        // Only convert arrays and {} to JavaScript objects\n        if (typeof parsed !== \"object\" || parsed === null) {\n            return [exactContentType, originalStringRepr, null];\n        }\n        const roundtrips = JSON.stringify(parsed) === dataStr;\n        const jsonAsJavaScript = \"  .send(\" + reprObj(parsed, 1) + \")\\n\";\n        if (roundtrips && eq(exactContentType, \"application/json\")) {\n            exactContentType = null;\n        }\n        return [\n            exactContentType,\n            jsonAsJavaScript,\n            roundtrips ? null : originalStringRepr,\n        ];\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        const [queryList, queryDict] = parseQueryString(request.data);\n        if (queryList) {\n            exactContentType = null;\n            const queryCode = \"  .type('form')\\n\" +\n                serializeQuery(\"send\", [queryList, queryDict], imports);\n            // TODO: check roundtrip, add a comment\n            return [exactContentType, queryCode, null];\n        }\n    }\n    return [exactContentType, originalStringRepr, null];\n}\nexport function getDataString(request, contentType, exactContentType, imports) {\n    if (!request.data) {\n        return [exactContentType, null, null];\n    }\n    let dataString = null;\n    let commentedOutDataString = null;\n    try {\n        [exactContentType, dataString, commentedOutDataString] = _getDataString(request, contentType, exactContentType, imports);\n    }\n    catch (_a) { }\n    if (!dataString) {\n        dataString = \"  .send(\" + repr(request.data, imports) + \")\\n\";\n    }\n    return [exactContentType, dataString, commentedOutDataString];\n}\nexport function getFormString(multipartUploads, imports) {\n    let code = \"\";\n    for (const m of multipartUploads) {\n        if (\"contentFile\" in m) {\n            code += \"  .attach(\" + repr(m.name, imports);\n            // if (eq(m.contentFile, \"-\")) {\n            //   warnings.push([\n            //     \"stdin-file\", \"SuperAgent doesn't support reading from stdin\",\n            //   ]);\n            // }\n            code += \", \" + repr(m.contentFile, imports);\n            if (\"filename\" in m && m.filename) {\n                // TODO: this is the wrong way to not send a filename\n                code += \", \" + repr(m.filename, imports);\n            }\n            code += \")\\n\";\n        }\n        else {\n            code +=\n                \"  .field(\" +\n                    repr(m.name, imports) +\n                    \", \" +\n                    repr(m.content, imports) +\n                    \")\\n\";\n        }\n    }\n    return code;\n}\nexport function _toNodeSuperAgent(requests, warnings = []) {\n    var _a;\n    const request = getFirst(requests, warnings);\n    const imports = [];\n    let code = \"\";\n    // data: passed with these methods is ignored\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    // https://github.com/ladjs/superagent/blob/73c7efb5e9a0cf0409da9918d49b89055be29db5/src/client.js#L899\n    const nonDataMethods = [\"GET\", \"HEAD\"];\n    if (!eq(request.urls[0].method.toUpperCase(), method)) {\n        warnings.push([\n            \"method-case\",\n            \"SuperAgent uppercases the method, so it will be changed to \" +\n                JSON.stringify(method.toUpperCase().toString()),\n        ]);\n    }\n    const hasData = request.data || request.multipartUploads;\n    const url = request.urls[0].queryList\n        ? request.urls[0].urlWithoutQueryList\n        : request.urls[0].url;\n    const contentType = request.headers.getContentType();\n    let exactContentType = request.headers.get(\"content-type\");\n    request.headers.delete(\"content-type\");\n    let dataCode, commentedOutDataCode;\n    if (request.multipartUploads) {\n        dataCode = getFormString(request.multipartUploads, imports);\n        exactContentType = null;\n    }\n    else if (request.data) {\n        // might delete content-type header\n        [exactContentType, dataCode, commentedOutDataCode] = getDataString(request, contentType, exactContentType, imports);\n    }\n    if (nonDataMethods.includes(methodStr) && hasData) {\n        warnings.push([\n            \"data-with-get\",\n            \"SuperAgent doesn't send data with GET or HEAD requests\",\n        ]);\n    }\n    // https://github.com/ladjs/superagent/blob/73c7efb5e9a0cf0409da9918d49b89055be29db5/src/client.js#L899\n    const methodToFn = {\n        GET: \"get\",\n        HEAD: \"head\",\n        OPTIONS: \"options\",\n        DELETE: \"del\",\n        PATCH: \"patch\",\n        POST: \"post\",\n        PUT: \"put\",\n    };\n    code += \"request\";\n    if (methodStr in methodToFn) {\n        const fn = methodToFn[methodStr];\n        code += \"\\n\";\n        code += \"  .\" + fn + \"(\" + repr(url, imports) + \")\\n\";\n    }\n    else {\n        code += \"(\" + repr(method, imports) + \", \" + repr(url, imports) + \")\\n\";\n    }\n    if (request.urls[0].queryList) {\n        code += serializeQuery(\"query\", [request.urls[0].queryList, (_a = request.urls[0].queryDict) !== null && _a !== void 0 ? _a : null], imports);\n    }\n    if (request.urls[0].auth) {\n        const [username, password] = request.urls[0].auth;\n        code +=\n            \"  .auth(\" +\n                repr(username, imports) +\n                \", \" +\n                repr(password, imports) +\n                \")\\n\";\n    }\n    // TODO: warn about unsent headers\n    if (request.headers.length) {\n        for (const [key, value] of request.headers) {\n            if (value === null) {\n                continue;\n            }\n            code +=\n                \"  .set(\" + repr(key, imports) + \", \" + repr(value, imports) + \")\\n\";\n        }\n    }\n    if (exactContentType) {\n        if (eq(exactContentType, \"application/x-www-form-urlencoded\")) {\n            code += \"  .type('form')\\n\";\n        }\n        else if (eq(exactContentType, \"application/json\")) {\n            code += \"  .type('json')\\n\";\n        }\n        else {\n            code += \"  .type(\" + repr(exactContentType, imports) + \")\\n\";\n        }\n    }\n    if (commentedOutDataCode) {\n        code += \"  //\" + commentedOutDataCode;\n    }\n    if (dataCode) {\n        code += dataCode;\n    }\n    if (request.connectTimeout) {\n        code += \"  .timeout({ \";\n        code +=\n            \"response: \" + asParseFloatTimes1000(request.connectTimeout, imports);\n        if (request.timeout) {\n            code += \"deadline: \" + asParseFloatTimes1000(request.timeout, imports);\n        }\n        code += \" })\\n\";\n    }\n    else if (request.timeout) {\n        code +=\n            \"  .timeout(\" + asParseFloatTimes1000(request.timeout, imports) + \")\\n\";\n    }\n    if (request.followRedirects === false) {\n        code += \"  .redirects(0)\\n\";\n    }\n    else if (request.maxRedirects) {\n        code += \"  .redirects(\" + repr(request.maxRedirects, imports) + \")\\n\";\n    }\n    if (request.retry) {\n        code += \"  .retry(\" + asParseInt(request.retry, imports) + \")\\n\";\n    }\n    if (request.insecure) {\n        code += \"  .disableTLSCerts()\\n\";\n    }\n    if (request.cert) {\n        const [cert, password] = request.cert;\n        code += \"  .cert(fs.readFileSync(\" + repr(cert, imports) + \"))\\n\";\n        addImport(imports, \"* as fs\", \"fs\");\n        if (password) {\n            warnings.push([\n                \"cert-password\",\n                \"SuperAgent doesn't support certificate passwords: \" +\n                    JSON.stringify(password.toString()),\n            ]);\n        }\n    }\n    if (request.key) {\n        code += \"  .key(fs.readFileSync(\" + repr(request.key, imports) + \"))\\n\";\n        addImport(imports, \"* as fs\", \"fs\");\n    }\n    // TODO: is this correct?\n    if (request.cacert) {\n        code += \"  .ca(fs.readFileSync(\" + repr(request.cacert, imports) + \"))\\n\";\n        addImport(imports, \"* as fs\", \"fs\");\n    }\n    if (request.http2) {\n        code += \"  .http2()\\n\";\n    }\n    code += \"  .then(res => {\\n\";\n    code += \"     console.log(res.body);\\n\";\n    code += \"  });\\n\";\n    let importCode = \"import request from 'superagent';\\n\";\n    importCode += reprImports(imports);\n    importCode += \"\\n\";\n    return importCode + code;\n}\nexport function toNodeSuperAgentWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toNodeSuperAgent(requests, warnings);\n    return [code, warnings];\n}\nexport function toNodeSuperAgent(curlCommand) {\n    return toNodeSuperAgentWarn(curlCommand)[0];\n}\n//# sourceMappingURL=superagent.js.map","import { eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { repr, reprObj, asParseFloatTimes1000, toURLSearchParams, reprImports, } from \"./javascript.js\";\nimport { dedent, getFormString } from \"./jquery.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"max-time\",\n]);\nfunction _getDataString(data, contentType, imports) {\n    const originalStringRepr = repr(data, imports);\n    if (contentType === \"application/json\" && data.isString()) {\n        const dataStr = data.toString();\n        const parsed = JSON.parse(dataStr);\n        // Only convert arrays and {} to JS objects\n        if (typeof parsed !== \"object\" || parsed === null) {\n            return [originalStringRepr, null];\n        }\n        const roundtrips = JSON.stringify(parsed) === dataStr;\n        const jsonAsJavaScript = \"JSON.stringify(\" + reprObj(parsed, 1) + \")\";\n        return [jsonAsJavaScript, roundtrips ? null : originalStringRepr];\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        const [queryList, queryDict] = parseQueryString(data);\n        if (queryList) {\n            // TODO: check roundtrip, add a comment\n            return [toURLSearchParams([queryList, queryDict], imports), null];\n        }\n    }\n    return [originalStringRepr, null];\n}\nexport function getDataString(data, contentType, imports) {\n    let dataString = null;\n    let commentedOutDataString = null;\n    try {\n        [dataString, commentedOutDataString] = _getDataString(data, contentType, imports);\n    }\n    catch (_a) { }\n    if (!dataString) {\n        dataString = repr(data, imports);\n    }\n    return [dataString, commentedOutDataString];\n}\nexport function _toJavaScriptXHR(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const imports = [];\n    let code = \"\";\n    // data: passed with these methods is ignored\n    const nonDataMethods = [\"GET\", \"HEAD\"];\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    if (!eq(request.urls[0].method.toUpperCase(), method)) {\n        warnings.push([\n            \"method-case\",\n            \"XHR uppercases the method, so it will be changed to \" +\n                JSON.stringify(method.toUpperCase().toString()),\n        ]);\n    }\n    const hasData = request.data || request.multipartUploads;\n    const url = request.urls[0].url;\n    const contentType = request.headers.getContentType();\n    if (request.multipartUploads) {\n        code += getFormString(request.multipartUploads, imports);\n    }\n    else if (request.data) {\n        // might delete content-type header\n        const [dataString, commentedOutDataString] = getDataString(request.data, contentType, imports);\n        if (commentedOutDataString) {\n            code += \"// const data = \" + commentedOutDataString + \";\\n\";\n        }\n        if (dataString) {\n            code += \"const data = \" + dedent(dataString) + \";\\n\\n\";\n        }\n    }\n    if (nonDataMethods.includes(methodStr) && hasData) {\n        warnings.push([\n            \"data-with-get\",\n            \"XHR doesn't send data with GET or HEAD requests\",\n        ]);\n    }\n    code += \"let xhr = new XMLHttpRequest();\\n\";\n    code += \"xhr.withCredentials = true;\\n\";\n    code += \"xhr.open(\";\n    const openArgs = [repr(method, imports), repr(url, imports)];\n    if (request.urls[0].auth) {\n        const [username, password] = request.urls[0].auth;\n        openArgs.push(\"true\", repr(username, imports), repr(password, imports));\n        code += \"\\n  \";\n        code += openArgs.join(\",\\n  \");\n        code += \"\\n\";\n    }\n    else {\n        code += openArgs.join(\", \");\n    }\n    code += \");\\n\";\n    // TODO: keep content-type header if it's not multipart/form-data\n    // TODO: warn about unsent headers\n    if (request.headers.length) {\n        for (const [key, value] of request.headers) {\n            if (value === null) {\n                continue;\n            }\n            code +=\n                \"xhr.setRequestHeader(\" +\n                    repr(key, imports) +\n                    \", \" +\n                    repr(value, imports) +\n                    \");\\n\";\n        }\n    }\n    if (request.timeout) {\n        code +=\n            \"xhr.timeout = \" +\n                asParseFloatTimes1000(request.timeout, imports) +\n                \";\\n\";\n    }\n    code += \"\\n\";\n    code += \"xhr.onload = function() {\\n\";\n    code += \"  console.log(xhr.response);\\n\";\n    code += \"};\\n\";\n    code += \"\\n\";\n    if (request.multipartUploads) {\n        code += \"xhr.send(form);\\n\";\n    }\n    else if (request.data) {\n        code += \"xhr.send(data);\\n\";\n    }\n    else {\n        code += \"xhr.send();\\n\";\n    }\n    let importCode = reprImports(imports);\n    if (importCode) {\n        importCode += \"\\n\";\n    }\n    return importCode + code;\n}\nexport function toJavaScriptXHRWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toJavaScriptXHR(requests, warnings);\n    return [code, warnings];\n}\nexport function toJavaScriptXHR(curlCommand) {\n    return toJavaScriptXHRWarn(curlCommand)[0];\n}\n//# sourceMappingURL=xhr.js.map","import { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"insecure\",\n    \"no-insecure\",\n    \"form\",\n    \"form-string\",\n    \"compressed\",\n    \"location\",\n    \"no-location\",\n    \"location-trusted\",\n    \"no-location-trusted\",\n    \"max-time\",\n    \"connect-timeout\",\n    \"anyauth\",\n    \"no-anyauth\",\n    \"digest\",\n    \"no-digest\",\n    \"aws-sigv4\",\n    \"negotiate\",\n    \"no-negotiate\",\n    \"delegation\", // GSS/kerberos\n    // \"service-name\", // GSS/kerberos, not supported\n    \"ntlm\",\n    \"no-ntlm\",\n    \"ntlm-wb\",\n    \"no-ntlm-wb\",\n]);\nfunction getDataString(request) {\n    if (!request.data) {\n        return {};\n    }\n    const contentType = request.headers.getContentType();\n    if (contentType === \"application/json\") {\n        try {\n            return JSON.parse(request.data.toString());\n        }\n        catch (e) { }\n    }\n    if (contentType === \"application/x-www-form-urlencoded\") {\n        const [parsedQuery, parsedQueryDict] = parseQueryString(request.data);\n        if (parsedQueryDict) {\n            return Object.fromEntries(parsedQueryDict.map((param) => [\n                param[0].toString(),\n                Array.isArray(param[1])\n                    ? param[1].map((v) => v.toString())\n                    : param[1].toString(),\n            ]));\n        }\n        if (parsedQuery) {\n            // .fromEntries() means we lose data when there are repeated keys\n            return Object.fromEntries(parsedQuery.map((param) => [param[0].toString(), param[1].toString()]));\n        }\n    }\n    // TODO: this leads to ambiguity with JSON strings\n    return request.data.toString();\n}\nfunction getFilesString(request) {\n    if (!request.multipartUploads) {\n        return undefined;\n    }\n    const data = {\n        files: {},\n        data: {},\n    };\n    // TODO: this isn't great.\n    for (const m of request.multipartUploads) {\n        if (\"contentFile\" in m) {\n            data.files[m.name.toString()] = m.contentFile.toString();\n        }\n        else {\n            data.data[m.name.toString()] = m.content.toString();\n        }\n    }\n    return {\n        files: Object.keys(data.files).length ? data.files : undefined,\n        data: Object.keys(data.data).length ? data.data : undefined,\n    };\n}\nexport function _toJsonString(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const requestJson = {\n        url: (request.urls[0].queryDict\n            ? request.urls[0].urlWithoutQueryList\n            : request.urls[0].url)\n            .toString()\n            .replace(/\\/$/, \"\"),\n        // url: request.queryDict ? request.urlWithoutQueryList : request.url,\n        raw_url: request.urls[0].url.toString(),\n        // TODO: move this after .query?\n        method: request.urls[0].method.toLowerCase().toString(), // lowercase for backwards compatibility\n    };\n    // if (request.queryDict) {\n    //   requestJson.query = request.queryDict\n    // }\n    if (request.cookies) {\n        // TODO: repeated cookies\n        requestJson.cookies = Object.fromEntries(request.cookies.map((c) => [c[0].toString(), c[1].toString()]));\n        // Normally when a generator uses .cookies, it should delete it from\n        // headers, but users of the JSON output would expect to have all the\n        // headers in .headers.\n    }\n    if (request.headers.length) {\n        const headers = request.headers.headers\n            .filter((h) => h[1] !== null)\n            // TODO: warn if contains variables\n            .map((h) => [h[0].toString(), h[1].toString()]);\n        // TODO: what if Object.keys().length !== request.headers.length?\n        requestJson.headers = Object.fromEntries(headers);\n    }\n    if (request.urls[0].queryDict) {\n        // TODO: rename\n        requestJson.queries = Object.fromEntries(request.urls[0].queryDict.map((q) => [\n            q[0].toString(),\n            Array.isArray(q[1]) ? q[1].map((qq) => qq.toString()) : q[1].toString(),\n        ]));\n    }\n    if (request.data) {\n        requestJson.data = getDataString(request);\n    }\n    else if (request.multipartUploads) {\n        // TODO: not Object.assign, doesn't work with type system\n        Object.assign(requestJson, getFilesString(request));\n    }\n    if (request.compressed) {\n        requestJson.compressed = true;\n    }\n    if (request.insecure) {\n        // TODO: rename to verify? insecure=false doesn't make sense\n        requestJson.insecure = false;\n    }\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        requestJson.auth = {\n            user: user.toString(),\n            password: password.toString(),\n        };\n        if (request.authType) {\n            requestJson.auth_type = request.authType;\n        }\n    }\n    if (request.awsSigV4) {\n        requestJson.aws_sigv4 = request.awsSigV4.toString();\n    }\n    if (request.delegation) {\n        requestJson.delegation = request.delegation.toString();\n    }\n    if (Object.prototype.hasOwnProperty.call(request, \"followRedirects\")) {\n        requestJson.follow_redirects = request.followRedirects;\n    }\n    if (request.timeout) {\n        requestJson.timeout = parseFloat(request.timeout.toString());\n    }\n    if (request.connectTimeout) {\n        requestJson.connect_timeout = parseFloat(request.connectTimeout.toString());\n    }\n    return (JSON.stringify(Object.keys(requestJson).length ? requestJson : \"{}\", null, 4) + \"\\n\");\n}\nexport function toJsonStringWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const json = _toJsonString(requests, warnings);\n    return [json, warnings];\n}\nexport function toJsonString(curlCommand) {\n    return toJsonStringWarn(curlCommand)[0];\n}\n//# sourceMappingURL=json.js.map","import { CCError } from \"../utils.js\";\nimport { Word, eq, mergeWords } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\nimport { parse as jsonParseLossless, stringify as jsonStringifyLossless, isLosslessNumber, } from \"lossless-json\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"no-compressed\",\n    \"insecure\",\n    \"no-insecure\",\n    \"upload-file\",\n    \"connect-timeout\",\n    \"timeout\",\n    \"retry\",\n    \"location\",\n    \"max-redirs\",\n    \"form\",\n    \"form-string\",\n]);\n// https://docs.julialang.org/en/v1/manual/strings/\n// https://en.wikipedia.org/wiki/C_syntax#Backslash_escapes\nconst regexEscape = /\\$|\\\\|\"|\\p{C}|[^ \\P{Z}]/gu;\nconst regexHexDigit = /[0-9a-fA-F]/;\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c, index, string) => {\n            switch (c) {\n                case \"$\":\n                    return \"\\\\$\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 2) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            if (hex.length <= 4) {\n                return \"\\\\u\" + hex.padStart(4, \"0\");\n            }\n            if (regexHexDigit.test(string.charAt(index + 1))) {\n                return \"\\\\U\" + hex.padStart(8, \"0\");\n            }\n            return \"\\\\U\" + hex;\n        }) +\n        '\"');\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"ENV[\" + reprStr(t.value) + \"]\");\n        }\n        else {\n            // TODO: escape\n            args.push(\"read(`\" + t.value.toString() + \"`, String)\");\n        }\n    }\n    return args.join(\" * \");\n}\nfunction jsonAsJulia(obj, indent = 0) {\n    if (isLosslessNumber(obj)) {\n        // TODO: why is it undefined\n        const numAsStr = jsonStringifyLossless(obj);\n        return numAsStr;\n    }\n    switch (typeof obj) {\n        case \"string\":\n            return reprStr(obj);\n        case \"number\":\n            // If the number in the JSON file is very large, it'll turn into Infinity\n            if (!isFinite(obj)) {\n                throw new CCError(\"found Infitiny in JSON\");\n            }\n            return obj.toString();\n        case \"boolean\":\n            return obj.toString();\n        case \"object\":\n            if (obj === null) {\n                return \"nothing\";\n            }\n            if (Array.isArray(obj)) {\n                if (obj.length === 0) {\n                    return \"[]\";\n                }\n                let s = \"[\\n\";\n                for (const item of obj) {\n                    s += \" \".repeat(indent + 4) + jsonAsJulia(item, indent + 4) + \",\\n\";\n                }\n                if (s.endsWith(\",\\n\")) {\n                    s = s.slice(0, -2) + \"\\n\";\n                }\n                s += \" \".repeat(indent) + \"]\";\n                return s;\n            }\n            if (Object.keys(obj).length === 0) {\n                return \"Dict()\";\n            }\n            {\n                // TODO: this causes keys to be sent out of order\n                let s = \"Dict(\\n\";\n                for (const [k, v] of Object.entries(obj)) {\n                    // repr() because JSON keys must be strings.\n                    s +=\n                        \" \".repeat(indent + 4) +\n                            reprStr(k) +\n                            \" => \" +\n                            jsonAsJulia(v, indent + 4) +\n                            \",\\n\";\n                }\n                if (s.endsWith(\",\\n\")) {\n                    s = s.slice(0, -2) + \"\\n\";\n                }\n                s += \" \".repeat(indent) + \")\";\n                return s;\n            }\n        default:\n            throw new CCError(\"unexpected object type that shouldn't appear in JSON: \" + typeof obj);\n    }\n}\nfunction formatData(request, imports) {\n    if (!request.dataArray) {\n        return [\"\", \"\"]; // placate type-checker\n    }\n    const contentType = request.headers.getContentType();\n    // TODO: delete Content-Type header when it's what Julia will send anyway\n    if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        request.dataArray[0] instanceof Word &&\n        request.dataArray[0].isString()) {\n        if (contentType === \"application/json\") {\n            try {\n                const jsonData = jsonParseLossless(request.dataArray[0].toString());\n                const result = jsonAsJulia(jsonData);\n                imports.add(\"JSON\");\n                return [result, \"JSON.json(body)\"];\n            }\n            catch (_a) { }\n        }\n        else if (contentType === \"application/x-www-form-urlencoded\") {\n            const [queryList] = parseQueryString(request.dataArray[0]);\n            if (queryList) {\n                let code = \"Dict(\\n\";\n                for (const [k, v] of queryList) {\n                    if (v === null) {\n                        continue;\n                    }\n                    code += \"    \" + repr(k) + \" => \" + repr(v) + \",\\n\";\n                }\n                if (code.endsWith(\",\\n\")) {\n                    code = code.slice(0, -2) + \"\\n\";\n                }\n                code += \")\";\n                return [code, \"body\"];\n            }\n        }\n    }\n    const formattedItems = [];\n    for (const item of request.dataArray) {\n        if (item instanceof Word) {\n            formattedItems.push(repr(item));\n        }\n        else {\n            let formattedItem = \"\";\n            if (item.name) {\n                formattedItem += repr(mergeWords(item.name, \"=\")) + \" * \";\n            }\n            const filename = eq(item.filename, \"-\") ? \"stdin\" : repr(item.filename);\n            if (item.filetype === \"data\") {\n                formattedItem += \"replace(read(\" + filename + ', String), \"\\\\n\" => \"\")';\n            }\n            else {\n                // TODO: binary files shouldn't be read as string\n                formattedItem += \"read(\" + filename + \", String)\";\n            }\n            formattedItems.push(formattedItem);\n        }\n    }\n    return [formattedItems.join(\" * \\n    \"), \"body\"];\n}\nexport function _toJulia(requests, warnings = []) {\n    const request = getFirst(requests, warnings, { dataReadsFile: true });\n    let code = \"\";\n    const imports = new Set([\"HTTP\"]);\n    const methods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"HEAD\"];\n    const method = request.urls[0].method;\n    let fn = \"HTTP.request\";\n    const args = [];\n    if (method.isString() && methods.includes(method.toString())) {\n        fn = \"HTTP.\" + method.toString().toLowerCase();\n    }\n    else {\n        args.push(repr(method));\n    }\n    let url = repr(request.urls[0].url);\n    let hasQuery = false;\n    if (request.urls[0].queryList) {\n        // TODO: use Dict() when no repeated keys\n        code += \"query = [\\n\";\n        for (const [k, v] of request.urls[0].queryList) {\n            code += \"    \" + repr(k) + \" => \" + repr(v) + \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        code += \"]\\n\\n\";\n        url = repr(request.urls[0].urlWithoutQueryList);\n        hasQuery = true;\n    }\n    args.push(url);\n    const hasHeaders = request.headers.length || request.urls[0].auth;\n    if (hasHeaders) {\n        code += \"headers = Dict(\\n\";\n        for (const [k, v] of request.headers) {\n            if (v === null) {\n                continue;\n            }\n            code += \"    \" + repr(k) + \" => \" + repr(v) + \",\\n\";\n        }\n        if (request.urls[0].auth) {\n            code +=\n                '    \"Authorization\" => \"Basic \" * base64encode(' +\n                    repr(mergeWords(request.urls[0].auth[0], \":\", request.urls[0].auth[1])) +\n                    \"),\\n\";\n            imports.add(\"Base64\");\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        code += \")\\n\\n\";\n        args.push(\"headers\");\n    }\n    let bodyArg = null;\n    if (request.urls[0].uploadFile) {\n        if (eq(request.urls[0].uploadFile, \"-\")) {\n            bodyArg = \"stdin\";\n        }\n        else {\n            code += \"body = open(\" + repr(request.urls[0].uploadFile) + ', \"r\")\\n\\n';\n            bodyArg = \"body\";\n        }\n    }\n    else if (request.multipartUploads) {\n        code += \"form = HTTP.Form(\\n\";\n        code += \"    Dict(\\n\";\n        for (const f of request.multipartUploads) {\n            code += \"        \" + repr(f.name) + \" => \";\n            if (\"content\" in f) {\n                code += repr(f.content) + \",\\n\";\n            }\n            else {\n                if (!f.contentType && f.filename && eq(f.contentFile, f.filename)) {\n                    code += \"open(\" + repr(f.contentFile) + \"),\\n\";\n                }\n                else if (!f.filename) {\n                    // There's no way to change Content-Type without sending a filename\n                    code += \"read(\" + repr(f.contentFile) + \", String),\\n\";\n                }\n                else {\n                    code += \"HTTP.Multipart(\";\n                    if (eq(f.contentFile, f.filename)) {\n                        code += repr(f.filename);\n                    }\n                    else {\n                        code += repr(f.contentFile);\n                    }\n                    code += \", open(\" + repr(f.contentFile) + \")\";\n                    if (f.contentType) {\n                        code += \", \" + repr(f.contentType);\n                    }\n                    code += \"),\\n\";\n                }\n            }\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        code += \"    )\\n\";\n        code += \")\\n\\n\";\n        bodyArg = \"form\";\n    }\n    else if (request.dataArray && request.dataArray.length) {\n        let bodyCode;\n        [bodyCode, bodyArg] = formatData(request, imports);\n        code += \"body = \" + bodyCode + \"\\n\\n\";\n    }\n    if (bodyArg) {\n        if (!hasHeaders) {\n            args.push(\"[]\");\n        }\n        args.push(bodyArg);\n    }\n    if (hasQuery) {\n        args.push(\"query=query\");\n    }\n    if (request.timeout) {\n        args.push(\"readtimeout=\" + request.timeout.toString());\n        warnings.push([\n            \"not-read-timeout\",\n            \"curl has no read timeout, using Julia's `readtimeout` instead\",\n        ]);\n    }\n    if (request.compressed === false) {\n        args.push(\"decompress=false\");\n    }\n    if (request.retry) {\n        args.push(\"retries=\" + request.retry.toString());\n    }\n    if (request.followRedirects === false) {\n        args.push(\"redirect=false\");\n    }\n    if (request.maxRedirects) {\n        args.push(\"redirect_limit=\" + request.maxRedirects.toString());\n    }\n    if (request.insecure) {\n        args.push(\"require_ssl_verification=false\");\n    }\n    if (request.verbose) {\n        args.push(\"verbose=1\");\n    }\n    code += \"resp = \" + fn + \"(\";\n    const oneLineArgs = args.join(\", \");\n    if (((fn === \"HTTP.request\" && args.length > 2) ||\n        (fn !== \"HTTP.request\" && args.length > 1)) &&\n        oneLineArgs.length > 70) {\n        code += \"\\n    \" + args.join(\",\\n    \");\n        code += \"\\n)\\n\";\n    }\n    else {\n        code += oneLineArgs + \")\\n\";\n    }\n    let importCode = \"\";\n    if (imports.size) {\n        importCode = \"using \" + Array.from(imports).sort().join(\", \") + \"\\n\\n\";\n    }\n    return importCode + code;\n}\nexport function toJuliaWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toJulia(requests, warnings);\n    return [code, warnings];\n}\nexport function toJulia(curlCommand) {\n    return toJuliaWarn(curlCommand)[0];\n}\n//# sourceMappingURL=julia.js.map","import { Word, eq } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { parseQueryString } from \"../Query.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"connect-timeout\",\n    \"location\",\n    \"location-trusted\",\n    \"upload-file\",\n    \"form\",\n    \"form-string\",\n]);\n// The only difference from Java is that in Kotlin the $ needs to be escaped\n// https://kotlinlang.org/docs/java-to-kotlin-idioms-strings.html#concatenate-strings\n// https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6\n// https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.3\nconst regexEscape = /\\$|\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nconst regexDigit = /[0-9]/; // it's 0-7 actually but that would generate confusing code\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c, index, string) => {\n            switch (c) {\n                case \"$\":\n                    return \"\\\\$\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            if (c.length === 2) {\n                const first = c.charCodeAt(0);\n                const second = c.charCodeAt(1);\n                return (\"\\\\u\" +\n                    first.toString(16).padStart(4, \"0\") +\n                    \"\\\\u\" +\n                    second.toString(16).padStart(4, \"0\"));\n            }\n            if (c === \"\\0\" && !regexDigit.test(string.charAt(index + 1))) {\n                return \"\\\\0\";\n            }\n            return \"\\\\u\" + c.charCodeAt(0).toString(16).padStart(4, \"0\");\n        }) +\n        '\"');\n}\n// TODO: anything different here?\nexport function repr(w, imports) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"System.getenv(\" + reprStr(t.value) + ') ?: \"\"');\n            imports.add(\"java.lang.System\");\n        }\n        else {\n            args.push(\"exec(\" + reprStr(t.value) + \")\");\n            imports.add(\"java.lang.Runtime\");\n            imports.add(\"java.util.Scanner\");\n        }\n    }\n    return args.join(\" + \");\n}\nexport function _toKotlin(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const url = request.urls[0];\n    const imports = new Set([\n        \"java.io.IOException\",\n        \"okhttp3.OkHttpClient\",\n        \"okhttp3.Request\",\n    ]);\n    let kotlinCode = \"\";\n    kotlinCode += \"val client = OkHttpClient()\";\n    const clientLines = [];\n    if (request.timeout) {\n        // TODO: floats don't work here\n        clientLines.push(\"  .callTimeout(\" + request.timeout.toString() + \", TimeUnit.SECONDS)\\n\");\n        imports.add(\"java.util.concurrent.TimeUnit\");\n    }\n    if (request.connectTimeout) {\n        clientLines.push(\"  .connectTimeout(\" +\n            request.connectTimeout.toString() +\n            \", TimeUnit.SECONDS)\\n\");\n        imports.add(\"java.util.concurrent.TimeUnit\");\n    }\n    if (request.followRedirects === false) {\n        clientLines.push(\"  .followRedirects(false)\\n\");\n        clientLines.push(\"  .followSslRedirects(false)\\n\");\n    }\n    // TODO: Proxy\n    if (clientLines.length) {\n        kotlinCode += \".newBuilder()\\n\";\n        for (const line of clientLines) {\n            kotlinCode += line;\n        }\n        kotlinCode += \"  .build()\";\n    }\n    kotlinCode += \"\\n\\n\";\n    if (url.auth) {\n        const [name, password] = url.auth;\n        kotlinCode +=\n            \"val credential = Credentials.basic(\" +\n                repr(name, imports) +\n                \", \" +\n                repr(password, imports) +\n                \");\\n\\n\";\n        imports.add(\"okhttp3.Credentials\");\n        if (request.authType !== \"basic\") {\n            warnings.push([\n                \"okhttp-unsupported-auth-type\",\n                \"OkHttp doesn't support auth type \" + request.authType,\n            ]);\n        }\n    }\n    const methodCallArgs = [];\n    const contentType = request.headers.getContentType();\n    const exactContentType = request.headers.get(\"content-type\");\n    if (url.uploadFile) {\n        if (eq(url.uploadFile, \"-\") || eq(url.uploadFile, \".\")) {\n            warnings.push([\"upload-stdin\", \"uploading from stdin isn't supported\"]);\n        }\n        if (exactContentType) {\n            kotlinCode +=\n                \"val MEDIA_TYPE = \" +\n                    repr(exactContentType, imports) +\n                    \".toMediaType()\\n\\n\";\n            imports.add(\"okhttp3.MediaType.Companion.toMediaType\");\n        }\n        methodCallArgs.push(\"file.asRequestBody(MEDIA_TYPE)\");\n        kotlinCode += \"val file = File(\" + repr(url.uploadFile, imports) + \")\\n\\n\";\n        imports.add(\"java.io.File\");\n        imports.add(\"okhttp3.RequestBody.Companion.asRequestBody\");\n    }\n    else if (request.multipartUploads) {\n        methodCallArgs.push(\"requestBody\");\n        kotlinCode += \"val requestBody = MultipartBody.Builder()\\n\";\n        kotlinCode += \"  .setType(MultipartBody.FORM)\\n\";\n        for (const m of request.multipartUploads) {\n            const args = [repr(m.name, imports)];\n            if (\"content\" in m) {\n                args.push(repr(m.content, imports));\n            }\n            else {\n                if (\"filename\" in m && m.filename) {\n                    args.push(repr(m.filename, imports));\n                    args.push(\"File(\" + repr(m.contentFile, imports) + \").asRequestBody()\");\n                    imports.add(\"java.io.File\");\n                    imports.add(\"okhttp3.RequestBody.Companion.asRequestBody\");\n                }\n                else {\n                    // TODO: import\n                    // TODO: probably doesn't work\n                    args.push(\"Files.readAllBytes(\" + repr(m.contentFile, imports) + \")\");\n                }\n            }\n            kotlinCode += \"  .addFormDataPart(\" + args.join(\", \") + \")\\n\";\n        }\n        kotlinCode += \"  .build()\\n\\n\";\n        imports.add(\"okhttp3.MultipartBody\");\n    }\n    else if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        // TODO: surely --upload-file and this can't be identical,\n        // doesn't this ignore url encoding?\n        if (exactContentType) {\n            kotlinCode +=\n                \"val MEDIA_TYPE = \" +\n                    repr(exactContentType, imports) +\n                    \".toMediaType()\\n\\n\";\n            imports.add(\"okhttp3.MediaType.Companion.toMediaType\");\n        }\n        methodCallArgs.push(\"file.asRequestBody(MEDIA_TYPE)\");\n        imports.add(\"okhttp3.RequestBody.Companion.asRequestBody\");\n        kotlinCode +=\n            \"val file = File(\" +\n                repr(request.dataArray[0].filename, imports) +\n                \")\\n\\n\";\n        imports.add(\"java.io.File\");\n    }\n    else if (request.data) {\n        if (contentType === \"application/x-www-form-urlencoded\") {\n            const [queryList] = parseQueryString(request.data);\n            if (!queryList) {\n                if (exactContentType) {\n                    kotlinCode +=\n                        \"val MEDIA_TYPE = \" +\n                            repr(exactContentType, imports) +\n                            \".toMediaType()\\n\\n\";\n                    imports.add(\"okhttp3.MediaType.Companion.toMediaType\");\n                }\n                methodCallArgs.push(\"requestBody.toRequestBody(MEDIA_TYPE)\");\n                imports.add(\"okhttp3.RequestBody.Companion.toRequestBody\");\n                kotlinCode +=\n                    \"val requestBody = \" + repr(request.data, imports) + \"\\n\\n\";\n            }\n            else {\n                methodCallArgs.push(\"formBody\");\n                kotlinCode += \"val formBody = FormBody.Builder()\\n\";\n                for (const [name, value] of queryList) {\n                    kotlinCode +=\n                        \"  .add(\" +\n                            repr(name, imports) +\n                            \", \" +\n                            repr(value, imports) +\n                            \")\\n\";\n                }\n                kotlinCode += \"  .build()\\n\\n\";\n                imports.add(\"okhttp3.FormBody\");\n            }\n        }\n        else {\n            if (exactContentType) {\n                kotlinCode +=\n                    \"val MEDIA_TYPE = \" +\n                        repr(exactContentType, imports) +\n                        \".toMediaType()\\n\\n\";\n                imports.add(\"okhttp3.MediaType.Companion.toMediaType\");\n            }\n            methodCallArgs.push(\"requestBody.toRequestBody(MEDIA_TYPE)\");\n            kotlinCode += \"val requestBody = \" + repr(request.data, imports) + \"\\n\\n\";\n            imports.add(\"okhttp3.RequestBody.Companion.toRequestBody\");\n        }\n    }\n    kotlinCode += \"val request = Request.Builder()\\n\";\n    kotlinCode += \"  .url(\" + repr(url.url, imports) + \")\\n\";\n    const methods = [\"DELETE\", \"GET\", \"HEAD\", \"PATCH\", \"POST\", \"PUT\"];\n    const dataMethods = [\"DELETE\", \"PATCH\", \"POST\", \"PUT\"];\n    const requiredDataMethods = [\"PATCH\", \"POST\", \"PUT\"];\n    const method = url.method;\n    const methodStr = url.method.toString();\n    let methodCall = \"method\";\n    if (!method.isString() ||\n        !methods.includes(methodStr) ||\n        // If we appended something to methodCallArgs it means we need to send data\n        (methodCallArgs.length && !dataMethods.includes(methodStr)) ||\n        (!methodCallArgs.length && requiredDataMethods.includes(methodStr))) {\n        if (!methodCallArgs.length) {\n            methodCallArgs.push('\"\".toRequestBody()');\n            imports.add(\"okhttp3.RequestBody.Companion.toRequestBody\");\n        }\n        methodCallArgs.unshift(repr(method, imports));\n    }\n    else {\n        if (methodStr === \"DELETE\" && !methodCallArgs.length) {\n            methodCallArgs.push('\"\".toRequestBody()');\n            imports.add(\"okhttp3.RequestBody.Companion.toRequestBody\");\n        }\n        methodCall = method.toString().toLowerCase();\n    }\n    if (methodCall !== \"get\") {\n        kotlinCode += \"  .\" + methodCall + \"(\" + methodCallArgs.join(\", \") + \")\\n\";\n    }\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                continue;\n            }\n            kotlinCode +=\n                \"  .header(\" +\n                    repr(headerName, imports) +\n                    \", \" +\n                    repr(headerValue, imports) +\n                    \")\\n\";\n        }\n    }\n    if (url.auth) {\n        const authHeader = request.headers.lowercase\n            ? \"authorization\"\n            : \"Authorization\";\n        kotlinCode += '  .header(\"' + authHeader + '\", credential)\\n';\n    }\n    kotlinCode += \"  .build()\\n\";\n    kotlinCode += \"\\n\";\n    kotlinCode += \"client.newCall(request).execute().use { response ->\\n\";\n    kotlinCode +=\n        '  if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\\n';\n    kotlinCode += \"  response.body!!.string()\\n\";\n    kotlinCode += \"}\\n\";\n    let preambleCode = \"\";\n    for (const imp of Array.from(imports).sort()) {\n        preambleCode += \"import \" + imp + \"\\n\";\n    }\n    if (imports.size) {\n        preambleCode += \"\\n\";\n    }\n    // TODO\n    if (imports.has(\"java.lang.Runtime\")) {\n        // Helper function that runs a bash command and always returns a string\n        preambleCode += \"fun exec(cmd: String): String {\\n\";\n        preambleCode += \"  try {\\n\";\n        preambleCode += \"    val p = Runtime.getRuntime().exec(cmd)\\n\";\n        preambleCode += \"    p.waitFor()\\n\";\n        preambleCode +=\n            '    val s = Scanner(p.getInputStream()).useDelimiter(\"\\\\\\\\A\")\\n';\n        preambleCode += '    return s.hasNext() ? s.next() : \"\"\\n';\n        preambleCode += \"  } catch (Exception e) {\\n\";\n        preambleCode += '    return \"\"\\n';\n        preambleCode += \"  }\\n\";\n        preambleCode += \"}\\n\";\n        preambleCode += \"\\n\";\n    }\n    return preambleCode + kotlinCode;\n}\nexport function toKotlinWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const kotlin = _toKotlin(requests, warnings);\n    return [kotlin, warnings];\n}\nexport function toKotlin(curlCommand) {\n    return toKotlinWarn(curlCommand)[0];\n}\n//# sourceMappingURL=kotlin.js.map","import { Word, eq, joinWords } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { reprStr as pyreprStr } from \"./python/python.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    // \"form\",\n    // \"form-string\",\n]);\nfunction reprStr(s) {\n    if (s.includes('\"') && !s.includes(\"'\")) {\n        return pyreprStr(s, \"'\");\n    }\n    return pyreprStr(s, '\"');\n}\nfunction repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"os.getenv(\" + reprStr(t.value) + \")\");\n        }\n        else {\n            args.push(\"io.popen(\" + reprStr(t.value) + '):read(\"*a\")');\n        }\n    }\n    return args.join(\" .. \");\n}\n// http://lua-users.org/wiki/TablesTutorial\nconst VALID_KEY = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\nfunction reprKey(key) {\n    if (key instanceof Word) {\n        if (key.isString() && VALID_KEY.test(key.toString())) {\n            return key.toString();\n        }\n        return \"[\" + repr(key) + \"]\";\n    }\n    if (VALID_KEY.test(key)) {\n        return key;\n    }\n    return \"[\" + reprStr(key) + \"]\";\n}\nfunction jsonToLua(data, indent = 0) {\n    if (typeof data === \"string\") {\n        return reprStr(data);\n    }\n    if (typeof data === \"number\") {\n        return data.toString();\n    }\n    if (typeof data === \"boolean\") {\n        return data ? \"true\" : \"false\";\n    }\n    if (data === null) {\n        return \"nil\";\n    }\n    if (Array.isArray(data)) {\n        if (data.length === 0) {\n            return \"{}\";\n        }\n        let code = \"{\\n\";\n        for (const item of data) {\n            code += \"\\t\".repeat(indent + 1) + jsonToLua(item, indent + 1) + \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        code += \"\\t\".repeat(indent) + \"}\";\n        return code;\n    }\n    if (typeof data === \"object\") {\n        const entries = Object.entries(data);\n        if (entries.length === 0) {\n            // TODO: not correct https://github.com/rxi/json.lua/issues/23\n            return \"{}\";\n        }\n        let code = \"{\\n\";\n        for (const [key, value] of entries) {\n            code +=\n                \"\\t\".repeat(indent + 1) +\n                    reprKey(key) +\n                    \" = \" +\n                    jsonToLua(value, indent + 1) +\n                    \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        code += \"\\t\".repeat(indent) + \"}\";\n        return code;\n    }\n    else {\n        throw new Error(\"Unsupported JSON type: \" + typeof data);\n    }\n}\nexport function _toLua(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const imports = new Set([\"http\"]);\n    let code = \"\";\n    code += \"local body, code, headers, status = http.request\";\n    if (eq(request.urls[0].method, \"GET\") &&\n        !request.data &&\n        !request.headers.length &&\n        !request.urls[0].auth) {\n        code += \"(\" + repr(request.urls[0].originalUrl) + \")\\n\";\n    }\n    else if (eq(request.urls[0].method, \"POST\") &&\n        request.data &&\n        !request.urls[0].auth &&\n        request.headers.length === 1 &&\n        request.headers.has(\"content-type\") &&\n        eq(request.headers.get(\"content-type\"), \"application/x-www-form-urlencoded\")) {\n        code += \"(\\n\";\n        code += \"\\t\" + repr(request.urls[0].originalUrl) + \"\\n\";\n        code += \"\\t\" + repr(request.data) + \"\\n\";\n        code += \")\\n\";\n    }\n    else {\n        code += \"{\\n\";\n        if (!eq(request.urls[0].method, \"GET\")) {\n            code += \"\\tmethod = \" + repr(request.urls[0].method) + \",\\n\";\n        }\n        code += \"\\turl = \" + repr(request.urls[0].originalUrl) + \",\\n\";\n        if (request.data) {\n            code += \"\\tsource = ltn12.source.string(\";\n            if (request.headers.getContentType() === \"application/json\" &&\n                request.data.isString()) {\n                try {\n                    code +=\n                        \"json.encode(\" +\n                            jsonToLua(JSON.parse(request.data.toString()), 1) +\n                            \")\";\n                    imports.add(\"json\");\n                }\n                catch (e) {\n                    code += repr(request.data);\n                }\n            }\n            else {\n                code += repr(request.data);\n            }\n            code += \"),\\n\";\n            imports.add(\"ltn12\");\n        }\n        if (request.headers.length > 0 || request.urls[0].auth) {\n            code += \"\\theaders = {\\n\";\n            for (const [name, value] of request.headers) {\n                if (value === null) {\n                    continue;\n                }\n                code += \"\\t\\t\" + reprKey(name) + \" = \" + repr(value) + \",\\n\";\n            }\n            if (request.urls[0].auth) {\n                code +=\n                    '\\t\\tauthentication = \"Basic \" .. (mime.b64(' +\n                        repr(joinWords(request.urls[0].auth, \":\")) +\n                        \")),\\n\";\n                imports.add(\"mime\");\n            }\n            if (code.endsWith(\",\\n\")) {\n                code = code.slice(0, -2) + \"\\n\";\n            }\n            code += \"\\t},\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        // code += \"\\tsink = ltn12.sink.table(respbody)\\n\";\n        code += \"}\\n\";\n    }\n    let importCode = \"\";\n    if (imports.size) {\n        for (const imp of Array.from(imports).sort()) {\n            if (imp === \"http\") {\n                importCode += 'local http = require(\"socket.http\")\\n';\n            }\n            else {\n                importCode += \"local \" + imp + ' = require(\"' + imp + '\")\\n';\n            }\n        }\n    }\n    return importCode + \"\\n\" + code;\n}\nexport function toLuaWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const lua = _toLua(requests, warnings);\n    return [lua, warnings];\n}\nexport function toLua(curlCommand) {\n    return toLuaWarn(curlCommand)[0];\n}\n//# sourceMappingURL=lua.js.map","import { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { toWebServices } from \"./webservices.js\";\nimport { toHTTPInterface } from \"./httpinterface.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"insecure\",\n    \"no-insecure\",\n    \"form\",\n    \"form-string\",\n]);\nexport function _toMATLAB(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const [webServicesLines] = toWebServices(request, warnings);\n    const [httpInterfaceLines] = toHTTPInterface(request, warnings);\n    const lines = webServicesLines.concat(\"\", httpInterfaceLines);\n    return lines\n        .flat()\n        .filter((line) => line !== null)\n        .join(\"\\n\");\n}\nexport function toMATLABWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const matlab = _toMATLAB(requests, warnings);\n    return [matlab, warnings];\n}\nexport function toMATLAB(curlCommand) {\n    return toMATLABWarn(curlCommand)[0];\n}\n//# sourceMappingURL=matlab.js.map","import { Word, eq, mergeWords } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    // TODO\n    // \"form\",\n    // \"form-string\",\n    \"max-time\",\n]);\n// Presumably the same as C strings\n// https://en.wikipedia.org/wiki/Escape_sequences_in_C#Table_of_escape_sequences\nconst regexEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprStr(s) {\n    return ('@\"' +\n        s.replace(regexEscape, (c) => {\n            switch (c) {\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 2) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            if (hex.length <= 4) {\n                return \"\\\\u\" + hex.padStart(4, \"0\");\n            }\n            return \"\\\\U\" + hex.padStart(8, \"0\");\n        }) +\n        '\"');\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            // TODO: turns into \"(null)\" if variable doesn't exist\n            args.push(\"[[[NSProcessInfo processInfo] environment] objectForKey:\" +\n                reprStr(t.value) +\n                \"]\");\n        }\n        else if (t.type === \"command\") {\n            // TODO: doesn't return the output\n            args.push(\"system(\" + reprStr(t.value) + \")\");\n        }\n    }\n    if (args.length === 1) {\n        return args[0];\n    }\n    // This is how you concatenate strings in Objective-C.\n    return ('[NSString stringWithFormat:@\"' +\n        \"%@\".repeat(args.length) +\n        '\", ' +\n        args.join(\", \") +\n        \"]\");\n}\nconst reservedHeaders = [\n    \"Content-Length\",\n    \"Authorization\",\n    \"Connection\",\n    \"Host\",\n    \"Proxy-Authenticate\",\n    \"Proxy-Authorization\",\n    \"WWW-Authenticate\",\n].map((h) => h.toLowerCase());\nexport function _toObjectiveC(requests, warnings = []) {\n    const request = getFirst(requests, warnings, { dataReadsFile: true });\n    let code = \"\";\n    code += \"#import <Foundation/Foundation.h>\\n\";\n    code += \"\\n\";\n    code +=\n        \"NSURL *url = [NSURL URLWithString:\" + repr(request.urls[0].url) + \"];\\n\";\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        code += \"\\n\";\n        code +=\n            'NSString *credentials = [NSString stringWithFormat:@\"%@:%@\", ' +\n                repr(user) +\n                \", \" +\n                repr(password) +\n                \"];\\n\";\n        code +=\n            \"NSData *credentialsData = [credentials dataUsingEncoding:NSUTF8StringEncoding];\\n\";\n        code +=\n            \"NSString *base64Credentials = [credentialsData base64EncodedStringWithOptions:0];\\n\";\n    }\n    if (request.headers.length || request.urls[0].auth) {\n        const headerLines = [];\n        for (const [key, value] of request.headers) {\n            if (value === null) {\n                continue;\n            }\n            if (key.isString() &&\n                reservedHeaders.includes(key.toLowerCase().toString())) {\n                warnings.push([\n                    \"reserved-header\",\n                    key.toString() + \" is a reserved header\",\n                ]);\n            }\n            headerLines.push(\"    \" + repr(key) + \": \" + repr(value));\n        }\n        if (request.urls[0].auth) {\n            warnings.push([\"reserved-header\", \"Authorization is a reserved header\"]);\n            headerLines.push('    @\"Authorization\": [NSString stringWithFormat:@\"Basic %@\", base64Credentials]');\n        }\n        if (headerLines.length) {\n            code += \"NSDictionary *headers = @{\\n\";\n            code += headerLines.join(\",\\n\") + \"\\n\";\n            code += \"};\\n\";\n            code += \"\\n\";\n        }\n    }\n    let hasData = false;\n    let hasDataStream = false;\n    if (request.urls[0].uploadFile) {\n        code +=\n            \"InputStream *dataStream = [InputStream fileAtPath:\" +\n                // TODO: might need processing\n                repr(request.urls[0].uploadFile) +\n                \"];\";\n        hasDataStream = true;\n    }\n    else if (request.multipartUploads) {\n        // TODO\n    }\n    else if (request.dataArray && request.dataArray.length >= 1) {\n        if (request.dataArray.length === 1 &&\n            !(request.dataArray[0] instanceof Word) &&\n            !request.dataArray[0].name) {\n            // TODO: urlencode if necessary\n            code +=\n                \"InputStream *dataStream = [InputStream fileAtPath:\" +\n                    repr(request.dataArray[0].filename) +\n                    \"];\";\n            hasDataStream = true;\n        }\n        else {\n            const parts = [];\n            if (request.dataArray.length === 1 &&\n                request.dataArray[0] instanceof Word) {\n                const entries = request.dataArray[0].split(\"&\");\n                for (const [i, entry] of entries.entries()) {\n                    const newEntry = i === 0 ? entry : entry.prepend(\"&\");\n                    parts.push(repr(newEntry));\n                }\n            }\n            else {\n                // TODO: this can be better\n                const entries = [];\n                for (const d of request.dataArray) {\n                    if (d instanceof Word) {\n                        entries.push(d);\n                    }\n                    else {\n                        if (d.name) {\n                            const name = d.name.append(\"=\");\n                            const lastEntry = entries[entries.length - 1];\n                            if (entries.length && lastEntry instanceof Word) {\n                                entries[entries.length - 1] = mergeWords(lastEntry, name);\n                            }\n                            else {\n                                entries.push(name);\n                            }\n                        }\n                        entries.push(d);\n                    }\n                }\n                for (const entry of entries) {\n                    if (entry instanceof Word) {\n                        parts.push(repr(entry));\n                    }\n                    else {\n                        // TODO: handle file type\n                        parts.push(\"[NSString stringWithContentsOfFile:\" +\n                            repr(entry.filename) +\n                            \" encoding:NSUTF8StringEncoding error:nil];\");\n                    }\n                }\n            }\n            const [firstPart, ...restParts] = parts;\n            code +=\n                \"NSMutableData *data = [[NSMutableData alloc] initWithData:[\" +\n                    firstPart +\n                    \" dataUsingEncoding:NSUTF8StringEncoding]];\\n\";\n            for (const part of restParts) {\n                code +=\n                    \"[data appendData:[\" +\n                        part +\n                        \" dataUsingEncoding:NSUTF8StringEncoding]];\\n\";\n            }\n            code += \"\\n\";\n            hasData = true;\n        }\n    }\n    if (request.timeout &&\n        !eq(request.timeout, \"60\") &&\n        !eq(request.timeout, \"60.0\")) {\n        code +=\n            \"NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url\\n\";\n        code +=\n            \"                                                          cachePolicy:NSURLRequestUseProtocolCachePolicy\\n\";\n        code +=\n            \"                                                      timeoutInterval:\" +\n                // TODO: verify/escape or parse\n                request.timeout.toString() +\n                \"];\\n\";\n    }\n    else {\n        code +=\n            \"NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\\n\";\n    }\n    if (!eq(request.urls[0].method, \"GET\")) {\n        code += \"[request setHTTPMethod:\" + repr(request.urls[0].method) + \"];\\n\";\n    }\n    if (request.headers.length || request.urls[0].auth) {\n        code += \"[request setAllHTTPHeaderFields:headers];\\n\";\n    }\n    if (hasData) {\n        code += \"[request setHTTPBody:data];\\n\";\n    }\n    else if (hasDataStream) {\n        // TODO: does this work?\n        code += \"[request setHTTPBodyStream:dataStream];\\n\";\n    }\n    code += \"\\n\";\n    // TODO: TLSMinimumSupportedProtocolVersion\n    code +=\n        \"NSURLSessionConfiguration *defaultSessionConfiguration = [NSURLSessionConfiguration defaultSessionConfiguration];\\n\";\n    code +=\n        \"NSURLSession *session = [NSURLSession sessionWithConfiguration:defaultSessionConfiguration];\\n\";\n    code +=\n        \"NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\\n\";\n    code += \"    if (error) {\\n\";\n    code += '        NSLog(@\"%@\", error);\\n';\n    code += \"    } else {\\n\";\n    code +=\n        \"        NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\\n\";\n    code += '        NSLog(@\"%@\", httpResponse);\\n';\n    code += \"    }\\n\";\n    code += \"}];\\n\";\n    code += \"[dataTask resume];\\n\";\n    return code;\n}\nexport function toObjectiveCWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toObjectiveC(requests, warnings);\n    return [code, warnings];\n}\nexport function toObjectiveC(curlCommand) {\n    return toObjectiveCWarn(curlCommand)[0];\n}\n//# sourceMappingURL=objectivec.js.map","import { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([...COMMON_SUPPORTED_ARGS]);\n// https://v2.ocaml.org/manual/lex.html#sss:stringliterals\nconst regexEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c) => {\n            switch (c) {\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case '\"':\n                    return '\\\\\"';\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\b\":\n                    return \"\\\\b\";\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 2) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            return \"\\\\u{\" + hex + \"}\";\n        }) +\n        '\"');\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            // TODO: can raise Not_found\n            args.push(\"(Sys.getenv \" + reprStr(t.value) + \")\");\n        }\n        else if (t.type === \"command\") {\n            // TODO: doesn't return the output\n            args.push(\"(Sys.command \" + reprStr(t.value) + \")\");\n        }\n    }\n    if (args.length === 1) {\n        return args[0];\n    }\n    return \"(\" + args.join(\" ^ \") + \")\";\n}\nexport function _toOCaml(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    let code = \"\";\n    code += \"open Lwt\\n\";\n    code += \"open Cohttp\\n\";\n    code += \"open Cohttp_lwt_unix\\n\";\n    code += \"\\n\";\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    // https://github.com/mirage/ocaml-cohttp/blob/b0104b407e631b5a1e51c626a75af17cc6f33369/cohttp/src/code.ml#L5-L15\n    const methodConstants = [\n        \"GET\",\n        \"POST\",\n        \"HEAD\",\n        \"DELETE\",\n        \"PATCH\",\n        \"PUT\",\n        \"OPTIONS\",\n        \"TRACE\",\n        \"CONNECT\",\n    ];\n    // https://github.com/mirage/ocaml-cohttp/blob/b0104b407e631b5a1e51c626a75af17cc6f33369/cohttp-lwt/src/s.ml#L220\n    const methodFns = [\"HEAD\", \"GET\", \"DELETE\", \"POST\", \"PUT\", \"PATCH\"];\n    const bodyMethods = [\"POST\", \"PUT\", \"PATCH\"];\n    // TODO: Client.post_form\n    code += \"let uri = Uri.of_string \" + repr(request.urls[0].url) + \" in\\n\";\n    if (!method.isString() || !methodConstants.includes(methodStr)) {\n        code += \"let meth = Code.method_of_string \" + repr(method) + \" in\\n\";\n    }\n    const hasBody = Boolean(request.data);\n    if (request.headers.length === 1 && !request.urls[0].auth) {\n        const [key, value] = request.headers.headers[0];\n        if (value !== null) {\n            code +=\n                \"let headers = Header.init_with \" +\n                    repr(key) +\n                    \" \" +\n                    repr(value) +\n                    \" in\\n\";\n        }\n    }\n    else if (request.headers.length || request.urls[0].auth) {\n        code += \"let headers = Header.init ()\";\n        for (const header of request.headers) {\n            const [key, value] = header;\n            if (value !== null) {\n                code += \"\\n  |> fun h -> Header.add h \" + repr(key) + \" \" + repr(value);\n            }\n        }\n        if (request.urls[0].auth) {\n            const [user, pass] = request.urls[0].auth;\n            code +=\n                \"\\n  |> fun h -> Header.add_authorization h (`Basic (\" +\n                    repr(user) +\n                    \", \" +\n                    repr(pass) +\n                    \"))\";\n        }\n        code += \" in\\n\";\n    }\n    if (request.data) {\n        code +=\n            \"let body = Cohttp_lwt.Body.of_string \" + repr(request.data) + \" in\\n\";\n    }\n    // TODO: --upload-file\n    // TODO: request.multipartUploads\n    let fn = \"Client.call\";\n    const args = [];\n    if (request.headers.length || request.urls[0].auth) {\n        args.push(\"~headers\");\n    }\n    if (hasBody) {\n        args.push(\"~body\");\n    }\n    if (!method.isString() || !methodConstants.includes(methodStr)) {\n        args.push(\"meth\");\n    }\n    else {\n        if (methodFns.includes(methodStr) &&\n            (!hasBody || bodyMethods.includes(methodStr))) {\n            fn = \"Client.\" + methodStr.toLowerCase();\n        }\n        else {\n            args.push(\"`\" + methodStr);\n        }\n    }\n    args.push(\"uri\");\n    code += fn + \" \" + args.join(\" \") + \"\\n\";\n    code += \">>= fun (resp, body) ->\\n\";\n    code += \"  (* Do stuff with the result *)\\n\";\n    return code;\n}\nexport function toOCamlWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toOCaml(requests, warnings);\n    return [code, warnings];\n}\nexport function toOCaml(curlCommand) {\n    return toOCamlWarn(curlCommand)[0];\n}\n//# sourceMappingURL=ocaml.js.map","import { eq, mergeWords } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"insecure\",\n    \"no-insecure\",\n    \"upload-file\",\n    \"max-redirs\",\n    \"max-time\",\n    \"form\",\n    \"form-string\",\n]);\n// http://www.dispersiondesign.com/articles/perl/perl_escape_characters\n// https://perldoc.perl.org/perlrebackslash\nconst needsEscaping = /\\p{C}|[^ \\P{Z}]/gu;\nconst regexEscape = /\\$|@|\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprStr(s) {\n    if (!needsEscaping.test(s)) {\n        return \"'\" + s.replace(\"\\\\\", \"\\\\\\\\\").replace(\"'\", \"\\\\'\") + \"'\";\n    }\n    return ('\"' +\n        s.replace(regexEscape, (c) => {\n            switch (c) {\n                case \"$\":\n                    return \"\\\\$\";\n                case \"@\":\n                    return \"\\\\@\";\n                // Escaping backslashes is optional (unless it's the last character)\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                // New in perl 5.10.0\n                case \"\\v\":\n                    return \"\\\\v\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 2) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            return \"\\\\x{\" + hex + \"}\";\n        }) +\n        '\"');\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            // TODO: put in string?\n            args.push(\"$ENV{\" + t.value + \"}\");\n        }\n        else {\n            // TODO: escape\n            args.push(\"`\" + t.value + \"`\");\n        }\n    }\n    return args.join(\" . \");\n}\nconst hashKeySafe = /^[a-zA-Z]+$/u;\nexport function reprHashKey(w) {\n    if (w.tokens.length === 1 &&\n        typeof w.tokens[0] === \"string\" &&\n        hashKeySafe.test(w.tokens[0])) {\n        return w.tokens[0];\n    }\n    return repr(w);\n}\nexport function _toPerl(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    if (method.isString() &&\n        [\"GET\", \"HEAD\"].includes(methodStr) &&\n        !request.headers.length &&\n        !request.urls[0].auth &&\n        !request.data &&\n        !request.multipartUploads &&\n        !request.insecure &&\n        !request.timeout &&\n        !request.maxRedirects) {\n        let code = \"use LWP::Simple;\\n\";\n        code +=\n            \"$content = \" +\n                methodStr.toLowerCase() +\n                \"(\" +\n                repr(request.urls[0].url) +\n                \");\\n\";\n        return code;\n    }\n    const methods = [\"DELETE\", \"GET\", \"HEAD\", \"PATCH\", \"POST\", \"PUT\"];\n    const helperFunction = method.isString() && methods.includes(methodStr);\n    let code = \"use LWP::UserAgent;\\n\";\n    if (request.urls[0].auth) {\n        code += \"use MIME::Base64;\\n\";\n    }\n    if (!helperFunction) {\n        code += \"require HTTP::Request;\\n\";\n    }\n    if (request.urls[0].uploadFile) {\n        code += \"use File::Slurp;\\n\";\n    }\n    code += \"\\n\";\n    code += \"$ua = LWP::UserAgent->new(\";\n    const uaArgs = [];\n    if (request.insecure) {\n        uaArgs.push(\"ssl_opts => { verify_hostname => 0 }\");\n    }\n    if (request.timeout) {\n        uaArgs.push(\"timeout => \" + request.timeout.toString());\n    }\n    if (request.maxRedirects) {\n        uaArgs.push(\"max_redirect => \" + request.maxRedirects.toString());\n    }\n    if (uaArgs.length > 1) {\n        code += \"\\n    \" + uaArgs.join(\",\\n    \") + \"\\n\";\n    }\n    else {\n        code += uaArgs.join(\", \");\n    }\n    code += \");\\n\";\n    const args = [];\n    if (!helperFunction) {\n        code += \"$request = HTTP::Request->new(\";\n        args.push(repr(method));\n        args.push(repr(request.urls[0].url));\n    }\n    else {\n        code += \"$response = $ua->\" + methodStr.toLowerCase() + \"(\";\n        args.push(repr(request.urls[0].url));\n        if (request.headers.length || request.urls[0].auth) {\n            for (const [k, v] of request.headers) {\n                if (v === null) {\n                    continue;\n                }\n                args.push(reprHashKey(k) + \" => \" + repr(v));\n            }\n            if (request.urls[0].auth) {\n                args.push('Authorization => \"Basic \" . MIME::Base64::encode(' +\n                    repr(mergeWords(request.urls[0].auth[0], \":\", request.urls[0].auth[1])) +\n                    \")\");\n            }\n        }\n        if (request.urls[0].uploadFile) {\n            args.push(\"Content => read_file(\" + repr(request.urls[0].uploadFile) + \")\");\n        }\n        else if (request.multipartUploads) {\n            args.push(\"Content_Type => 'form-data'\");\n            const lines = [];\n            for (const m of request.multipartUploads) {\n                if (\"content\" in m) {\n                    lines.push(reprHashKey(m.name) + \" => \" + repr(m.content));\n                }\n                else if (!(\"filename\" in m)) {\n                    // TODO: use File::Slurp;\n                    lines.push(reprHashKey(m.name) + \" => read_file(\" + repr(m.contentFile) + \")\");\n                }\n                else {\n                    let line = reprHashKey(m.name) + \" => [\" + repr(m.contentFile);\n                    if (m.filename && !eq(m.filename, m.contentFile)) {\n                        line += \", \" + repr(m.filename);\n                    }\n                    lines.push(line + \"]\");\n                }\n            }\n            args.push(\"Content => [\\n        \" + lines.join(\",\\n        \") + \"\\n    ]\");\n        }\n        else if (request.data) {\n            // TODO: parseQueryString\n            args.push(\"Content => \" + repr(request.data));\n        }\n    }\n    if ((!helperFunction && args.length > 2) ||\n        (helperFunction && args.length > 1)) {\n        code += \"\\n    \" + args.join(\",\\n    \") + \"\\n\";\n    }\n    else {\n        code += args.join(\", \");\n    }\n    code += \");\\n\";\n    if (!helperFunction) {\n        code += \"$response = $ua->request($request);\\n\";\n    }\n    return code;\n}\nexport function toPerlWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toPerl(requests, warnings);\n    return [code, warnings];\n}\nexport function toPerl(curlCommand) {\n    return toPerlWarn(curlCommand)[0];\n}\n//# sourceMappingURL=perl.js.map","import { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { eq } from \"../../shell/Word.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { reprStr, repr } from \"./php.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"digest\",\n    \"no-digest\",\n    \"ntlm\",\n    \"no-ntlm\",\n    \"ntlm-wb\",\n    \"no-ntlm-wb\",\n    \"http3\",\n    \"http3-only\",\n    \"http2\",\n    \"http2-prior-knowledge\",\n    \"max-time\",\n    \"connect-timeout\",\n    \"insecure\",\n    \"no-insecure\",\n    \"cacert\",\n    \"capath\",\n    \"cert\",\n    \"key\",\n    \"compressed\", // TODO: check behavior\n    \"no-compressed\",\n    \"location\",\n    \"no-location\",\n    \"proxy\",\n    \"noproxy\",\n]);\nfunction removeTrailingComma(str) {\n    if (str.endsWith(\",\\n\")) {\n        return str.slice(0, -2) + \"\\n\";\n    }\n    return str;\n}\nfunction jsonToPhp(obj, indent = 0) {\n    if (obj === null) {\n        return \"null\";\n    }\n    if (typeof obj === \"boolean\") {\n        return obj ? \"true\" : \"false\";\n    }\n    if (typeof obj === \"number\") {\n        return obj.toString();\n    }\n    if (typeof obj === \"string\") {\n        return reprStr(obj);\n    }\n    if (Array.isArray(obj)) {\n        if (obj.length === 0) {\n            return \"[]\";\n        }\n        let str = \"[\\n\";\n        for (const item of obj) {\n            str += \" \".repeat(indent + 4);\n            str += jsonToPhp(item, indent + 4);\n            str += \",\\n\";\n        }\n        str = removeTrailingComma(str);\n        str += \" \".repeat(indent);\n        str += \"]\";\n        return str;\n    }\n    if (typeof obj === \"object\") {\n        const entries = Object.entries(obj);\n        if (entries.length === 0) {\n            return \"new stdClass()\";\n        }\n        let str = \"[\\n\";\n        for (const [key, value] of entries) {\n            str += \" \".repeat(indent + 4);\n            str += reprStr(key);\n            str += \" => \";\n            str += jsonToPhp(value, indent + 4);\n            str += \",\\n\";\n        }\n        str = removeTrailingComma(str);\n        str += \" \".repeat(indent);\n        str += \"]\";\n        return str;\n    }\n    throw new Error(\"Unknown type\");\n}\nfunction jsonStrToPhp(obj, indent = 0) {\n    const json = JSON.parse(obj);\n    if (json === null) {\n        throw new Error(\"null as a top level JSON object doesn't work\");\n    }\n    const jsonAsPhp = jsonToPhp(json, indent);\n    const roundtrips = JSON.stringify(json) === obj;\n    return [jsonAsPhp, roundtrips];\n}\nexport function _toPhpGuzzle(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const url = request.urls[0].queryDict\n        ? request.urls[0].urlWithoutQueryList\n        : request.urls[0].url;\n    const method = request.urls[0].method;\n    const imports = new Set([\"GuzzleHttp\\\\Client\"]);\n    let guzzleCode = \"$client = new Client();\\n\\n\";\n    guzzleCode += \"$response = $client->\";\n    const methods = [\"GET\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"];\n    if (method.isString() && methods.includes(method.toString())) {\n        guzzleCode += method.toString().toLowerCase() + \"(\";\n    }\n    else {\n        guzzleCode += \"request(\" + repr(method) + \", \";\n    }\n    let options = \"\";\n    if (request.urls[0].queryDict) {\n        options += \"    'query' => [\\n\";\n        for (const [name, value] of request.urls[0].queryDict) {\n            options += `        ${repr(name)} => `;\n            if (Array.isArray(value)) {\n                options += \"[\\n\";\n                for (const v of value) {\n                    options += `            ${repr(v)},\\n`;\n                }\n                options = removeTrailingComma(options);\n                options += \"        ],\\n\";\n            }\n            else {\n                options += `${repr(value)},\\n`;\n            }\n        }\n        options = removeTrailingComma(options);\n        options += \"    ],\\n\";\n    }\n    if (request.headers.length) {\n        const headerReprs = [];\n        for (const [name, value] of request.headers) {\n            if (value === null) {\n                continue;\n            }\n            headerReprs.push([repr(name), repr(value)]);\n        }\n        if (headerReprs.length) {\n            const longestHeader = Math.max(...headerReprs.map((h) => h[0].length));\n            options += \"    'headers' => [\\n\";\n            for (const [name, value] of headerReprs) {\n                options += `        ${name.padEnd(longestHeader)} => ${value},\\n`;\n            }\n            options = removeTrailingComma(options);\n            options += \"    ],\\n\";\n        }\n    }\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        options += `    'auth' => [${repr(user)}, ${repr(password)}`;\n        switch (request.authType) {\n            case \"basic\":\n            case \"none\": // shouldn't happen?\n                break;\n            case \"digest\":\n                options += \", 'digest'\";\n                break;\n            case \"ntlm\":\n            case \"ntlm-wb\":\n                options += \", 'ntlm'\";\n                break;\n            default:\n                warnings.push([\n                    \"unsupported-auth-type\",\n                    \"Guzzle does not support ${request.authType} authentication\",\n                ]);\n                break;\n        }\n        options += \"],\\n\";\n    }\n    // TODO: \\GuzzleHttp\\Cookie\\CookieJar::fromArray\n    if (request.urls[0].uploadFile) {\n        options += `    'body' => Psr7\\\\Utils::tryFopen(${repr(request.urls[0].uploadFile)}, 'r')\\n`;\n        imports.add(\"GuzzleHttp\\\\Psr7\");\n    }\n    else if (request.multipartUploads) {\n        options += \"    'multipart' => [\\n\";\n        for (const m of request.multipartUploads) {\n            options += \"        [\\n\";\n            options += `            'name' => ${repr(m.name)},\\n`;\n            if (\"content\" in m) {\n                options += `            'contents' => ${repr(m.content)},\\n`;\n            }\n            else {\n                if (m.filename && !eq(m.filename, m.contentFile)) {\n                    options += `            'filename' => ${repr(m.filename)},\\n`;\n                }\n                options += `            'contents' => Psr7\\\\Utils::tryFopen(${repr(m.contentFile)}, 'r'),\\n`;\n                imports.add(\"GuzzleHttp\\\\Psr7\");\n                // TODO: set content type from file extension\n            }\n            options = removeTrailingComma(options);\n            options += \"        ],\\n\";\n        }\n        options = removeTrailingComma(options);\n        options += \"    ],\\n\";\n        // TODO: remove some headers?\n    }\n    else if (request.data) {\n        const contentType = request.headers.getContentType();\n        if (contentType === \"application/x-www-form-urlencoded\") {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const [_, queryAsDict] = parseQueryString(request.data);\n            if (queryAsDict) {\n                options += \"    'form_params' => [\\n\";\n                for (const [name, value] of queryAsDict) {\n                    options += `        ${repr(name)} => `;\n                    if (Array.isArray(value)) {\n                        options += \"[\\n\";\n                        for (const v of value) {\n                            options += `            ${repr(v)},\\n`;\n                        }\n                        options = removeTrailingComma(options);\n                        options += \"        ],\\n\";\n                    }\n                    else {\n                        options += `${repr(value)},\\n`;\n                    }\n                }\n                options = removeTrailingComma(options);\n                options += \"    ],\\n\";\n                // TODO: remove some headers?\n            }\n            else {\n                options += `    'body' => ${repr(request.data)},\\n`;\n            }\n        }\n        else if (contentType === \"application/json\" && request.data.isString()) {\n            // TODO: parse JSON into PHP\n            try {\n                const [json, roundtrips] = jsonStrToPhp(request.data.toString(), 4);\n                if (!roundtrips) {\n                    options += `    // 'body' => ${repr(request.data)},\\n`;\n                }\n                options += `    'json' => ${json},\\n`;\n                // TODO: remove some headers?\n            }\n            catch (_a) {\n                options += `    'body' => ${repr(request.data)},\\n`;\n            }\n        }\n        else {\n            options += `    'body' => ${repr(request.data)},\\n`;\n        }\n    }\n    // TODO: put --proxy-user in proxy URL\n    if (request.noproxy) {\n        options += `    'proxy' => [\\n`;\n        if (request.proxy) {\n            options += `        'http' => ${repr(request.proxy)},\\n`;\n            options += `        'https' => ${repr(request.proxy)},\\n`;\n        }\n        const noproxies = request.noproxy.split(\",\").map((s) => s.trim());\n        options += `        'no' => [${noproxies\n            .map((np) => repr(np))\n            .join(\", \")}]\\n`;\n        options += \"    ],\\n\";\n    }\n    else if (request.proxy) {\n        // TODO: is this right for SOCKS proxies?\n        options += `    'proxy' => ${repr(request.proxy)},\\n`;\n    }\n    if (request.timeout) {\n        options += `    'timeout' => ${parseFloat(request.timeout.toString()) || 0},\\n`;\n    }\n    if (request.connectTimeout) {\n        options += `    'connect_timeout' => ${parseFloat(request.connectTimeout.toString()) || 0},\\n`;\n    }\n    if (request.followRedirects === false) {\n        options += \"    'allow_redirects' => false,\\n\";\n    }\n    if (request.insecure) {\n        options += \"    'verify' => false,\\n\";\n    }\n    else if (request.cacert) {\n        options += `    'verify' => ${repr(request.cacert)},\\n`;\n    }\n    else if (request.capath) {\n        options += `    'verify' => ${repr(request.capath)},\\n`;\n    }\n    if (request.cert) {\n        const [cert, password] = request.cert;\n        if (password) {\n            options += `    'cert' => [${repr(cert)}, ${repr(password)}],\\n`;\n        }\n        else {\n            options += `    'cert' => ${repr(cert)},\\n`;\n        }\n    }\n    if (request.key) {\n        options += `    'ssl_key' => ${repr(request.key)},\\n`;\n    }\n    if (request.http3) {\n        options += \"    'http_version' => 3.0,\\n\";\n    }\n    else if (request.http2) {\n        options += \"    'http_version' => 2.0,\\n\";\n    }\n    options = removeTrailingComma(options);\n    guzzleCode += repr(url);\n    if (options) {\n        guzzleCode += \", [\\n\";\n        guzzleCode += options;\n        guzzleCode += \"]\";\n    }\n    guzzleCode += \");\";\n    return (\"<?php\\n\" +\n        \"require 'vendor/autoload.php';\\n\\n\" +\n        Array.from(imports)\n            .sort()\n            .map((i) => \"use \" + i + \";\\n\")\n            .join(\"\") +\n        \"\\n\" +\n        guzzleCode +\n        \"\\n\");\n}\nexport function toPhpGuzzleWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const guzzle = _toPhpGuzzle(requests, warnings);\n    return [guzzle, warnings];\n}\nexport function toPhpGuzzle(curlCommand) {\n    return toPhpGuzzleWarn(curlCommand)[0];\n}\n//# sourceMappingURL=guzzle.js.map","import { eq, joinWords } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"insecure\",\n    \"no-insecure\",\n    \"compressed\",\n    \"no-compressed\",\n    \"digest\",\n    \"no-digest\",\n    \"location\",\n    \"no-location\",\n    // \"location-trusted\",\n    // \"no-location-trusted\",\n    \"form\",\n    \"form-string\",\n    \"proxy\",\n    \"proxy-user\",\n    \"unix-socket\",\n]);\n// https://www.php.net/manual/en/language.types.string.php\n// https://www.php.net/manual/en/language.types.string.php#language.types.string.details\n// https://www.unicode.org/reports/tr44/#GC_Values_Table\n// https://unicode.org/Public/UNIDATA/UnicodeData.txt\n// https://en.wikipedia.org/wiki/Plane_(Unicode)#Overview\nconst regexSingleEscape = /'|\\\\/gu;\nconst regexDoubleEscape = /\"|\\$|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprStr(s) {\n    let [quote, regex] = [\"'\", regexSingleEscape];\n    if ((s.includes(\"'\") && !s.includes('\"')) || /[^\\x20-\\x7E]/.test(s)) {\n        [quote, regex] = ['\"', regexDoubleEscape];\n    }\n    return (quote +\n        s.replace(regex, (c) => {\n            switch (c) {\n                // https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double\n                case \"$\":\n                    return quote === \"'\" ? \"$\" : \"\\\\$\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"'\":\n                case '\"':\n                    return c === quote ? \"\\\\\" + c : c;\n                // The rest of these should not appear in single quotes\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case \"\\x1B\":\n                    return \"\\\\e\";\n                case \"\\f\":\n                    return \"\\\\f\";\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length > 2) {\n                return \"\\\\u{\" + hex + \"}\";\n            }\n            return \"\\\\x\" + hex.padStart(2, \"0\");\n        }) +\n        quote);\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"getenv(\" + reprStr(t.value) + \") ?? \" + reprStr(\"\"));\n        }\n        else if (t.type === \"command\") {\n            // TODO: use backticks instead\n            args.push(\"shell_exec(\" + reprStr(t.value) + \")\");\n        }\n    }\n    return args.join(\" . \");\n}\nexport function _toPhp(requests, warnings = []) {\n    // TODO: only reading one file is supported\n    const request = getFirst(requests, warnings, { dataReadsFile: true });\n    let cookieString;\n    if (request.headers.has(\"cookie\")) {\n        cookieString = request.headers.get(\"cookie\");\n        request.headers.delete(\"cookie\");\n    }\n    let phpCode = \"<?php\\n\";\n    phpCode += \"$ch = curl_init();\\n\";\n    phpCode +=\n        \"curl_setopt($ch, CURLOPT_URL, \" + repr(request.urls[0].url) + \");\\n\";\n    phpCode += \"curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\n\";\n    phpCode +=\n        \"curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \" +\n            repr(request.urls[0].method) +\n            \");\\n\";\n    if (request.compressed) {\n        request.headers.setIfMissing(\"Accept-Encoding\", \"gzip\");\n    }\n    if (request.headers.length) {\n        let headersArrayCode = \"[\\n\";\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                continue;\n            }\n            headersArrayCode +=\n                \"    \" + repr(joinWords([headerName, headerValue], \": \")) + \",\\n\";\n        }\n        headersArrayCode += \"]\";\n        phpCode +=\n            \"curl_setopt($ch, CURLOPT_HTTPHEADER, \" + headersArrayCode + \");\\n\";\n    }\n    if (cookieString) {\n        phpCode +=\n            \"curl_setopt($ch, CURLOPT_COOKIE, \" + repr(cookieString) + \");\\n\";\n    }\n    if (request.urls[0].auth && [\"basic\", \"digest\"].includes(request.authType)) {\n        const authType = request.authType === \"digest\" ? \"CURLAUTH_DIGEST\" : \"CURLAUTH_BASIC\";\n        phpCode += \"curl_setopt($ch, CURLOPT_HTTPAUTH, \" + authType + \");\\n\";\n        phpCode +=\n            \"curl_setopt($ch, CURLOPT_USERPWD, \" +\n                repr(joinWords(request.urls[0].auth, \":\")) +\n                \");\\n\";\n    }\n    if (request.data || request.multipartUploads) {\n        let requestDataCode = \"\";\n        if (request.multipartUploads) {\n            requestDataCode = \"[\\n\";\n            for (const m of request.multipartUploads) {\n                requestDataCode += \"    \" + repr(m.name) + \" => \";\n                if (\"contentFile\" in m) {\n                    requestDataCode += \"new CURLFile(\" + repr(m.contentFile);\n                    if (m.contentType) {\n                        requestDataCode += \", \" + repr(m.contentType);\n                    }\n                    if (m.filename && !eq(m.filename, m.contentFile)) {\n                        if (!m.contentType) {\n                            // This actually sets it to the default, application/octet-stream\n                            requestDataCode += \", null\";\n                        }\n                        requestDataCode += \", \" + repr(m.filename);\n                    }\n                    requestDataCode += \")\";\n                }\n                else {\n                    if (\"filename\" in m && m.filename) {\n                        requestDataCode += \"new CURLStringFile(\" + repr(m.content);\n                        requestDataCode += \", \" + repr(m.filename);\n                        if (m.contentType) {\n                            requestDataCode += \", \" + repr(m.contentType);\n                        }\n                        requestDataCode += \")\";\n                    }\n                    else {\n                        requestDataCode += repr(m.content);\n                    }\n                }\n                requestDataCode += \",\\n\";\n            }\n            requestDataCode += \"]\";\n        }\n        else if (request.isDataBinary && request.data.charAt(0) === \"@\") {\n            // TODO: do this properly with .dataArray\n            requestDataCode =\n                \"file_get_contents(\" + repr(request.data.slice(1)) + \")\";\n        }\n        else {\n            requestDataCode = repr(request.data);\n        }\n        phpCode +=\n            \"curl_setopt($ch, CURLOPT_POSTFIELDS, \" + requestDataCode + \");\\n\";\n    }\n    if (request.proxy) {\n        phpCode +=\n            \"curl_setopt($ch, CURLOPT_PROXY, \" + repr(request.proxy) + \");\\n\";\n        if (request.proxyAuth) {\n            phpCode +=\n                \"curl_setopt($ch, CURLOPT_PROXYUSERPWD, \" +\n                    repr(request.proxyAuth) +\n                    \");\\n\";\n        }\n    }\n    if (request.timeout) {\n        phpCode +=\n            \"curl_setopt($ch, CURLOPT_TIMEOUT, \" +\n                (parseInt(request.timeout.toString(), 10) || 0) +\n                \");\\n\";\n    }\n    if (request.unixSocket) {\n        phpCode +=\n            \"curl_setopt($ch, CURLOPT_UNIX_SOCKET_PATH, \" +\n                repr(request.unixSocket) +\n                \");\\n\";\n    }\n    if (request.followRedirects) {\n        phpCode += \"curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\\n\";\n    }\n    if (request.insecure) {\n        phpCode += \"curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\\n\";\n        phpCode += \"curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\\n\";\n    }\n    phpCode += \"\\n$response = curl_exec($ch);\\n\\n\";\n    phpCode += \"curl_close($ch);\\n\";\n    return phpCode;\n}\nexport function toPhpWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const php = _toPhp(requests, warnings);\n    return [php, warnings];\n}\nexport function toPhp(curlCommand) {\n    return toPhpWarn(curlCommand)[0];\n}\n//# sourceMappingURL=php.js.map","import { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { repr } from \"./php.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    // \"form\",\n    // \"form-string\",\n]);\nexport function _toPhpRequests(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    let headerString;\n    if (request.headers.length) {\n        headerString = \"$headers = array(\\n\";\n        let i = 0;\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                continue; // TODO: this could miss not adding a trailing comma\n            }\n            headerString += \"    \" + repr(headerName) + \" => \" + repr(headerValue);\n            if (i < request.headers.length - 1) {\n                headerString += \",\\n\";\n            }\n            i++;\n        }\n        headerString += \"\\n);\";\n    }\n    else {\n        headerString = \"$headers = array();\";\n    }\n    let optionsString;\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        optionsString =\n            \"$options = array('auth' => array(\" +\n                repr(user) +\n                \", \" +\n                repr(password) +\n                \"));\";\n    }\n    let dataString;\n    if (request.data) {\n        const [parsedQueryString] = parseQueryString(request.data);\n        dataString = \"$data = array(\\n\";\n        if (!parsedQueryString || !parsedQueryString.length) {\n            dataString = \"$data = \" + repr(request.data) + \";\";\n        }\n        else {\n            const terms = [];\n            for (const q of parsedQueryString) {\n                const [key, value] = q;\n                terms.push(\"    \" + repr(key) + \" => \" + repr(value));\n            }\n            dataString += terms.join(\",\\n\") + \"\\n);\";\n        }\n    }\n    let requestLine = \"$response = Requests::\" +\n        request.urls[0].method.toLowerCase().toString() +\n        \"(\" +\n        repr(request.urls[0].url);\n    requestLine += \", $headers\";\n    if (dataString) {\n        requestLine += \", $data\";\n    }\n    if (optionsString) {\n        requestLine += \", $options\";\n    }\n    requestLine += \");\";\n    let phpCode = \"<?php\\n\";\n    phpCode += \"include('vendor/rmccue/requests/library/Requests.php');\\n\";\n    phpCode += \"Requests::register_autoloader();\\n\";\n    phpCode += headerString + \"\\n\";\n    if (dataString) {\n        phpCode += dataString + \"\\n\";\n    }\n    if (optionsString) {\n        phpCode += optionsString + \"\\n\";\n    }\n    phpCode += requestLine;\n    return phpCode + \"\\n\";\n}\nexport function toPhpRequestsWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const php = _toPhpRequests(requests, warnings);\n    return [php, warnings];\n}\nexport function toPhpRequests(curlCommand) {\n    return toPhpRequestsWarn(curlCommand)[0];\n}\n//# sourceMappingURL=requests.js.map","import { parse, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nimport { warnIfPartsIgnored } from \"../Warnings.js\";\nimport { Word, eq } from \"../shell/Word.js\";\nimport { parseQueryString } from \"../Query.js\";\n// https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules\n// https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_special_characters\n// https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-string-substitutions\nconst unprintableChars = /\\p{C}|[^ \\P{Z}]/gu;\nconst regexDoubleEscape = /\\$|`|\"|\\p{C}|[^ \\P{Z}]/gu;\nexport function escapeStr(s, quote) {\n    if (quote === '\"') {\n        return s.replace(regexDoubleEscape, (c) => {\n            switch (c) {\n                case \"\\x00\":\n                    return \"`0\";\n                case \"\\x07\":\n                    return \"`a\";\n                case \"\\b\":\n                    return \"`b\";\n                case \"\\x1B\":\n                    return \"`e\";\n                case \"\\f\":\n                    return \"`f\";\n                case \"\\n\":\n                    return \"`n\";\n                case \"\\r\":\n                    return \"`r\";\n                case \"\\t\":\n                    return \"`t\";\n                case \"\\v\":\n                    return \"`v\";\n                case \"$\":\n                    return \"`$\";\n                case \"`\":\n                    return \"``\";\n                case '\"':\n                    return '`\"'; // also '\"\"'\n            }\n            const hex = c.codePointAt(0).toString(16);\n            return \"`u{\" + hex + \"}\";\n        });\n    }\n    return s.replace(\"'\", \"''\");\n}\nexport function repr(w) {\n    let quote = '\"';\n    if (w.tokens.length === 1 &&\n        typeof w.tokens[0] === \"string\" &&\n        !unprintableChars.test(w.tokens[0]) &&\n        w.tokens[0].includes(\"'\") &&\n        !w.tokens[0].includes('\"')) {\n        quote = \"'\";\n    }\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(escapeStr(t, quote));\n        }\n        else if (t.type === \"variable\") {\n            // TODO: this will lead to syntax errors\n            args.push(t.text);\n        }\n        else {\n            // TODO: this will lead to syntax errors\n            if (t.text.startsWith(\"$(\") && t.text.endsWith(\")\")) {\n                args.push(t.text);\n            }\n            else {\n                args.push(\"$(\" + t.text + \")\");\n            }\n        }\n    }\n    if (w.tokens.length === 1 && typeof w.tokens[0] !== \"string\") {\n        return args.join(\"\");\n    }\n    return quote + args.join(\"\") + quote;\n}\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"upload-file\",\n    \"output\",\n    \"location\",\n    \"location-trusted\",\n    \"max-redirs\",\n    \"proxy\",\n    \"insecure\",\n    \"max-time\",\n    \"keepalive\",\n    \"http2\",\n    \"http3\",\n]);\nfunction requestToPowershell(request, url, restMethod, warnings) {\n    let code = \"\";\n    const command = restMethod ? \"Invoke-RestMethod\" : \"Invoke-WebRequest\";\n    const args = [];\n    const method = url.method;\n    const methodStr = url.method.toString();\n    if (url.queryList &&\n        url.queryDict &&\n        url.queryDict.every((q) => !Array.isArray(q[1])) &&\n        method.isString() &&\n        methodStr === \"GET\" &&\n        !(url.uploadFile || request.data || request.multipartUploads)) {\n        code += \"$body = @{\\n\";\n        for (const [name, value] of url.queryList) {\n            // TODO: repeated keys\n            // TODO: values require escaping\n            code += \"    \" + repr(name) + \" = \" + repr(value) + \"\\n\";\n        }\n        code += \"}\\n\";\n        args.push([\"-Uri\", repr(url.urlWithoutQueryList)]);\n        args.push([\"-Body\", \"$body\"]);\n        warnings.push([\n            \"data-get\",\n            \"the -Body will be sent in the URL as a query string\",\n        ]);\n    }\n    else {\n        args.push([\"-Uri\", repr(url.url)]);\n    }\n    const methods = {\n        DEFAULT: \"Default\",\n        DELETE: \"Delete\",\n        GET: \"Get\",\n        HEAD: \"Head\",\n        MERGE: \"Merge\",\n        OPTIONS: \"Options\",\n        PATCH: \"Patch\",\n        POST: \"Post\",\n        PUT: \"Put\",\n        TRACE: \"Trace\",\n    };\n    if (url.method.isString() && methodStr === \"GET\") {\n        // the default\n    }\n    else if (url.method.isString() && methodStr in methods) {\n        args.push([\"-Method\", methods[methodStr]]);\n    }\n    else {\n        args.push([\"-CustomMethod\", repr(method)]);\n    }\n    if (request.cookies) {\n        code +=\n            \"$session = New-Object Microsoft.PowerShell.Commands.WebRequestSession\\n\";\n        for (const [name, value] of request.cookies) {\n            code += \"$cookie = New-Object System.Net.Cookie\\n\";\n            code += \"$cookie.Name = \" + repr(name) + \"\\n\";\n            code += \"$cookie.Value = \" + repr(value) + \"\\n\";\n            // TODO: if host contains a port, it won't send cookies\n            code += \"$cookie.Domain = \" + repr(url.urlObj.host) + \"\\n\";\n            code += \"$session.Cookies.Add($cookie)\\n\";\n        }\n        args.push([\"-WebSession\", \"$session\"]);\n        request.headers.delete(\"Cookie\");\n    }\n    const headerArgs = [];\n    const headerLines = [];\n    for (const [headerName, headerValue] of request.headers) {\n        if (headerValue === null) {\n            continue;\n        }\n        if (headerName.toLowerCase().toString() === \"content-type\") {\n            headerArgs.push([\"-ContentType\", repr(headerValue)]);\n        }\n        else if (headerName.toLowerCase().toString() === \"user-agent\") {\n            headerArgs.push([\"-UserAgent\", repr(headerValue)]);\n        }\n        else {\n            // TODO: check value and pass -SkipHeaderValidation if necessary\n            headerLines.push(repr(headerName) + \" = \" + repr(headerValue));\n        }\n    }\n    if (url.auth) {\n        const [username, password] = url.auth;\n        code += \"$username = \" + repr(username) + \"\\n\";\n        code +=\n            \"$password = ConvertTo-SecureString \" +\n                repr(password) +\n                \" -AsPlainText -Force\\n\";\n        code +=\n            \"$credential = New-Object System.Management.Automation.PSCredential($username, $password)\\n\";\n        args.push([\"-Credential\", \"$credential\"]);\n        args.push([\"-Authentication\", \"Basic\"]);\n        // TODO: mostly to make compare_requests.ts work\n        if (url.urlObj.scheme.toString() === \"http\") {\n            args.push([\"-AllowUnencryptedAuthentication\"]);\n        }\n    }\n    if (headerLines.length) {\n        code += \"$headers = @{\\n\";\n        code += \"    \" + headerLines.join(\"\\n    \") + \"\\n\";\n        code += \"}\\n\";\n        args.push([\"-Headers\", \"$headers\"]);\n    }\n    args.push(...headerArgs);\n    if (url.uploadFile) {\n        if (eq(url.uploadFile, \"-\") || eq(url.uploadFile, \".\")) {\n            // warnings.push([\n            //   \"upload-stdin\",\n            //   \"pass in the file contents through stdin\",\n            // ]);\n        }\n        args.push([\"-InFile\", repr(url.uploadFile)]);\n    }\n    else if (request.multipartUploads) {\n        code += \"$form = @{\\n\";\n        for (const m of request.multipartUploads) {\n            if (\"content\" in m) {\n                code += \"    \" + repr(m.name) + \" = \" + repr(m.content) + \"\\n\";\n            }\n            else {\n                if (\"filename\" in m && m.filename && !eq(m.filename, m.contentFile)) {\n                    warnings.push([\n                        \"powershell-multipart-fake-filename\",\n                        \"PowerShell doesn't support multipart uploads that read a certain filename but send a different filename\",\n                    ]);\n                }\n                code +=\n                    \"    \" + repr(m.name) + \" = Get-Item \" + repr(m.contentFile) + \"\\n\";\n            }\n        }\n        code += \"}\\n\";\n        args.push([\"-Form\", \"$form\"]);\n    }\n    else if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        args.push([\"-InFile\", repr(request.dataArray[0].filename)]);\n    }\n    else if (request.data) {\n        const contentType = request.headers.getContentType();\n        if (contentType === \"application/x-www-form-urlencoded\") {\n            let queryList, queryDict;\n            try {\n                [queryList, queryDict] = parseQueryString(request.data);\n            }\n            catch (_a) { }\n            if (queryList &&\n                queryDict &&\n                queryDict.every((q) => !Array.isArray(q[1]))) {\n                code += \"$body = @{\\n\";\n                for (const [name, value] of queryList) {\n                    // TODO: repeated keys\n                    // TODO: values require escaping\n                    code += \"    \" + repr(name) + \" = \" + repr(value) + \"\\n\";\n                }\n                code += \"}\\n\";\n                args.push([\"-Body\", \"$body\"]);\n            }\n            else {\n                args.push([\"-Body\", repr(request.data)]);\n                if (methodStr === \"POST\" && request.data.includes(\"=\")) {\n                    warnings.push([\n                        \"post-string\",\n                        \"all -Body text after the first '=' will be escaped\",\n                    ]);\n                }\n            }\n        }\n        else {\n            // TODO: values require escaping\n            args.push([\"-Body\", repr(request.data)]);\n            if (methodStr === \"POST\" && request.data.includes(\"=\")) {\n                warnings.push([\n                    \"post-string\",\n                    \"all -Body text after the first '=' will be escaped\",\n                ]);\n            }\n        }\n        if (methodStr === \"GET\") {\n            warnings.push([\n                \"data-get\",\n                \"the -Body will be sent in the URL as a query string\",\n            ]);\n        }\n    }\n    if (request.followRedirects === false) {\n        args.push([\"-MaximumRedirection\", \"0\"]);\n    }\n    else if (request.maxRedirects && request.maxRedirects.toString() !== \"5\") {\n        // TODO: escape/parse?\n        args.push([\"-MaximumRedirection\", request.maxRedirects.toString()]);\n    }\n    if (request.followRedirectsTrusted) {\n        args.push([\"-PreserveAuthorizationOnRedirect\"]);\n    }\n    if (request.proxy) {\n        args.push([\"-Proxy\", repr(request.proxy)]);\n    }\n    if (request.proxyAuth) {\n        // TODO: -ProxyCredential\n    }\n    if (request.noproxy) {\n        // TODO: these are different\n        // args.push([\"-NoProxy\"])\n    }\n    if (request.insecure) {\n        args.push([\"-SkipCertificateCheck\"]);\n    }\n    if (request.timeout) {\n        args.push([\"-TimeoutSec\", request.timeout.toString()]);\n    }\n    if (request.keepAlive === false) {\n        args.push([\"-DisableKeepAlive\"]);\n    }\n    if (request.http2) {\n        args.push([\"-HttpVersion\", \"2.0\"]);\n    }\n    else if (request.http3) {\n        args.push([\"-HttpVersion\", \"3.0\"]);\n    }\n    if (url.output) {\n        args.push([\"-OutFile\", repr(url.output)]);\n    }\n    const multiline = args.length > 3 || args.reduce((a, b) => a + b.length, 0) > 80 - 5;\n    const joiner = multiline ? \" `\\n    \" : \" \";\n    return (code +\n        \"$response = \" +\n        command +\n        \" \" +\n        args.map((a) => a.join(\" \")).join(joiner) +\n        \"\\n\");\n}\nfunction toPowershell(requests, restMethod = true, warnings = []) {\n    const commands = [];\n    for (const request of requests) {\n        warnIfPartsIgnored(request, warnings, {\n            dataReadsFile: true,\n            // cookieFiles: true,\n            multipleUrls: true,\n        });\n        if (request.dataReadsFile &&\n            request.dataArray &&\n            request.dataArray.length &&\n            (request.dataArray.length > 1 ||\n                (!(request.dataArray[0] instanceof Word) && request.dataArray[0].name))) {\n            warnings.push([\n                \"unsafe-data\",\n                \"the generated data content is wrong, \" +\n                    // TODO: might not come from \"@\"\n                    JSON.stringify(\"@\" + request.dataReadsFile) +\n                    \" means read the file \" +\n                    JSON.stringify(request.dataReadsFile),\n            ]);\n        }\n        for (const url of request.urls) {\n            commands.push(requestToPowershell(request, url, restMethod, warnings));\n        }\n    }\n    return commands.join(\"\\n\\n\");\n}\nexport function _toPowershellWebRequest(requests, warnings = []) {\n    return toPowershell(requests, false, warnings);\n}\nexport function toPowershellWebRequestWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toPowershellWebRequest(requests, warnings);\n    return [code, warnings];\n}\nexport function toPowershellWebRequest(curlCommand) {\n    return toPowershellWebRequestWarn(curlCommand)[0];\n}\nexport function _toPowershellRestMethod(requests, warnings = []) {\n    return toPowershell(requests, true, warnings);\n}\nexport function toPowershellRestMethodWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toPowershellRestMethod(requests, warnings);\n    return [code, warnings];\n}\nexport function toPowershellRestMethod(curlCommand) {\n    return toPowershellWebRequestWarn(curlCommand)[0];\n}\n//# sourceMappingURL=powershell.js.map","import { Word, eq, mergeWords } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { repr, asFloat, printImports, formatHeaders, formatDataAsJson, } from \"./python.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"max-time\",\n    \"insecure\",\n    \"no-insecure\",\n    \"upload-file\",\n]);\nexport function _toPythonHttp(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const osVars = {};\n    const imports = new Set();\n    let code = \"\";\n    if (eq(request.urls[0].urlObj.scheme, \"https\")) {\n        code += \"conn = http.client.HTTPSConnection(\";\n    }\n    else {\n        code += \"conn = http.client.HTTPConnection(\";\n    }\n    const classArgs = [repr(request.urls[0].urlObj.host, osVars, imports)];\n    if (request.urls[0].urlObj.port) {\n        // TODO\n        // args.push(asInt(request.urls[0].urlObj.port, osVars, imports));\n    }\n    if (request.timeout) {\n        classArgs.push(`timeout=${asFloat(request.timeout, osVars, imports)}`);\n    }\n    if (request.insecure && eq(request.urls[0].urlObj.scheme, \"https\")) {\n        classArgs.push(\"context=ssl._create_unverified_context()\");\n        imports.add(\"ssl\");\n    }\n    let joinedClassArgs = classArgs.join(\", \");\n    if (joinedClassArgs.length > 80) {\n        joinedClassArgs = \"\\n    \" + classArgs.join(\",\\n    \") + \"\\n\";\n    }\n    code += joinedClassArgs + \")\\n\";\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        if (request.authType === \"basic\") {\n            // TODO: generate Python code that does the encoding\n            const authHeader = \"Basic \" + btoa(`${user.toString()}:${password.toString()}`);\n            request.headers.setIfMissing(\"Authorization\", authHeader);\n            imports.add(\"\");\n        }\n    }\n    if (request.headers.length) {\n        // TODO: commentedOutHeaders\n        // TODO: inconsistent trailing comma\n        code += formatHeaders(request.headers, {}, osVars, imports);\n    }\n    let dataAsJson, jsonRoundtrips;\n    const contentType = request.headers.get(\"content-type\");\n    const isJson = request.dataArray &&\n        request.dataArray.length === 1 &&\n        contentType &&\n        contentType.split(\";\")[0].toString().trim() === \"application/json\";\n    if (isJson && request.dataArray) {\n        [dataAsJson, jsonRoundtrips] = formatDataAsJson(request.dataArray[0], imports, osVars);\n    }\n    if (dataAsJson) {\n        code += dataAsJson;\n    }\n    code += \"conn.request(\";\n    const args = [\n        repr(request.urls[0].method, osVars, imports),\n        repr(mergeWords(request.urls[0].urlObj.path, request.urls[0].urlObj.query), osVars, imports),\n    ];\n    if (dataAsJson) {\n        args.push(\"json.dumps(json_data)\");\n        if (!jsonRoundtrips && request.data) {\n            args.push(\"# \" + repr(request.data, osVars, imports));\n        }\n        imports.add(\"json\");\n    }\n    else if (request.urls[0].uploadFile) {\n        if (eq(request.urls[0].uploadFile, \"-\") ||\n            eq(request.urls[0].uploadFile, \".\")) {\n            args.push(\"sys.stdin.buffer\"); // TODO\n            // args.push(\"sys.stdin.buffer.read()\"); // TODO: read() necessary?\n            imports.add(\"sys\");\n        }\n        else {\n            args.push(\"open(\" +\n                repr(request.urls[0].uploadFile, osVars, imports, false, true) +\n                \", 'rb')\");\n        }\n    }\n    else if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        args.push(\"open(\" +\n            repr(request.dataArray[0].filename, osVars, imports, false, true) +\n            \", 'rb')\");\n    }\n    else if (request.data) {\n        args.push(repr(request.data, osVars, imports));\n    }\n    if (request.headers.length) {\n        if (args.length === 2) {\n            args.push(\"headers=headers\");\n        }\n        else {\n            args.push(\"headers\");\n        }\n    }\n    let joinedArgs = args.join(\", \");\n    if (joinedArgs.length > 80) {\n        joinedArgs = \"\\n    \" + args.join(\",\\n    \") + \"\\n\";\n    }\n    code += joinedArgs + \")\\n\";\n    code += \"response = conn.getresponse()\\n\";\n    let importCode = \"import http.client\\n\";\n    importCode += printImports(imports);\n    importCode += \"\\n\";\n    return importCode + code;\n}\nexport function toPythonHttpWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toPythonHttp(requests, warnings);\n    return [code, warnings];\n}\nexport function toPythonHttp(curlCommand) {\n    return toPythonHttpWarn(curlCommand)[0];\n}\n//# sourceMappingURL=http.js.map","import { CCError, has, UTF8encoder } from \"../../utils.js\";\nimport { Word, eq } from \"../../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { wordDecodeURIComponent, percentEncode } from \"../../Query.js\";\nimport { parse as jsonParseLossless, stringify as jsonStringifyLossless, isSafeNumber, isInteger, isLosslessNumber, } from \"lossless-json\";\n// TODO: partiallySupportedArgs\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"compressed\",\n    // \"no-compressed\",\n    // \"anyauth\",\n    // \"no-anyauth\",\n    \"digest\",\n    \"no-digest\",\n    \"aws-sigv4\",\n    \"negotiate\",\n    \"no-negotiate\",\n    \"delegation\", // GSS/kerberos\n    // \"service-name\", // GSS/kerberos, not supported\n    \"ntlm\",\n    \"no-ntlm\",\n    \"ntlm-wb\",\n    \"no-ntlm-wb\",\n    \"http1.1\",\n    // These are not supported, just better warning message\n    \"http2\",\n    \"http2-prior-knowledge\",\n    \"http3\",\n    \"http3-only\",\n    \"cookie-jar\",\n    \"cert\",\n    \"cacert\",\n    \"key\",\n    \"capath\",\n    \"form\",\n    \"form-string\",\n    \"location\",\n    \"no-location\",\n    \"location-trusted\", // not exactly supported, just better warning message\n    \"no-location-trusted\",\n    \"max-redirs\",\n    \"max-time\",\n    \"connect-timeout\",\n    \"insecure\",\n    \"no-insecure\",\n    \"output\",\n    \"upload-file\",\n    \"next\",\n    \"proxy\",\n    \"proxy-user\",\n]);\n// https://peps.python.org/pep-3138/\n// https://www.unicode.org/reports/tr44/#GC_Values_Table\n// https://unicode.org/Public/UNIDATA/UnicodeData.txt\n// https://en.wikipedia.org/wiki/Plane_(Unicode)#Overview\nconst regexSingleEscape = /'|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nconst regexDoubleEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\n// Also used for Go and R\nexport function reprStr(s, quote) {\n    if (quote === undefined) {\n        quote = \"'\";\n        if (s.includes(\"'\") && !s.includes('\"')) {\n            quote = '\"';\n        }\n    }\n    const regex = quote === \"'\" ? regexSingleEscape : regexDoubleEscape;\n    return (quote +\n        s.replace(regex, (c) => {\n            switch (c) {\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"'\":\n                    return \"\\\\'\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 2) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            if (hex.length <= 4) {\n                return \"\\\\u\" + hex.padStart(4, \"0\");\n            }\n            return \"\\\\U\" + hex.padStart(8, \"0\");\n        }) +\n        quote);\n}\n// TODO: use this if string contains unmatched surrogates?\n// It just replaces them with the replacement character, but at least that code would run.\nexport function pybescComplex(s) {\n    let quote = \"'\";\n    if (s.includes(\"'\") && !s.includes('\"')) {\n        quote = '\"';\n    }\n    const quoteCode = quote.charCodeAt(0);\n    // TODO: using UTF-8 here is overly simplistic and how to encode here\n    // is a pretty complicated decision.\n    // For starters, it would be more correct to use the same encoding as\n    // the terminal when running from the command line.\n    const bytes = UTF8encoder.encode(s);\n    return (\"b\" +\n        quote +\n        [...bytes]\n            .map((c) => {\n            switch (c) {\n                case 0x07:\n                    return \"\\\\a\";\n                case 0x08:\n                    return \"\\\\b\";\n                case 0x0c:\n                    return \"\\\\f\";\n                case 0x0a:\n                    return \"\\\\n\";\n                case 0x0d:\n                    return \"\\\\r\";\n                case 0x09:\n                    return \"\\\\t\";\n                case 0x0b:\n                    return \"\\\\v\";\n                case 0x5c:\n                    return \"\\\\\\\\\";\n                case quoteCode:\n                    return \"\\\\\" + String.fromCharCode(c);\n            }\n            if (c >= 0x20 && c < 0x7f) {\n                return String.fromCharCode(c);\n            }\n            const hex = c.toString(16);\n            return \"\\\\x\" + hex.padStart(2, \"0\");\n        })\n            .join(\"\") +\n        quote);\n}\nexport function reprStrBinary(s) {\n    const sEsc = reprStr(s);\n    // We check until 0x7F instead of 0xFF because curl (running in a UTF-8 terminal) when it gets\n    // bytes sends them as is, but if we pass b'\\x80' to Requests, it will encode that byte as\n    // Latin-1 (presumably for backwards compatibility) instead of UTF-8.\n    if (/^[\\x00-\\x7f]*$/.test(s)) {\n        return \"b\" + sEsc;\n    }\n    // TODO: unmatched surrogates will generate code that throws an error\n    // e.g.: '\\uDC00'.encode()\n    return sEsc + \".encode()\";\n}\nexport function repr(word, osVars, imports, binary = false, \n// os.getenv('MYVAR') returns None if MYVAR is not set\n// os.getenv('MYVAR', '') returns '' if MYVAR is not set but it's a bit more verbose,\n// so setting errorOk to true will use the shorter version\nerrorOk = false) {\n    const reprFn = binary ? reprStrBinary : reprStr;\n    const reprs = [];\n    for (const t of word.tokens) {\n        if (typeof t === \"string\") {\n            reprs.push(reprFn(t));\n        }\n        else if (t.type === \"variable\") {\n            // TODO: getenvb() is not available on Windows\n            const fn = binary ? \"os.getenvb\" : \"os.getenv\";\n            let getEnvCall = fn + \"(\" + reprFn(t.value);\n            if (!errorOk || word.tokens.length > 1) {\n                getEnvCall += \", \" + reprFn(\"\");\n            }\n            getEnvCall += \")\";\n            reprs.push(getEnvCall);\n            // TODO: if the result of a repr() is discarded, this adds an unused import\n            imports.add(\"os\");\n        }\n        else if (t.type === \"command\") {\n            // TODO: warn that shell=True is a bad idea\n            // or properly parse the subcommand and render it as an array\n            let subprocessCall = \"subprocess.run(\" +\n                reprStr(t.value) +\n                \", shell=True, capture_output=True\";\n            if (!binary) {\n                subprocessCall += \", text=True\";\n            }\n            subprocessCall += \").stdout\";\n            // TODO: generate a descriptive command name with ChatGPT\n            // TODO: if there's only one command, name the variable \"command\" instead of \"command1\"\n            let i = 1;\n            let pyVar = \"command\" + i;\n            // We need to check because we often try to represent the same\n            // token twice and discard one of the attempts.\n            // This is linear time but hopefully there's not that many subcommands.\n            while (pyVar in osVars && osVars[pyVar] !== subprocessCall) {\n                i++;\n                pyVar = \"command\" + i;\n                if (i > Number.MAX_SAFE_INTEGER) {\n                    throw new CCError(\"lol\");\n                }\n            }\n            osVars[pyVar] = subprocessCall;\n            reprs.push(pyVar);\n            // TODO: if the result of a repr() is discarded, this adds an unused import\n            imports.add(\"subprocess\");\n        }\n    }\n    return reprs.join(\" + \");\n}\nfunction reprb(word, osVars, imports) {\n    return repr(word, osVars, imports, true);\n}\nexport function asFloat(word, osVars, imports) {\n    if (word.isString()) {\n        // TODO: check it's actually a valid float\n        return word.toString();\n    }\n    return \"float(\" + repr(word, osVars, imports, false, true) + \")\";\n}\nexport function asInt(word, osVars, imports) {\n    if (word.isString()) {\n        // TODO: check it's actually a valid int\n        return word.toString();\n    }\n    return \"int(\" + repr(word, osVars, imports, false, true) + \")\";\n}\n// Port of Python's json.dumps() with its default options, which is what Requests uses\n// https://github.com/psf/requests/blob/b0e025ade7ed30ed53ab61f542779af7e024932e/requests/models.py#L473\n// It's different from JSON.stringify(). Namely, it adds spaces after ',' and ':'\n// and all non-ASCII characters in strings are escaped:\n// > JSON.stringify('\\xFF')\n// '\"ÿ\"'\n// >>> json.dumps('\\xFF')\n// '\"\\\\u00ff\"'\nconst pythonJsonEscape = /\"|\\\\|[^\\x20-\\x7E]/g;\nfunction jsonRepr(s) {\n    return ('\"' +\n        s.replace(pythonJsonEscape, (c) => {\n            // https://tc39.es/ecma262/#table-json-single-character-escapes\n            switch (c) {\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            const hex = c.charCodeAt(0).toString(16);\n            return \"\\\\u\" + hex.padStart(4, \"0\");\n        }) +\n        '\"');\n}\nfunction ensure_minimum_exponent_length(n) {\n    // If there's only 1 exponent digit, add a leading 0 to it\n    // ensure_minimum_exponent_length('1e-7') => '1e-07'\n    const [mantissa, exponent] = n.split(\"e\");\n    const exponentSign = exponent[0];\n    const exponentValue = exponent.slice(1);\n    if (exponentValue.length === 1) {\n        return mantissa + \"e\" + exponentSign + \"0\" + exponentValue;\n    }\n    return n;\n}\nfunction floatAsPython(value) {\n    // JSON.stringify() and lossless-json's stringify() don't stringify floats like Python.\n    // Notably, JavaScript doesn't add a trailing '.0' to floats that are integers but Python does\n    // JSON.stringify(10.0) => '10'\n    // str(10.0)            => '10.0'\n    //\n    // Python adds a leading 0 to exponent notation numbers with 1 exponent digit\n    // JSON.stringify(1e-7) => '1e-7'\n    //            str(1e-7) => '1e-07'\n    //\n    // Finally, Python will switch to scientific notation if the number has more than\n    // 17 digits not in scientific notation.\n    //\n    // Python's float formatting starts here:\n    // https://github.com/python/cpython/blob/bdc93b8a3563b4a3adb25fa902c0c879ccf427f6/Python/pystrtod.c#L915-L918\n    // and is ultimately this code:\n    // snprintf(buf, buf_size, \"%.17g\", val)\n    // change_decimal_from_locale_to_dot(buffer); // not important\n    // ensure_minimum_exponent_length(buffer, buf_size);\n    // ensure_decimal_point(buffer, buf_size, 17); // can switch to exponent notation\n    //\n    // And JavaScript's formatting is specified here:\n    // https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-numeric-types-number-tostring\n    let asJsStr = value.toString();\n    if (asJsStr.includes(\"e\")) {\n        asJsStr = ensure_minimum_exponent_length(asJsStr);\n    }\n    else {\n        if (isInteger(asJsStr)) {\n            asJsStr += \".0\";\n        }\n        // If there's more than 17 digits of precision, switch to scientific notation\n        const significantDigits = asJsStr\n            .replace(/^-/, \"\")\n            .replace(\".\", \"\")\n            .replace(/^0+/, \"\");\n        const asExponential = ensure_minimum_exponent_length(value.toExponential());\n        if (significantDigits.length > 17 ||\n            (asExponential.length < asJsStr.length &&\n                asJsStr.split(\".\")[1].length > 4)) {\n            asJsStr = asExponential;\n        }\n    }\n    return asJsStr;\n}\nfunction jsonDumps(obj) {\n    if (isLosslessNumber(obj)) {\n        const numAsStr = jsonStringifyLossless(obj);\n        if (isInteger(numAsStr)) {\n            return numAsStr;\n        }\n        if (!isSafeNumber(numAsStr)) {\n            throw new CCError(\"float unrepresentable in Python: \" + numAsStr);\n        }\n        // Can't be bigint because it's !isInteger and isSafeNumber\n        return floatAsPython(obj.valueOf());\n    }\n    switch (typeof obj) {\n        case \"string\":\n            return jsonRepr(obj);\n        case \"number\":\n            // If the number in the JSON file is very large, it'll turn into Infinity\n            if (!isFinite(obj)) {\n                throw new CCError(\"found Infitiny in JSON\");\n            }\n            // TODO: If the number in the JSON file is too big for JavaScript, we will lose information\n            // TODO: JavaScript and Python serialize floats differently.\n            // JSON.stringify(2e2) => 200\n            // json.dumps(2e2)     => 200.0\n            return obj.toString();\n        case \"boolean\":\n            return obj.toString();\n        case \"object\":\n            if (obj === null) {\n                return \"null\";\n            }\n            if (Array.isArray(obj)) {\n                return \"[\" + obj.map(jsonDumps).join(\", \") + \"]\";\n            }\n            return (\"{\" +\n                Object.entries(obj)\n                    .map((e) => jsonRepr(e[0]) + \": \" + jsonDumps(e[1]))\n                    .join(\", \") +\n                \"}\");\n        default:\n            throw new CCError(\"unexpected object type that shouldn't appear in JSON: \" + typeof obj);\n    }\n}\nfunction objToPython(obj, indent = 0) {\n    if (isLosslessNumber(obj)) {\n        const numAsStr = jsonStringifyLossless(obj);\n        // If the number is a large float, it might not be representable in Python\n        // Both JavaScript and Python use f64 so we check if the float\n        // is representable in JavaScript.\n        if (!isInteger(numAsStr) && !isSafeNumber(numAsStr)) {\n            throw new CCError(\"float unrepresentable in Python: \" + numAsStr);\n        }\n        // Displaying floats as they will be serialized in Python would help users\n        // understand why they're getting the \"JSON won't be serialized as it was originally\"\n        // message, but I think displaying them as they appear in the JSON is likely\n        // to be more convenient if you need to edit the value.\n        return numAsStr;\n    }\n    switch (typeof obj) {\n        case \"string\":\n            return reprStr(obj);\n        case \"number\":\n            // TODO: there are differences in number serialization between Python and JavaScript\n            // TODO: if the number in the JSON file is too big for JavaScript, we will lose information\n            return obj.toString();\n        case \"boolean\":\n            return obj ? \"True\" : \"False\";\n        case \"object\":\n            if (obj === null) {\n                return \"None\";\n            }\n            if (Array.isArray(obj)) {\n                if (obj.length === 0) {\n                    return \"[]\";\n                }\n                let s = \"[\\n\";\n                for (const item of obj) {\n                    s += \" \".repeat(indent + 4) + objToPython(item, indent + 4) + \",\\n\";\n                }\n                s += \" \".repeat(indent) + \"]\";\n                return s;\n            }\n            if (Object.keys(obj).length === 0) {\n                return \"{}\";\n            }\n            {\n                let s = \"{\\n\";\n                for (const [k, v] of Object.entries(obj)) {\n                    // repr() because JSON keys must be strings.\n                    s +=\n                        \" \".repeat(indent + 4) +\n                            reprStr(k) +\n                            \": \" +\n                            objToPython(v, indent + 4) +\n                            \",\\n\";\n                }\n                s += \" \".repeat(indent) + \"}\";\n                return s;\n            }\n        default:\n            throw new CCError(\"unexpected object type that shouldn't appear in JSON: \" + typeof obj);\n    }\n}\nexport function formatHeaders(headers, commentedOutHeaders, osVars, imports) {\n    // TODO: what if there are repeat headers\n    let headerDict = \"headers = {\\n\";\n    for (const [headerName, headerValue] of headers) {\n        if (headerValue === null) {\n            continue;\n        }\n        let lineStart;\n        const headerNameLower = headerName.toLowerCase().toString();\n        if (has(commentedOutHeaders, headerNameLower)) {\n            if (commentedOutHeaders[headerNameLower]) {\n                headerDict += \"    # \" + commentedOutHeaders[headerNameLower] + \"\\n\";\n            }\n            lineStart = \"    # \";\n        }\n        else {\n            lineStart = \"    \";\n        }\n        headerDict +=\n            lineStart +\n                repr(headerName, osVars, imports) +\n                \": \" +\n                repr(headerValue, osVars, imports) +\n                \",\\n\";\n    }\n    headerDict += \"}\\n\";\n    return headerDict;\n}\nfunction decodePercentEncoding(s) {\n    let decoded;\n    try {\n        // https://url.spec.whatwg.org/#urlencoded-parsing recommends replacing + with space\n        // before decoding.\n        decoded = wordDecodeURIComponent(s.replace(/\\+/g, \" \"));\n    }\n    catch (e) {\n        if (e instanceof URIError) {\n            // String contains invalid percent encoded characters\n            return null;\n        }\n        throw e;\n    }\n    // If the query string doesn't round-trip, we cannot properly convert it.\n    const roundTripKey = percentEncode(decoded);\n    // If the original data used %20 instead of + (what requests will send), that's close enough\n    if (!eq(roundTripKey, s) && !eq(roundTripKey.replace(/%20/g, \"+\"), s)) {\n        return null;\n    }\n    return decoded;\n}\nfunction dataEntriesToDict(dataEntries) {\n    // Group keys\n    // TODO: because keys can be code that reads from a file, those should not be considered the\n    // same key, for example what if that file is /dev/urandom.\n    // TODO: would we need to distinguish if /dev/urandom came from @/dev/urandom or from @-?\n    const asDict = {};\n    let prevKey = null;\n    for (const [key, val] of dataEntries) {\n        if (prevKey === key) {\n            asDict[key].push(val);\n        }\n        else {\n            if (!Object.prototype.hasOwnProperty.call(asDict, key)) {\n                asDict[key] = [val];\n            }\n            else {\n                // A repeated key with a different key between one of its repetitions\n                // means we can't represent these entries as a dictionary.\n                return null;\n            }\n        }\n        prevKey = key;\n    }\n    return asDict;\n}\nfunction dataEntriesToPython(dataEntries) {\n    if (dataEntries.length === 0) {\n        return \"''\"; // This shouldn't happen\n    }\n    const entriesDict = dataEntriesToDict(dataEntries);\n    if (entriesDict !== null) {\n        if (Object.keys(entriesDict).length === 0) {\n            return \"''\"; // This shouldn't happen\n        }\n        let s = \"{\\n\";\n        for (const [key, vals] of Object.entries(entriesDict)) {\n            s += \"    \" + key + \": \";\n            if (vals.length === 0) {\n                s += \"''\"; // This shouldn't happen\n            }\n            else if (vals.length === 1) {\n                s += vals[0];\n            }\n            else {\n                s += \"[\\n\";\n                for (const val of vals) {\n                    s += \"        \" + val + \",\\n\";\n                }\n                s += \"    ]\";\n            }\n            s += \",\\n\";\n        }\n        s += \"}\";\n        return s;\n    }\n    let s = \"[\\n\";\n    for (const entry of dataEntries) {\n        const [key, val] = entry;\n        s += \"    (\" + key + \", \" + val + \"),\\n\";\n    }\n    s += \"]\";\n    return s;\n}\nfunction formatDataAsEntries(dataArray, osVars, imports, variableName = \"data\") {\n    // This code is more complicated than you might expect because it needs\n    // to handle a --data-urlencode that reads from a file followed by --json\n    // because --json doesn't add an '&' before its value.  Specifically, we\n    // have these cases:\n    //\n    // --data-urlencode @filename --json =value\n    // {open('filename').read(): 'value'}\n    //\n    // --data-urlencode @filename --json key=value\n    // {open('filename').read() + 'key': 'value'}\n    //\n    // --data-urlencode @filename --json key\n    // error\n    //\n    // --data-urlencode name@filename --json value\n    // {'name': open('filename').read() + 'value'}\n    //\n    // --data-urlencode name@filename --json key=value\n    // error\n    //\n    // --data-urlencode name@filename --json =blah\n    // error\n    //\n    // --data-urlencode adds an '&' before its value, so we don't have to worry about\n    // --json <foo> --data-urlencode <bar>\n    for (const d of dataArray) {\n        if (!(d instanceof Word) && d.filetype !== \"urlencode\") {\n            return null;\n        }\n    }\n    const dataEntries = [];\n    let percentWarn = new Word();\n    for (const [i, d] of dataArray.entries()) {\n        if (d instanceof Word) {\n            let newEntries = d.split(\"&\");\n            const prevEntry = i > 0 ? dataEntries[dataEntries.length - 1] : null;\n            if (prevEntry !== null) {\n                // If there's a prevEntry, we can assume it came from --data-urlencode\n                // because it would be part of the current `d` string if it didn't.\n                const [first, ...rest] = newEntries;\n                if (first.includes(\"=\") && prevEntry[1] === null) {\n                    const [key, val] = first.split(\"=\", 2);\n                    const decodedKey = decodePercentEncoding(key);\n                    if (decodedKey === null) {\n                        return null;\n                    }\n                    const decodedVal = decodePercentEncoding(val);\n                    if (decodedVal === null) {\n                        return null;\n                    }\n                    if (key.toBool()) {\n                        prevEntry[0] += \" + \" + repr(decodedKey, osVars, imports);\n                    }\n                    prevEntry[1] = repr(decodedVal, osVars, imports);\n                    if (!percentWarn.toBool()) {\n                        if (key.includes(\"%20\")) {\n                            percentWarn = key;\n                        }\n                        if (val.includes(\"%20\")) {\n                            percentWarn = val;\n                        }\n                    }\n                }\n                else if (!first.includes(\"=\") && prevEntry[1] !== null) {\n                    if (first.toBool()) {\n                        const decodedVal = decodePercentEncoding(first);\n                        if (decodedVal === null) {\n                            return null;\n                        }\n                        prevEntry[1] += \" + \" + repr(decodedVal, osVars, imports);\n                        if (!percentWarn.toBool() && first.includes(\"%20\")) {\n                            percentWarn = first;\n                        }\n                    }\n                }\n                else {\n                    return null;\n                }\n                newEntries = rest;\n            }\n            for (const [j, entry] of newEntries.entries()) {\n                if (entry.isEmpty() &&\n                    j === newEntries.length - 1 &&\n                    i !== dataArray.length - 1) {\n                    // A --data-urlencoded should come next\n                    continue;\n                }\n                if (!entry.includes(\"=\")) {\n                    return null;\n                }\n                const [key, val] = entry.split(\"=\", 2);\n                const decodedKey = decodePercentEncoding(key);\n                if (decodedKey === null) {\n                    return null;\n                }\n                const decodedVal = decodePercentEncoding(val);\n                if (decodedVal === null) {\n                    return null;\n                }\n                dataEntries.push([\n                    repr(decodedKey, osVars, imports),\n                    repr(decodedVal, osVars, imports),\n                ]);\n                if (!percentWarn.toBool()) {\n                    if (key.includes(\"%20\")) {\n                        percentWarn = key;\n                    }\n                    if (val.includes(\"%20\")) {\n                        percentWarn = val;\n                    }\n                }\n            }\n            continue;\n        }\n        // TODO: I bet Python doesn't treat file paths identically to curl\n        const readFile = eq(d.filename, \"-\")\n            ? \"sys.stdin.read()\"\n            : \"open(\" + repr(d.filename, osVars, imports, false, true) + \").read()\";\n        if (!d.name) {\n            dataEntries.push([readFile, null]);\n        }\n        else {\n            // Curl doesn't percent encode the name but Requests will\n            if (!eq(d.name, percentEncode(d.name))) {\n                return null;\n            }\n            dataEntries.push([repr(d.name, osVars, imports), readFile]);\n        }\n    }\n    if (dataEntries.some((e) => e[1] === null)) {\n        return null;\n    }\n    return [\n        variableName +\n            \" = \" +\n            dataEntriesToPython(dataEntries) +\n            \"\\n\",\n        percentWarn.toString(),\n    ];\n}\nfunction formatDataAsStr(dataArray, imports, osVars, variableName = \"data\") {\n    // If one of the arguments has to be binary, then they all have to be binary\n    // because we can't mix bytes and str.\n    // An argument has to be binary when the input command has\n    // --data-binary @filename\n    // otherwise we could generate code that will try to read an image file as text and error.\n    const binary = dataArray.some((d) => !(d instanceof Word) && d.filetype === \"binary\");\n    const reprFunc = binary ? reprb : repr;\n    const prefix = binary ? \"b\" : \"\";\n    const mode = binary ? \", 'rb'\" : \"\";\n    // If we see a string with non-ASCII characters, or read from a file (which may contain\n    // non-ASCII characters), we convert the entire string to bytes at the end.\n    // curl sends bytes as-is, which is presumably in UTF-8, whereas Requests sends\n    // 0x80-0xFF as Latin-1 (as-is) and throws an error if it sees codepoints\n    // above 0xFF.\n    // TODO: is this actually helpful?\n    let encode = false;\n    let encodeOnSeparateLine = false;\n    const lines = [];\n    let extra = new Word();\n    let i, d;\n    for ([i, d] of dataArray.entries()) {\n        const op = i === 0 ? \"=\" : \"+=\";\n        let line = variableName + \" \" + op + \" \";\n        if (i < dataArray.length - 1 && d instanceof Word && d.endsWith(\"&\")) {\n            // Put the trailing '&' on the next line so that we don't have single '&'s on their own lines\n            extra = new Word(\"&\");\n            d = d.slice(0, -1);\n        }\n        if (d instanceof Word) {\n            if (d.length) {\n                line += reprFunc(d, osVars, imports);\n                lines.push(line);\n                encode || (encode = d.test(/[^\\x00-\\x7F]/));\n            }\n            continue;\n        }\n        const { filetype, name, filename } = d;\n        if (filetype === \"urlencode\" && name) {\n            line += reprFunc(extra.add(name).append(\"=\"), osVars, imports) + \" + \";\n            encodeOnSeparateLine = true; // we would need to add parentheses because of the +\n        }\n        else if (extra.toBool()) {\n            line += reprFunc(extra, osVars, imports) + \" + \";\n            encodeOnSeparateLine = true;\n        }\n        if (extra.toBool()) {\n            encodeOnSeparateLine = true; // we would need to add parentheses because of the +\n        }\n        let readFile = \"\";\n        if (eq(filename, \"-\")) {\n            readFile += binary ? \"sys.stdin.buffer\" : \"sys.stdin\";\n            imports.add(\"sys\");\n        }\n        else {\n            // TODO: if filename is a command, this won't work because unlike bash,\n            // Python won't remove the trailing newline from the result of a command\n            // we need to add .trim()\n            line =\n                \"with open(\" +\n                    repr(filename, osVars, imports, false, true) +\n                    mode +\n                    \") as f:\\n    \" +\n                    line;\n            readFile += \"f\";\n        }\n        readFile += \".read()\";\n        if (![\"binary\", \"json\", \"urlencode\"].includes(filetype)) {\n            readFile += `.replace(${prefix}'\\\\n', ${prefix}'').replace(${prefix}'\\\\r', ${prefix}'')`;\n        }\n        if (filetype === \"urlencode\") {\n            readFile = \"quote_plus(\" + readFile + \")\";\n            if (binary) {\n                // quote_plus() always returns a string\n                readFile += \".encode()\";\n            }\n            imports.add(\"urllib.parse.quote_plus\");\n        }\n        else {\n            // --data-urlencode files don't need to be encoded because\n            // they'll be percent-encoded and therefore ASCII-only\n            encode = true;\n        }\n        line += readFile;\n        lines.push(line);\n        extra = new Word();\n    }\n    if (binary) {\n        encode = false;\n    }\n    else if (encode && lines.length === 1 && !encodeOnSeparateLine) {\n        lines[lines.length - 1] += \".encode()\";\n        encode = false;\n    }\n    return [lines.join(\"\\n\") + \"\\n\", encode];\n}\nexport function formatDataAsJson(d, imports, osVars) {\n    if (d instanceof Word) {\n        if (!d.isString()) {\n            // TODO: a JSON parser that allows shell variables\n            return [null, false];\n        }\n        // Try to parse using lossless-json first, then fall back to JSON.parse\n        // TODO: repeated dictionary keys are discarded\n        // https://github.com/josdejong/lossless-json/issues/244\n        let dataAsJson;\n        try {\n            // TODO: types\n            // https://github.com/josdejong/lossless-json/issues/245\n            dataAsJson = jsonParseLossless(d.toString());\n        }\n        catch (_a) {\n            try {\n                dataAsJson = JSON.parse(d.toString());\n            }\n            catch (_b) {\n                return [null, false];\n            }\n        }\n        try {\n            const jsonDataString = \"json_data = \" + objToPython(dataAsJson) + \"\\n\";\n            // JSON might not be serialized by Python exactly as it was originally\n            // due to different whitespace, float formatting like extra + in exponent\n            // (1e100 vs 1e+100), different escape sequences in strings\n            // (\"\\/\" vs \"/\" or \"\\u0008\" vs \"\\b\") or duplicate object keys.\n            let jsonRoundtrips = false;\n            try {\n                jsonRoundtrips = jsonDumps(dataAsJson) === d.tokens[0];\n            }\n            catch (_c) { }\n            return [jsonDataString, jsonRoundtrips];\n        }\n        catch (_d) { }\n    }\n    else if (d.filetype === \"json\") {\n        let jsonDataString = \"\";\n        jsonDataString +=\n            \"with open(\" +\n                repr(d.filename, osVars, imports, false, true) +\n                \") as f:\\n\";\n        jsonDataString += \"    json_data = json.load(f)\\n\";\n        imports.add(\"json\");\n        return [jsonDataString, false];\n    }\n    return [null, false];\n}\nfunction getDataString(request, osVars, warnings) {\n    const imports = new Set();\n    if (!request.data || !request.dataArray) {\n        return [null, false, null, imports];\n    }\n    // There's 4 ways to pass data to Requests (in descending order of preference):\n    //   a or dictionary/list as the json= argument\n    //   a dictionary, or a list of tuples (if the dictionary would have duplicate keys) as the data= argument\n    //   a string as data=\n    //   bytes as data=\n    // We can pass json= if the data is valid JSON and we've specified json in the\n    // Content-Type header because passing json= will set that header.\n    //\n    // However, if there will be a mismatch between how the JSON is formatted\n    // we need to output a commented out version of the request with data= as well.\n    // This can happen when there's extra whitespace in the original data or\n    // because the JSON contains numbers that are too big to be stored in\n    // JavaScript or because there's objects with duplicate keys.\n    const contentType = request.headers.get(\"content-type\");\n    let dataAsJson = null;\n    let jsonRoundtrips = false;\n    if (request.dataArray.length === 1 &&\n        contentType &&\n        contentType.split(\";\")[0].toString().trim() === \"application/json\") {\n        [dataAsJson, jsonRoundtrips] = formatDataAsJson(request.dataArray[0], imports, osVars);\n    }\n    if (jsonRoundtrips) {\n        return [null, false, dataAsJson, imports];\n    }\n    // data= can't be a dict or a list of tuples (i.e. entries) when\n    //   there is a @file from --data, --data-binary or --json (because they can contain an '&' which would get escaped)\n    //   there is a --data-urlencode without a name= or name@\n    //   if you split the input on & and there's a value that doesn't contain an = (e.g. --data \"foo=bar&\" or simply --data \"&\")\n    //   there is a name or value that doesn't roundtrip through percent encoding\n    const dataAsEntries = formatDataAsEntries(request.dataArray, osVars, imports);\n    if (dataAsEntries !== null) {\n        const [dataEntries, percentWarn] = dataAsEntries;\n        if (eq(request.headers.get(\"content-type\"), \"application/x-www-form-urlencoded\") &&\n            request.headers.length === 1) {\n            // Requests adds the header when you include a body\n            // so if it's the only header, don't print the headers\n            request.headers.delete(\"content-type\");\n        }\n        if (percentWarn) {\n            warnings.push([\n                \"percent-encoded-spaces-in-data\",\n                'data contains spaces encoded by curl as \"%20\" which will be sent as \"+\" instead: ' +\n                    JSON.stringify(percentWarn),\n            ]);\n        }\n        return [dataEntries, false, dataAsJson, imports];\n    }\n    const [dataAsString, shouldEncode] = formatDataAsStr(request.dataArray, imports, osVars);\n    return [dataAsString, shouldEncode, dataAsJson, imports];\n}\nfunction getFilesString(request, osVars, imports) {\n    let usesStdin = false;\n    if (!request.multipartUploads) {\n        return [\"\", usesStdin];\n    }\n    const multipartUploads = request.multipartUploads.map((m) => {\n        // https://github.com/psf/requests/blob/2d5517682b3b38547634d153cea43d48fbc8cdb5/requests/models.py#L117\n        //\n        // Requests's multipart syntax looks like this:\n        // name/filename: content\n        // name: open(filename/contentFile)\n        // name: (filename, open(contentFile)[, contentType[, headers]]))\n        const name = m.name ? repr(m.name, osVars, imports) : \"None\";\n        if (!(\"contentType\" in m) && !(\"headers\" in m) && !(\"encoder\" in m)) {\n            if (\"contentFile\" in m &&\n                eq(m.contentFile, m.filename) &&\n                !eq(m.contentFile, \"-\")) {\n                return [\n                    name,\n                    \"open(\" +\n                        repr(m.contentFile, osVars, imports, false, true) +\n                        \", 'rb')\",\n                ];\n            }\n            if (\"content\" in m && \"filename\" in m && eq(m.name, m.filename)) {\n                return [name, repr(m.content, osVars, imports)];\n            }\n        }\n        const sentFilename = \"filename\" in m && m.filename\n            ? repr(m.filename, osVars, imports)\n            : \"None\";\n        const tuple = [sentFilename];\n        if (\"contentFile\" in m) {\n            if (eq(m.contentFile, \"-\")) {\n                // TODO: use piped stdin if we have it\n                usesStdin = true;\n                tuple.push(\"sys.stdin.buffer.read())\");\n            }\n            else {\n                tuple.push(\"open(\" +\n                    repr(m.contentFile, osVars, imports, false, true) +\n                    \", 'rb')\");\n            }\n        }\n        else {\n            tuple.push(repr(m.content, osVars, imports));\n        }\n        let addedContentType = false;\n        if (\"contentType\" in m && m.contentType) {\n            tuple.push(repr(m.contentType, osVars, imports));\n            addedContentType = true;\n        }\n        if ((\"headers\" in m && m.headers) ||\n            (\"headerFiles\" in m && m.headerFiles)) {\n            if (!addedContentType) {\n                tuple.push(\"None\");\n            }\n            const headerArg = [];\n            if (m.headers) {\n                let headerDict = \"{\";\n                for (const header of m.headers) {\n                    // TODO: can have multiple headers in one headers= argument?\n                    const [name, value] = header.split(\":\", 2);\n                    headerDict +=\n                        repr(name, osVars, imports) +\n                            \": \" +\n                            repr(value.trimStart() || new Word(), osVars, imports) +\n                            \", \";\n                }\n                if (headerDict.endsWith(\", \")) {\n                    headerDict = headerDict.slice(0, -2);\n                }\n                headerDict += \"}\";\n                headerArg.push(headerDict);\n            }\n            if (m.headerFiles && m.headerFiles.length) {\n                for (const headerFile of m.headerFiles) {\n                    headerArg.push(\"read_headerfile(\" +\n                        repr(headerFile, osVars, imports, false, true) +\n                        \")\");\n                }\n                imports.add(\"read_headerfile\");\n            }\n            tuple.push(headerArg.join(\" | \"));\n        }\n        return [name, \"(\" + tuple.join(\", \") + \")\"];\n    });\n    const multipartUploadsAsDict = Object.fromEntries(multipartUploads);\n    let filesString = \"files = \";\n    if (Object.keys(multipartUploadsAsDict).length === multipartUploads.length) {\n        filesString += \"{\\n\";\n        for (const [multipartKey, multipartValue] of multipartUploads) {\n            filesString += \"    \" + multipartKey + \": \" + multipartValue + \",\\n\";\n        }\n        filesString += \"}\\n\";\n    }\n    else {\n        filesString += \"[\\n\";\n        for (const [multipartKey, multipartValue] of multipartUploads) {\n            filesString += \"    (\" + multipartKey + \", \" + multipartValue + \"),\\n\";\n        }\n        filesString += \"]\\n\";\n    }\n    return [filesString, usesStdin];\n}\n// Don't add indent/comment characters to empty lines, most importantly the last line\n// which will be empty when there's a trailing newline.\nfunction indent(s, level) {\n    if (level === 0) {\n        return s;\n    }\n    const begin = \"    \".repeat(level);\n    return s\n        .split(\"\\n\")\n        .map((l) => (l.trim() ? begin + l : l))\n        .join(\"\\n\");\n}\nfunction commentOut(s) {\n    return s\n        .split(\"\\n\")\n        .map((l) => (l.trim() ? \"#\" + l : l))\n        .join(\"\\n\");\n}\nfunction uniqueWarn(seenWarnings, warnings, warning) {\n    if (!seenWarnings.has(warning[0])) {\n        seenWarnings.add(warning[0]);\n        warnings.push(warning);\n    }\n}\nfunction joinArgs(args) {\n    let s = \"(\";\n    if (args.join(\"\").length < 100) {\n        s += args.join(\", \");\n    }\n    else {\n        s += \"\\n\";\n        for (const arg of args) {\n            s += \"    \" + arg + \",\\n\";\n        }\n    }\n    return s + \")\";\n}\nfunction requestToPython(request, warnings = [], imports, thirdPartyImports) {\n    const osVars = {};\n    const commentedOutHeaders = {\n        // TODO: add a warning why this should be commented out?\n        \"accept-encoding\": \"\",\n        \"content-length\": \"\",\n    };\n    // https://github.com/icing/blog/blob/main/curl_on_a_weekend.md\n    if (eq(request.headers.get(\"te\"), \"trailers\")) {\n        commentedOutHeaders.te = \"Requests doesn't support trailers\";\n    }\n    let cookieStr;\n    let cookieFile = null;\n    if (request.cookies) {\n        // TODO: handle duplicate cookie names\n        cookieStr = \"cookies = {\\n\";\n        for (const [cookieName, cookieValue] of request.cookies) {\n            cookieStr +=\n                \"    \" +\n                    repr(cookieName, osVars, imports) +\n                    \": \" +\n                    repr(cookieValue, osVars, imports) +\n                    \",\\n\";\n        }\n        cookieStr += \"}\\n\";\n        // Before Python 3.11, cookies= was sorted alphabetically\n        // https://github.com/python/cpython/issues/86232\n        commentedOutHeaders.cookie = \"\";\n        if (request.cookieFiles) {\n            warnings.push([\n                \"cookie-files\",\n                \"passing both cookies and cookie files with --cookie/-b is not supported\",\n            ]);\n        }\n        if (request.cookieJar) {\n            warnings.push([\n                \"cookie-files\",\n                \"passing both cookies and --cookie-jar/-c is not supported\",\n            ]);\n        }\n    }\n    else if ((request.cookieFiles && request.cookieFiles.length) ||\n        request.cookieJar) {\n        imports.add(\"http.cookiejar.MozillaCookieJar\");\n        if (request.cookieFiles && request.cookieFiles.length) {\n            // TODO: what if user passes multiple cookie files?\n            // TODO: what if user passes cookies and cookie files?\n            cookieFile = request.cookieFiles[request.cookieFiles.length - 1];\n            if (request.cookieFiles.length > 1) {\n                warnings.push([\n                    \"cookie-files\",\n                    // TODO: curl reads all of them.\n                    \"multiple cookie files are not supported, using the last one: \" +\n                        JSON.stringify(cookieFile.toString()),\n                ]);\n            }\n            // TODO: do we need to .load()?\n            cookieStr =\n                \"cookies = MozillaCookieJar(\" +\n                    repr(cookieFile, osVars, imports) +\n                    \")\\n\";\n        }\n        else if (request.cookieJar) {\n            cookieStr = \"cookies = MozillaCookieJar()\\n\";\n        }\n    }\n    let proxyDict;\n    if (request.proxy) {\n        let proxy = request.proxy.includes(\"://\")\n            ? request.proxy\n            : request.proxy.prepend(\"http://\");\n        const protocol = proxy.split(\"://\")[0].toLowerCase();\n        if (eq(protocol, \"socks\")) {\n            // https://github.com/curl/curl/blob/curl-7_86_0/lib/url.c#L2418-L2419\n            proxy = proxy.replace(\"socks\", \"socks4\");\n        }\n        proxyDict = \"proxies = {\\n\";\n        proxyDict += \"    'http': \" + repr(proxy, osVars, imports) + \",\\n\";\n        // TODO: if (protocol !== \"http\") { ?\n        proxyDict += \"    'https': \" + repr(proxy, osVars, imports) + \",\\n\";\n        proxyDict += \"}\\n\";\n    }\n    let certStr;\n    if (request.cert || request.key) {\n        certStr = \"cert = \";\n        let certPart = \"None\";\n        if (request.cert) {\n            const [cert, password] = request.cert;\n            certPart = repr(cert, osVars, imports);\n            if (password) {\n                warnings.push([\n                    \"cert-password\",\n                    \"passing a password to --cert is not supported: \" +\n                        JSON.stringify(password.toString()),\n                ]);\n            }\n        }\n        if (request.key) {\n            certStr +=\n                \"(\" + certPart + \", \" + repr(request.key, osVars, imports) + \")\";\n        }\n        else {\n            certStr += certPart;\n        }\n        certStr += \"\\n\";\n    }\n    // if there's only 1 URL, put params all together here, unless it's just one string.\n    // if there's more than 1, if we have params that are added to each URL from\n    // --get --data or --url-query that need to read a file, put just the shared part\n    // here, then keep the query in the URL, in the URL.\n    // If there's no --get --data or --url-query, then\n    // put params (if it can be rendered as a list or dict) right before the requests line\n    // Otherwise, keep the query in the URL.\n    let paramsStr;\n    let shouldEncodeParams; // TODO: necessary?\n    function readsFile(paramArray) {\n        return paramArray.some((p) => !(p instanceof Word));\n    }\n    const paramArray = request.urls.length === 1 ? request.urls[0].queryArray : request.queryArray;\n    if (paramArray &&\n        (request.urls.length === 1 ||\n            (request.urls.length > 1 && readsFile(paramArray)))) {\n        const queryAsEntries = formatDataAsEntries(paramArray, osVars, imports, \"params\");\n        if (queryAsEntries !== null) {\n            let percentWarn;\n            [paramsStr, percentWarn] = queryAsEntries;\n            if (percentWarn) {\n                warnings.push([\n                    \"percent-encoded-spaces-in-query\",\n                    // TODO: will they?\n                    'URL querystring contains spaces encoded as \"%20\" which will be sent by Requests as \"+\" instead: ' +\n                        JSON.stringify(percentWarn),\n                ]);\n            }\n        }\n        else if (readsFile(paramArray)) {\n            [paramsStr, shouldEncodeParams] = formatDataAsStr(paramArray, imports, osVars, \"params\");\n        }\n    }\n    const contentType = request.headers.get(\"content-type\");\n    let dataString;\n    let jsonDataString;\n    let filesString;\n    let shouldEncode;\n    if (request.urls[0].uploadFile && request.urls.length === 1) {\n        // TODO: https://docs.python-requests.org/en/latest/user/advanced/#streaming-uploads\n        if (eq(request.urls[0].uploadFile, \"-\") ||\n            eq(request.urls[0].uploadFile, \".\")) {\n            dataString = \"data = sys.stdin.buffer.read()\\n\";\n            imports.add(\"sys\");\n        }\n        else {\n            dataString =\n                \"with open(\" +\n                    repr(request.urls[0].uploadFile, osVars, imports, false, true) +\n                    \", 'rb') as f:\\n\";\n            dataString += \"    data = f.read()\\n\";\n        }\n    }\n    else if (request.multipartUploads) {\n        let usesStdin = false;\n        [filesString, usesStdin] = getFilesString(request, osVars, imports);\n        if (usesStdin) {\n            imports.add(\"sys\");\n        }\n        // If you pass files= then Requests adds this header and a `boundary`\n        // If you manually pass a Content-Type header it won't set a `boundary`\n        // wheras curl does, so the request will fail.\n        // https://github.com/curlconverter/curlconverter/issues/248\n        if (filesString &&\n            contentType &&\n            eq(contentType.trim(), \"multipart/form-data\") &&\n            !contentType.includes(\"boundary=\")) {\n            // TODO: better wording\n            commentedOutHeaders[\"content-type\"] =\n                \"requests won't add a boundary if this header is set when you pass files=\";\n        }\n    }\n    else if (request.data && !request.data.isEmpty()) {\n        // !isEmpty() because passing data='' is the same as not passing data=\n        // We need to set the Content-Type header in headers= and not set data=\n        let dataImports;\n        [dataString, shouldEncode, jsonDataString, dataImports] = getDataString(request, osVars, warnings);\n        dataImports.forEach(imports.add, imports);\n        // Remove \"Content-Type\" from the headers dict\n        // because Requests adds it automatically when you use json=\n        if (jsonDataString &&\n            !dataString &&\n            contentType &&\n            eq(contentType.trim(), \"application/json\")) {\n            commentedOutHeaders[\"content-type\"] = \"Already added when you pass json=\";\n        }\n    }\n    let headerDict;\n    if (request.headers.length) {\n        headerDict = formatHeaders(request.headers, commentedOutHeaders, osVars, imports);\n    }\n    let pythonCode = \"\";\n    if (proxyDict) {\n        pythonCode += proxyDict + \"\\n\";\n    }\n    if (cookieStr) {\n        pythonCode += cookieStr + \"\\n\";\n    }\n    if (headerDict) {\n        pythonCode += headerDict + \"\\n\";\n    }\n    if (paramsStr) {\n        pythonCode += paramsStr + \"\\n\";\n    }\n    if (certStr) {\n        pythonCode += certStr + \"\\n\";\n    }\n    if (jsonDataString) {\n        pythonCode += jsonDataString + \"\\n\";\n    }\n    else if (dataString) {\n        pythonCode += dataString + \"\\n\";\n    }\n    else if (filesString) {\n        pythonCode += filesString + \"\\n\";\n    }\n    // By default, curl doesn't follow redirects and Requests does.\n    // Unless redirect behavior has been explicitly set with -L/--location/--no-location\n    // or --max-redirs 0 we pretend generate code that follows redirects,\n    // because adding allow_redirects=False to almost every command would be ugly\n    // and it only matters when the server responds with a redirect, which isn't\n    // that common.\n    let followRedirects = request.followRedirects;\n    let maxRedirects = undefined;\n    if (request.maxRedirects !== undefined) {\n        maxRedirects = asInt(request.maxRedirects, osVars, imports);\n    }\n    if (followRedirects === undefined) {\n        followRedirects = true;\n        // Users would see this warning for most commands\n        // warnings.push([\n        //   \"--location\",\n        //   \"Requests defaults to following redirects, curl doesn't\",\n        // ]);\n    }\n    const hasMaxRedirects = followRedirects &&\n        maxRedirects &&\n        maxRedirects !== \"0\" &&\n        maxRedirects !== \"30\"; // Requests default\n    // Things that vary per-url:\n    // method (because --upload-file can make it PUT)\n    // data= (because of --upload-file)\n    // --output file\n    // params= (because of the query string)\n    // auth= (because the URL can have an auth string)\n    const seenWarnings = new Set();\n    const requestLines = [];\n    let extraEmptyLine = false;\n    for (const [urlObjIndex, urlObj] of request.urls.entries()) {\n        const requestsMethods = [\n            \"GET\",\n            \"HEAD\",\n            \"POST\",\n            \"PATCH\",\n            \"PUT\",\n            \"DELETE\",\n            \"OPTIONS\", // undocumented\n        ];\n        let fn;\n        const args = [];\n        const methodAsString = urlObj.method.toString();\n        if (urlObj.method.isString() && requestsMethods.includes(methodAsString)) {\n            fn = methodAsString.toLowerCase();\n        }\n        else {\n            fn = \"request\";\n            args.push(repr(urlObj.method, osVars, imports));\n            if (urlObj.method.isString() &&\n                methodAsString !== methodAsString.toUpperCase()) {\n                warnings.push([\n                    \"method\",\n                    \"Requests will uppercase the HTTP method: \" +\n                        JSON.stringify(methodAsString),\n                ]);\n            }\n        }\n        let urlParamsStr;\n        let url = urlObj.url;\n        if (request.urls.length === 1) {\n            if (paramsStr) {\n                url = urlObj.urlWithoutQueryArray;\n            }\n            else {\n                url = urlObj.url;\n            }\n        }\n        else {\n            if (paramsStr) {\n                url = urlObj.urlWithOriginalQuery;\n            }\n            else {\n                if (urlObj.queryArray && urlObj.queryArray.length > 0) {\n                    const urlQueryAsEntries = formatDataAsEntries(urlObj.queryArray, osVars, imports, \"params\");\n                    if (urlQueryAsEntries !== null) {\n                        let percentWarn;\n                        [urlParamsStr, percentWarn] = urlQueryAsEntries;\n                        url = urlObj.urlWithoutQueryArray;\n                        if (percentWarn) {\n                            warnings.push([\n                                \"percent-encoded-spaces-in-query\",\n                                // TODO: will they?\n                                'query contains spaces encoded by curl as \"%20\" which will be sent as \"+\" instead: ' +\n                                    JSON.stringify(percentWarn),\n                            ]);\n                        }\n                    }\n                    else if (readsFile(urlObj.queryArray)) {\n                        [urlParamsStr, shouldEncodeParams] = formatDataAsStr(urlObj.queryArray, imports, osVars, \"params\");\n                        url = urlObj.urlWithoutQueryArray;\n                    }\n                }\n                // url = urlObj.url\n            }\n        }\n        args.push(repr(url, osVars, imports));\n        if (paramsStr || urlParamsStr) {\n            args.push(\"params=params\" + (shouldEncodeParams ? \".encode()\" : \"\"));\n        }\n        if (cookieStr && !request.cookieJar) {\n            args.push(\"cookies=cookies\");\n        }\n        if (headerDict) {\n            args.push(\"headers=headers\");\n        }\n        if (urlObj.uploadFile) {\n            if (request.urls.length > 1) {\n                // If there's more than one URL we could have --data for all\n                // of them and --upload-file for just one of them and we can't\n                // overwrite the `data` variable in that case.\n                args.push(\"data=file_contents\");\n            }\n            else {\n                args.push(\"data=data\");\n            }\n        }\n        else if (filesString) {\n            args.push(\"files=files\");\n        }\n        else if (request.data && !request.data.isEmpty()) {\n            if (jsonDataString) {\n                args.push(\"json=json_data\");\n            }\n            else {\n                args.push(\"data=data\" + (shouldEncode ? \".encode()\" : \"\"));\n            }\n        }\n        if (proxyDict) {\n            args.push(\"proxies=proxies\");\n        }\n        if (certStr) {\n            args.push(\"cert=cert\");\n        }\n        const certOrPath = request.cacert || request.capath;\n        if (request.insecure) {\n            args.push(\"verify=False\");\n        }\n        else if (certOrPath) {\n            args.push(\"verify=\" + repr(certOrPath, osVars, imports));\n        }\n        // TODO: does this header check apply to all auth methods?\n        if (urlObj.auth && !request.headers.has(\"Authorization\")) {\n            const [user, password] = urlObj.auth;\n            let auth = \"(\" +\n                repr(user, osVars, imports) +\n                \", \" +\n                repr(password, osVars, imports) +\n                \")\";\n            switch (request.authType) {\n                case \"basic\":\n                    break;\n                case \"digest\":\n                    thirdPartyImports.add(\"requests.auth.HTTPDigestAuth\");\n                    auth = \"HTTPDigestAuth\" + auth;\n                    break;\n                case \"ntlm\":\n                case \"ntlm-wb\":\n                    thirdPartyImports.add(\"requests_ntlm.HttpNtlmAuth\");\n                    auth = \"HttpNtlmAuth\" + auth;\n                    // TODO: this could stop being true\n                    uniqueWarn(seenWarnings, warnings, [\n                        \"ntlm\",\n                        \"requests-ntlm is unmaintained\",\n                    ]);\n                    break;\n                case \"negotiate\":\n                    thirdPartyImports.add(\"requests_gssapi.HTTPSPNEGOAuth\");\n                    auth = \"HTTPSPNEGOAuth(\";\n                    if (request.delegation) {\n                        if (eq(request.delegation, \"always\")) {\n                            auth += \"delegate=True\";\n                        }\n                        else if (eq(request.delegation, \"none\")) {\n                            auth += \"delegate=False\";\n                        }\n                        else {\n                            uniqueWarn(seenWarnings, warnings, [\n                                \"delegation\",\n                                \"--delegation value not supported: \" +\n                                    JSON.stringify(request.delegation.toString()),\n                            ]);\n                        }\n                    }\n                    auth += \")\";\n                    // TODO: use requests-kerberos instead?\n                    // https://star-history.com/#pythongssapi/requests-gssapi&requests/requests-kerberos\n                    uniqueWarn(seenWarnings, warnings, [\n                        \"negotiate\",\n                        \"requests-gssapi is a fork of requests-kerberos\",\n                    ]);\n                    break;\n                case \"aws-sigv4\":\n                    thirdPartyImports.add(\"aws_requests_auth.aws_auth.AWSRequestsAuth\");\n                    // TODO: move this \"auth = \" to separate line\n                    // TODO: try this.\n                    auth =\n                        \"AWSRequestsAuth(aws_access_key=\" +\n                            repr(user, osVars, imports) +\n                            \", aws_secret_access_key=\" +\n                            repr(password, osVars, imports) +\n                            // TODO: parse\n                            \", aws_host=\" +\n                            repr(request.awsSigV4 || new Word(), osVars, imports) +\n                            \", aws_region=\" +\n                            repr(request.awsSigV4 || new Word(), osVars, imports) +\n                            \", aws_service=\" +\n                            repr(request.awsSigV4 || new Word(), osVars, imports) +\n                            \")\";\n                    uniqueWarn(seenWarnings, warnings, [\n                        \"--aws-sigv4\",\n                        \"--aws-sigv4 value isn't parsed: \" +\n                            JSON.stringify(request.awsSigV4 ? request.awsSigV4.toString() : \"\"),\n                    ]);\n                    break;\n                case \"bearer\":\n                    // Shouldn't happen because hasHeader(Authorization) should be true\n                    // TODO: use requests-oauthlib\n                    break;\n            }\n            args.push(\"auth=\" + auth);\n        }\n        if (request.timeout || request.connectTimeout) {\n            let connectTimeout = null;\n            if (request.connectTimeout) {\n                connectTimeout = asFloat(request.connectTimeout, osVars, imports);\n            }\n            let timeout = null;\n            if (request.timeout) {\n                if (request.timeout.isString()) {\n                    timeout = request.timeout.toString();\n                }\n                else {\n                    timeout =\n                        \"float(\" +\n                            repr(request.timeout, osVars, imports, false, true) +\n                            \")\";\n                }\n            }\n            if (timeout && connectTimeout && timeout !== connectTimeout) {\n                args.push(\"timeout=(\" + connectTimeout + \", \" + timeout + \")\");\n            }\n            else if (timeout) {\n                args.push(\"timeout=\" + timeout);\n            }\n            else if (connectTimeout) {\n                args.push(\"timeout=(\" + connectTimeout + \", None)\");\n            }\n            if (timeout) {\n                uniqueWarn(seenWarnings, warnings, [\n                    \"--max-time\",\n                    // https://requests.readthedocs.io/en/latest/user/advanced/#timeouts\n                    \"unlike --max-time, Requests doesn't have a timeout for the whole request, only for the connect and the read\",\n                ]);\n            }\n        }\n        if (!followRedirects || maxRedirects === \"0\") {\n            args.push(\"allow_redirects=False\");\n        }\n        else if (maxRedirects) {\n            if (maxRedirects === \"-1\") {\n                imports.add(\"math\");\n                maxRedirects = \"math.inf\";\n            }\n        }\n        if (followRedirects && request.followRedirectsTrusted) {\n            uniqueWarn(seenWarnings, warnings, [\n                \"--location-trusted\",\n                \"Requests doesn't have an easy way to disable removing the Authorization: header on redirect\",\n            ]);\n        }\n        let requestLine = \"\";\n        const isSession = hasMaxRedirects || request.cookieJar;\n        const indentLevel = isSession ? 1 : 0;\n        if (isSession && urlObjIndex === 0) {\n            requestLine += \"with requests.Session() as session:\\n\";\n            if (hasMaxRedirects) {\n                requestLine += `    session.max_redirects = ${maxRedirects}\\n`;\n            }\n            if (request.cookieJar) {\n                requestLine += `    session.cookies = cookies\\n`;\n            }\n        }\n        if (request.urls.length > 1) {\n            if (urlParamsStr) {\n                requestLine += indent(urlParamsStr, indentLevel);\n            }\n            if (urlObj.uploadFile) {\n                let uploadFileLine = \"\";\n                // TODO: https://docs.python-requests.org/en/latest/user/advanced/#streaming-uploads\n                if (eq(urlObj.uploadFile, \"-\") || eq(urlObj.uploadFile, \".\")) {\n                    uploadFileLine += \"file_contents = sys.stdin.buffer.read()\\n\";\n                    imports.add(\"sys\");\n                }\n                else {\n                    uploadFileLine +=\n                        \"with open(\" +\n                            repr(urlObj.uploadFile, osVars, imports, false, true) +\n                            \", 'rb') as f:\\n\";\n                    uploadFileLine += \"    file_contents = f.read()\\n\";\n                }\n                requestLine += indent(uploadFileLine, indentLevel);\n            }\n        }\n        const fnToCall = \"response = \" + (isSession ? \"session\" : \"requests\") + \".\" + fn;\n        requestLine += indent(fnToCall + joinArgs(args) + \"\\n\", indentLevel);\n        if (jsonDataString && dataString && !urlObj.uploadFile) {\n            // Adding empty lines to a \"with\" block breaks the code when pasted in the REPL\n            requestLine += isSession || request.urls.length > 1 ? \"\" : \"\\n\";\n            // Should never be -1\n            args[args.indexOf(\"json=json_data\")] = shouldEncode\n                ? \"data=data.encode()\"\n                : \"data=data\";\n            let dataAlternative = \"# Note: json_data will not be serialized by requests\\n\" +\n                \"# exactly as it was in the original request.\\n\";\n            dataAlternative += commentOut(dataString);\n            dataAlternative += commentOut(fnToCall + joinArgs(args) + \"\\n\");\n            requestLine += indent(dataAlternative, indentLevel);\n        }\n        if (urlObj.output && !eq(urlObj.output, \"/dev/null\")) {\n            let outputLine = \"\";\n            if (eq(request.urls[0].output, \"-\")) {\n                outputLine += \"print(response.text)\\n\";\n            }\n            else {\n                outputLine += isSession || request.urls.length > 1 ? \"\" : \"\\n\";\n                outputLine +=\n                    \"with open(\" +\n                        repr(urlObj.output, osVars, imports, false, true) +\n                        \", 'wb') as f:\\n\";\n                outputLine += \"    f.write(response.content)\\n\";\n            }\n            requestLine += indent(outputLine, indentLevel);\n        }\n        if (!isSession &&\n            // request.urls.length > 1 &&\n            (urlParamsStr ||\n                (dataString && jsonDataString) ||\n                urlObj.uploadFile ||\n                (urlObj.output && !eq(urlObj.output, \"/dev/null\")))) {\n            extraEmptyLine = true;\n        }\n        requestLines.push(requestLine);\n    }\n    pythonCode += requestLines.join(extraEmptyLine ? \"\\n\" : \"\");\n    if (request.cookieJar) {\n        let cookieSaveLine = \"cookies.save(\";\n        if (!eq(request.cookieJar, cookieFile)) {\n            cookieSaveLine += repr(request.cookieJar, osVars, imports) + \", \";\n        }\n        cookieSaveLine += \"ignore_discard=True, ignore_expires=True)\\n\"; // TODO: necessary?\n        pythonCode += indent(cookieSaveLine, 1);\n    }\n    if (request.http3) {\n        warnings.push([\n            \"http3\",\n            \"this was an HTTP/3 request but requests only supports HTTP/1.1\",\n        ]);\n    }\n    else if (request.http2) {\n        warnings.push([\n            \"http2\",\n            \"this was an HTTP/2 request but requests only supports HTTP/1.1\",\n        ]);\n    }\n    else if (request.headers.lowercase && request.headers.length > 1) {\n        warnings.push([\n            \"--header\",\n            \"all the --header/-H names are lowercase, which means this may have been an HTTP/2 or HTTP/3 request. Requests only sends HTTP/1.1\",\n        ]);\n    }\n    // It would be more correct to run the commands whenever we need\n    // their values instead of running them all at the beginning.\n    let variableCode = \"\";\n    if (Object.keys(osVars).length) {\n        for (const [varName, expr] of Object.entries(osVars)) {\n            variableCode += `${varName} = ${expr}\\n`;\n        }\n        variableCode += \"\\n\";\n    }\n    return variableCode + pythonCode;\n}\nexport function printImports(imps) {\n    let s = \"\";\n    for (const imp of Array.from(imps).sort()) {\n        if (imp === \"read_headerfile\") {\n            continue;\n        }\n        if (imp.includes(\".\")) {\n            const pos = imp.lastIndexOf(\".\");\n            const module = imp.slice(0, pos);\n            const name = imp.slice(pos + 1);\n            s += \"from \" + module + \" import \" + name + \"\\n\";\n        }\n        else {\n            s += \"import \" + imp + \"\\n\";\n        }\n    }\n    return s;\n}\nexport function _toPython(requests, warnings = []) {\n    const code = [];\n    let joinTwoLines = false;\n    const imports = new Set();\n    const thirdPartyImports = new Set();\n    for (const request of requests) {\n        const requestCode = requestToPython(request, warnings, imports, thirdPartyImports);\n        code.push(requestCode);\n        // If one of the requests defines variables (or its URL is very long),\n        // separate all the configs with two empty lines.\n        // curl example.com --next example.com\n        // vs.\n        // curl --data \"foo=bar\" example.com --next example.com\n        // (+1 for the trailing newline)\n        joinTwoLines || (joinTwoLines = requestCode.split(\"\\n\").length > request.urls.length + 1);\n    }\n    let importCode = \"\";\n    importCode += printImports(imports);\n    if (imports.size > 1) {\n        importCode += \"\\n\";\n    }\n    importCode += \"import requests\\n\";\n    importCode += printImports(thirdPartyImports);\n    importCode += \"\\n\";\n    if (imports.has(\"read_headerfile\")) {\n        importCode += \"def read_headerfile(filename):\\n\";\n        importCode += \"    headers = {}\\n\";\n        importCode += \"    with open(filename) as f:\\n\";\n        importCode += \"        for line in f:\\n\";\n        importCode += \"            line = line.split('#', 1)[0].strip()\\n\";\n        importCode += \"            if line:\\n\";\n        importCode += \"                [key, value] = line.split(':', 1)\\n\";\n        importCode += \"                value = value or ''\\n\";\n        importCode += \"                headers[key.strip()] = value.strip()\\n\";\n        importCode += \"    return headers\\n\";\n        importCode += \"\\n\";\n    }\n    return importCode + code.join(joinTwoLines ? \"\\n\\n\" : \"\\n\");\n}\nexport function toPythonWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const python = _toPython(requests, warnings);\n    return [python, warnings];\n}\nexport function toPython(curlCommand) {\n    return toPythonWarn(curlCommand)[0];\n}\n//# sourceMappingURL=python.js.map","import { Word, eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { wordDecodeURIComponent, parseQueryString } from \"../../Query.js\";\nimport { reprStr as pyrepr } from \"../python/python.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"insecure\",\n    \"no-insecure\",\n]);\nconst RESERVED_WORDS = new Set([\n    \"if\",\n    \"else\",\n    \"repeat\",\n    \"while\",\n    \"function\",\n    \"for\",\n    \"in\",\n    \"next\",\n    \"break\",\n    \"TRUE\",\n    \"FALSE\",\n    \"NULL\",\n    \"Inf\",\n    \"NaN\",\n    \"NA\",\n    \"NA_integer_\",\n    \"NA_real_\",\n    \"NA_complex_\",\n    \"NA_character_\",\n]);\n// backtick quote names\nconst regexBacktickEscape = /`|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprBacktick(s) {\n    if (s instanceof Word) {\n        if (!s.isString()) {\n            // TODO: warn\n        }\n        s = s.toString();\n    }\n    if ((s.match(/^[a-zA-Z][a-zA-Z0-9._]*$/) ||\n        s.match(/^\\.[a-zA-Z][a-zA-Z0-9._]*$/)) &&\n        !RESERVED_WORDS.has(s)) {\n        return s;\n    }\n    return (\"`\" +\n        s.replace(regexBacktickEscape, (c) => {\n            switch (c) {\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"`\":\n                    return \"\\\\`\";\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 2) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            if (hex.length <= 4) {\n                return \"\\\\u\" + hex.padStart(4, \"0\");\n            }\n            return \"\\\\U\" + hex.padStart(8, \"0\");\n        }) +\n        \"`\");\n}\n// https://stat.ethz.ch/R-manual/R-devel/doc/manual/R-lang.html#Literal-constants\nexport function reprStr(s) {\n    // R prefers double quotes\n    const quote = s.includes('\"') && !s.includes(\"'\") ? \"'\" : '\"';\n    return pyrepr(s, quote);\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"Sys.getenv(\" + reprStr(t.value) + \")\");\n        }\n        else {\n            args.push(\"system(\" + reprStr(t.value) + \", intern = TRUE)\");\n        }\n    }\n    if (args.length === 1) {\n        return args[0];\n    }\n    return \"paste0(\" + args.join(\", \") + \")\";\n}\nexport function toNumeric(w) {\n    if (w.isString()) {\n        const s = w.toString();\n        // TODO: better check\n        if (parseFloat(s).toString() === s) {\n            return s;\n        }\n    }\n    return \"as.numeric(\" + repr(w) + \")\";\n}\nfunction getCookieDict(request) {\n    if (!request.cookies) {\n        return null;\n    }\n    let cookieDict = \"cookies = c(\\n\";\n    const lines = [];\n    for (const [key, value] of request.cookies) {\n        try {\n            // httr percent-encodes cookie values\n            const decoded = wordDecodeURIComponent(value.replace(/\\+/g, \" \"));\n            lines.push(\"  \" + reprBacktick(key) + \" = \" + repr(decoded));\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    cookieDict += lines.join(\",\\n\");\n    cookieDict += \"\\n)\\n\";\n    request.headers.delete(\"Cookie\");\n    return cookieDict;\n}\nfunction getQueryList(request) {\n    if (request.urls[0].queryList === undefined) {\n        return undefined;\n    }\n    let queryList = \"params = list(\\n\";\n    queryList += request.urls[0].queryList\n        .map((param) => {\n        const [key, value] = param;\n        return \"  \" + reprBacktick(key) + \" = \" + repr(value);\n    })\n        .join(\",\\n\");\n    queryList += \"\\n)\\n\";\n    return queryList;\n}\nfunction getFilesString(request) {\n    if (!request.multipartUploads) {\n        return undefined;\n    }\n    // http://docs.rstats-requests.org/en/master/user/quickstart/#post-a-multipart-encoded-file\n    let filesString = \"files = list(\\n\";\n    filesString += request.multipartUploads\n        .map((m) => {\n        let fileParam;\n        if (\"contentFile\" in m) {\n            // filesString += \"    \" + reprBacktick(multipartKey) + \" (\" + repr(fileName) + \", upload_file(\" + repr(fileName) + \"))\";\n            fileParam =\n                \"  \" +\n                    reprBacktick(m.name) +\n                    \" = upload_file(\" +\n                    repr(m.contentFile) +\n                    \")\";\n        }\n        else {\n            fileParam = \"  \" + reprBacktick(m.name) + \" = \" + repr(m.content) + \"\";\n        }\n        return fileParam;\n    })\n        .join(\",\\n\");\n    filesString += \"\\n)\\n\";\n    return filesString;\n}\nexport function _toR(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const cookieDict = getCookieDict(request);\n    let headerDict;\n    if (request.headers.length) {\n        const hels = [];\n        headerDict = \"headers = c(\\n\";\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue !== null) {\n                hels.push(\"  \" + reprBacktick(headerName) + \" = \" + repr(headerValue));\n            }\n        }\n        headerDict += hels.join(\",\\n\");\n        headerDict += \"\\n)\\n\";\n    }\n    const queryList = getQueryList(request);\n    let dataString;\n    let dataIsList;\n    let filesString;\n    if (request.multipartUploads) {\n        filesString = getFilesString(request);\n    }\n    else if (request.data) {\n        if (request.data.startsWith(\"@\") && !request.isDataRaw) {\n            const filePath = request.data.slice(1);\n            dataString = \"data = upload_file(\" + repr(filePath) + \")\";\n        }\n        else {\n            const [parsedQueryString] = parseQueryString(request.data);\n            // repeat to satisfy type checker\n            dataIsList = parsedQueryString && parsedQueryString.length;\n            if (dataIsList) {\n                dataString = \"data = list(\\n\";\n                dataString += parsedQueryString\n                    .map((q) => {\n                    const [key, value] = q;\n                    return \"  \" + reprBacktick(key) + \" = \" + repr(value);\n                })\n                    .join(\",\\n\");\n                dataString += \"\\n)\\n\";\n            }\n            else {\n                dataString = \"data = \" + repr(request.data) + \"\\n\";\n            }\n        }\n    }\n    const url = request.urls[0].queryList\n        ? request.urls[0].urlWithoutQueryList\n        : request.urls[0].url;\n    let requestLine = \"res <- httr::\";\n    // TODO: GET() and HEAD() don't support sending data, detect and use VERB() instead\n    if ([\"GET\", \"HEAD\", \"PATCH\", \"PUT\", \"DELETE\", \"POST\"].includes(request.urls[0].method.toString())) {\n        requestLine += request.urls[0].method.toString() + \"(\";\n    }\n    else {\n        requestLine += \"VERB(\" + repr(request.urls[0].method) + \", \";\n        if (!eq(request.urls[0].method, request.urls[0].method.toUpperCase())) {\n            warnings.push([\n                \"non-uppercase-method\",\n                \"httr will uppercase the method: \" +\n                    JSON.stringify(request.urls[0].method.toString()),\n            ]);\n        }\n    }\n    requestLine += \"url = \" + repr(url);\n    let requestLineBody = \"\";\n    if (headerDict) {\n        requestLineBody += \", httr::add_headers(.headers=headers)\";\n    }\n    if (request.urls[0].queryList) {\n        requestLineBody += \", query = params\";\n    }\n    if (cookieDict) {\n        requestLineBody += \", httr::set_cookies(.cookies = cookies)\";\n    }\n    if (request.multipartUploads) {\n        requestLineBody += ', body = files, encode = \"multipart\"';\n    }\n    else if (request.data) {\n        requestLineBody += \", body = data\";\n        if (dataIsList) {\n            requestLineBody += ', encode = \"form\"';\n        }\n    }\n    if (request.insecure) {\n        requestLineBody += \", config = httr::config(ssl_verifypeer = FALSE)\";\n    }\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        requestLineBody +=\n            \", httr::authenticate(\" + repr(user) + \", \" + repr(password) + \")\";\n    }\n    requestLineBody += \")\";\n    requestLine += requestLineBody;\n    let rstatsCode = \"\";\n    rstatsCode += \"library(httr)\\n\\n\";\n    if (cookieDict) {\n        rstatsCode += cookieDict + \"\\n\";\n    }\n    if (headerDict) {\n        rstatsCode += headerDict + \"\\n\";\n    }\n    if (queryList !== undefined) {\n        rstatsCode += queryList + \"\\n\";\n    }\n    if (dataString) {\n        rstatsCode += dataString + \"\\n\";\n    }\n    else if (filesString) {\n        rstatsCode += filesString + \"\\n\";\n    }\n    rstatsCode += requestLine;\n    return rstatsCode + \"\\n\";\n}\nexport function toRWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const rHttr = _toR(requests, warnings);\n    return [rHttr, warnings];\n}\nexport function toR(curlCommand) {\n    return toRWarn(curlCommand)[0];\n}\n//# sourceMappingURL=httr.js.map","import { Word, eq } from \"../../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { wordDecodeURIComponent, parseQueryString } from \"../../Query.js\";\nimport { reprBacktick, reprStr, repr, toNumeric } from \"./httr.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"insecure\",\n    \"no-insecure\",\n    \"oauth2-bearer\",\n    \"max-redirs\",\n    \"max-time\",\n    \"connect-timeout\",\n    \"retry\",\n    \"retry-max-time\",\n]);\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction getCookieList(request, warnings) {\n    if (!request.cookies) {\n        return [];\n    }\n    const cookieList = [];\n    for (const [key, value] of request.cookies) {\n        try {\n            // httr2 percent-encodes cookie values\n            const decoded = wordDecodeURIComponent(value.replace(/\\+/g, \" \"));\n            cookieList.push([key, decoded]);\n        }\n        catch (_a) {\n            warnings.push([\n                \"cookie-decoding error\",\n                \"Cookie could not be decoded\\n\\n\" + value.toString(),\n            ]);\n        }\n    }\n    request.headers.delete(\"Cookie\");\n    return cookieList;\n}\nfunction getQueryList(request) {\n    return request.urls[0].queryList || [];\n}\nfunction getHeaderList(request) {\n    const headerList = [];\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue !== null) {\n                headerList.push([headerName, headerValue]);\n            }\n        }\n    }\n    return headerList;\n}\nfunction getMultipartParams(request) {\n    if (!request.multipartUploads) {\n        return undefined;\n    }\n    const parts = request.multipartUploads.map((m) => {\n        let content;\n        if (\"contentFile\" in m) {\n            content = `curl::form_file(${repr(m.contentFile)})`;\n        }\n        else {\n            content = repr(m.content);\n        }\n        return [m.name, content];\n    });\n    return parts;\n}\nfunction addBodyStep(steps, request, contentType) {\n    if (request.multipartUploads) {\n        const params = getMultipartParams(request);\n        return addCurlStep(steps, \"req_body_multipart\", [], params);\n    }\n    if (!request.data) {\n        return steps;\n    }\n    if (request.data.startsWith(\"@\") && !request.isDataRaw) {\n        const filePath = request.data.slice(1);\n        steps = addCurlStep(steps, \"req_body_file\", [repr(filePath)]);\n    }\n    else {\n        const [parsedQueryString] = parseQueryString(request.data);\n        const dataIsList = parsedQueryString && parsedQueryString.length;\n        if (dataIsList) {\n            steps = addCurlStep(steps, \"req_body_form\", [], parsedQueryString);\n        }\n        else {\n            contentType = contentType || \"application/x-www-form-urlencoded\";\n            steps = addCurlStep(steps, \"req_body_raw\", [repr(request.data)], [[\"type\", reprStr(contentType)]]);\n        }\n    }\n    // TODO: json\n    return steps;\n}\nfunction addCurlStep(steps, f, mainArgs, dots = [], keepIfEmpty = false) {\n    const dotArgs = dots.map((dot) => {\n        let [name, value] = dot;\n        if (value instanceof Word) {\n            value = repr(value);\n        }\n        if (name === \"\" || (name instanceof Word && name.isEmpty())) {\n            return value;\n        }\n        if (name instanceof Word) {\n            name = reprBacktick(name);\n        }\n        return `${name} = ${value}`;\n    });\n    const args = mainArgs.concat(...dotArgs);\n    if (args.length === 0 && !keepIfEmpty) {\n        return steps;\n    }\n    let newStep;\n    if (dots.length === 0 || args.length === 1) {\n        const argsString = args.join(\", \");\n        newStep = `${f}(${argsString})`;\n    }\n    else {\n        const indent = \"    \";\n        const argsString = args.join(`,\\n${indent}`);\n        newStep = `${f}(\\n${indent}${argsString}\\n  )`;\n    }\n    return steps.concat(newStep);\n}\nexport function _toRHttr2(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    // const cookieList = getCookieList(request, warnings);\n    const queryList = getQueryList(request);\n    const contentType = request.headers.getContentType();\n    request.headers.delete(\"Content-Type\");\n    if (request.oauth2Bearer && request.authType === \"bearer\") {\n        request.headers.delete(\"Authorization\");\n    }\n    const headerList = getHeaderList(request);\n    const url = request.urls[0].queryList\n        ? request.urls[0].urlWithoutQueryList\n        : request.urls[0].url;\n    const method = request.urls[0].method;\n    if (!eq(method, method.toUpperCase())) {\n        warnings.push([\n            \"non-uppercase-method\",\n            \"httr will uppercase the method: \" + JSON.stringify(method.toString()),\n        ]);\n    }\n    let steps = [`request(${repr(url)})`];\n    if (method.toString() != \"GET\") {\n        steps = addCurlStep(steps, \"req_method\", [repr(method)]);\n    }\n    steps = addCurlStep(steps, \"req_url_query\", [], queryList);\n    steps = addCurlStep(steps, \"req_headers\", [], headerList);\n    // TODO: use `req_cookie_set()` once it is added\n    // https://github.com/r-lib/httr2/issues/369\n    // steps = addCurlStep(steps, \"req_headers\", [], cookieList);\n    // TODO: support cookies from file?\n    steps = addBodyStep(steps, request, contentType);\n    if (request.urls[0].auth && request.authType === \"basic\") {\n        const [user, password] = request.urls[0].auth;\n        steps = addCurlStep(steps, \"req_auth_basic\", [repr(user), repr(password)]);\n    }\n    else if (request.oauth2Bearer && request.authType === \"bearer\") {\n        steps = addCurlStep(steps, \"req_auth_bearer_token\", [\n            repr(request.oauth2Bearer),\n        ]);\n    }\n    // TODO: req_oauth_auth_code\n    if (request.proxy) {\n        const url = request.proxy.toString();\n        addCurlStep(steps, \"req_proxy\", [url]);\n    }\n    if (request.timeout) {\n        // TODO: parse float/int\n        steps = addCurlStep(steps, \"req_timeout\", [toNumeric(request.timeout)]);\n    }\n    // TODO: all curl options could be supported here, like in the C generator\n    const curlOptions = [];\n    if (request.insecure) {\n        curlOptions.push([\"ssl_verifypeer\", \"0\"]);\n    }\n    if (request.maxRedirects !== undefined) {\n        curlOptions.push([\"maxredirs\", toNumeric(request.maxRedirects)]);\n    }\n    if (request.connectTimeout) {\n        // TODO: parse float/int\n        curlOptions.push([\"connecttimeout\", toNumeric(request.connectTimeout)]);\n    }\n    steps = addCurlStep(steps, \"req_options\", [], curlOptions);\n    const retryOptions = [];\n    if (request.retry) {\n        retryOptions.push([\"max_tries\", toNumeric(request.retry)]);\n    }\n    if (request.retryMaxTime) {\n        retryOptions.push([\"max_seconds\", toNumeric(request.retryMaxTime)]);\n    }\n    steps = addCurlStep(steps, \"req_retry\", [], retryOptions);\n    const performArgs = [];\n    // TODO: add test\n    if (request.verbose) {\n        performArgs.push([\"verbosity\", \"1\"]);\n    }\n    steps = addCurlStep(steps, \"req_perform\", [], performArgs, true);\n    let rstatsCode = \"library(httr2)\\n\\n\";\n    rstatsCode += steps.join(\" |>\\n  \");\n    return rstatsCode + \"\\n\";\n}\nexport function toRHttr2Warn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const rHttr = _toRHttr2(requests, warnings);\n    return [rHttr, warnings];\n}\nexport function toRHttr2(curlCommand) {\n    return toRHttr2Warn(curlCommand)[0];\n}\n//# sourceMappingURL=httr2.js.map","import { warnIfPartsIgnored } from \"../../Warnings.js\";\nimport { Word, eq } from \"../../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\nimport { repr, reprSymbol, objToRuby, queryToRubyDict } from \"./ruby.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"digest\",\n    \"no-digest\",\n    \"form\",\n    \"form-string\",\n    \"http0.9\",\n    \"http1.0\",\n    \"http1.1\",\n    \"insecure\",\n    \"output\",\n    \"upload-file\",\n    \"next\",\n]);\nfunction getDataString(request) {\n    if (!request.data) {\n        return [\"\", false];\n    }\n    if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        const { filetype, filename } = request.dataArray[0];\n        if (eq(filename, \"-\")) {\n            if (filetype === \"binary\") {\n                // TODO: read stdin in binary\n                // https://ruby-doc.org/core-2.3.0/IO.html#method-i-binmode\n                // TODO: .delete(\"\\\\r\\\\n\") ?\n                return ['body = STDIN.read.delete(\"\\\\n\")\\n', false];\n            }\n            else {\n                return ['body = STDIN.read.delete(\"\\\\n\")\\n', false];\n            }\n        }\n        switch (filetype) {\n            case \"binary\":\n                return [\n                    // TODO: What's the difference between binread() and read()?\n                    // TODO: .delete(\"\\\\r\\\\n\") ?\n                    \"body = File.binread(\" + repr(filename) + ').delete(\"\\\\n\")\\n',\n                    false,\n                ];\n            case \"data\":\n            case \"json\":\n                return [\n                    \"body = File.read(\" + repr(filename) + ').delete(\"\\\\n\")\\n',\n                    false,\n                ];\n            case \"urlencode\":\n                // TODO: urlencode\n                return [\n                    \"body = File.read(\" + repr(filename) + ').delete(\"\\\\n\")\\n',\n                    false,\n                ];\n        }\n    }\n    const contentTypeHeader = request.headers.get(\"content-type\");\n    const isJson = contentTypeHeader &&\n        eq(contentTypeHeader.split(\";\")[0].trim(), \"application/json\");\n    if (isJson && request.data.isString()) {\n        try {\n            const dataAsStr = request.data.toString();\n            const dataAsJson = JSON.parse(dataAsStr);\n            if (typeof dataAsJson === \"object\" && dataAsJson !== null) {\n                // TODO: we actually want to know how it's serialized by Ruby's builtin\n                // JSON formatter but this is hopefully good enough.\n                const roundtrips = JSON.stringify(dataAsJson) === dataAsStr;\n                let code = \"\";\n                if (!roundtrips) {\n                    code += \"# The object won't be serialized exactly like this\\n\";\n                    code += \"# body = \" + repr(request.data) + \"\\n\";\n                }\n                code += \"body = \" + objToRuby(dataAsJson) + \".to_json\\n\";\n                return [code, true];\n            }\n        }\n        catch (_a) { }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, queryAsDict] = parseQueryString(request.data);\n    if (!request.isDataBinary && queryAsDict) {\n        // If the original request contained %20, Ruby will encode them as \"+\"\n        return [\"body = \" + queryToRubyDict(queryAsDict) + \"\\n\", false];\n    }\n    return [\"body = \" + repr(request.data) + \"\\n\", false];\n}\nexport function getFilesString(request, warnings) {\n    if (!request.multipartUploads) {\n        return [\"\", false];\n    }\n    // If body contains an open file, HTTParty will send the entire request as a\n    // multipart form\n    let explicitMultipart = true;\n    let body = \"body = {\\n\";\n    for (const m of request.multipartUploads) {\n        body += \"  \" + reprSymbol(m.name) + \": \";\n        if (\"filename\" in m && m.filename && repr(m.filename)) {\n            warnings.push([\n                \"multipart-filename\",\n                \"Ruby's HTTParty does not support custom filenames for multipart uploads: \" +\n                    JSON.stringify(m.filename.toString()),\n            ]);\n        }\n        if (\"contentFile\" in m) {\n            if (eq(m.contentFile, \"-\")) {\n                if (request.stdinFile) {\n                    body += \"File.open(\" + repr(request.stdinFile) + \")\";\n                    explicitMultipart = false;\n                }\n                else if (request.stdin) {\n                    body += repr(request.stdin);\n                }\n                // TODO: does this work?\n                body += \"STDIN\";\n                // explicitMultipart = false;\n            }\n            else if (m.contentFile === m.filename) {\n                // TODO: curl will look at the file extension to determine each content-type\n                body += \"File.open(\" + repr(m.contentFile) + \")\";\n                explicitMultipart = false;\n            }\n            else {\n                body += \"File.open(\" + repr(m.contentFile) + \")\";\n                explicitMultipart = false;\n            }\n        }\n        else {\n            body += repr(m.content);\n        }\n        body += \"\\n\";\n    }\n    body += \"}\\n\";\n    return [body, explicitMultipart];\n}\nfunction requestToRubyHttparty(request, warnings, imports) {\n    warnIfPartsIgnored(request, warnings, { dataReadsFile: true });\n    if (request.dataReadsFile &&\n        request.dataArray &&\n        request.dataArray.length &&\n        (request.dataArray.length > 1 ||\n            (!(request.dataArray[0] instanceof Word) && request.dataArray[0].name))) {\n        warnings.push([\n            \"unsafe-data\",\n            \"the generated data content is wrong, \" +\n                // TODO: might not come from \"@\"\n                JSON.stringify(\"@\" + request.dataReadsFile) +\n                \" means read the file \" +\n                JSON.stringify(request.dataReadsFile),\n        ]);\n    }\n    let code = \"\";\n    let partyCode = \"\";\n    const methods = [\n        \"GET\",\n        \"HEAD\",\n        \"POST\",\n        \"PATCH\",\n        \"PUT\",\n        \"PROPPATCH\",\n        \"LOCK\",\n        \"UNLOCK\",\n        \"OPTIONS\",\n        \"PROPFIND\",\n        \"DELETE\",\n        \"MOVE\",\n        \"COPY\",\n        \"MKCOL\",\n        \"TRACE\",\n    ];\n    code += \"url = \" + repr(request.urls[0].url) + \"\\n\";\n    const method = request.urls[0].method;\n    const methodStr = method.toString();\n    if (method.isString() && methods.includes(methodStr.toUpperCase())) {\n        partyCode += \"res = HTTParty.\" + methodStr.toLowerCase() + \"(url\";\n        if (methodStr !== methodStr.toUpperCase()) {\n            warnings.push([\n                \"method-case\",\n                \"HTTP method will be uppercased: \" + methodStr,\n            ]);\n        }\n    }\n    else {\n        warnings.push([\n            \"unsupported-method\",\n            \"unsupported HTTP method: \" + methodStr,\n        ]);\n        partyCode += `res = HTTParty.get(url`;\n    }\n    if (request.urls[0].auth && [\"basic\", \"digest\"].includes(request.authType)) {\n        if (request.authType === \"basic\") {\n            partyCode += \", basic_auth: auth\";\n        }\n        else if (request.authType === \"digest\") {\n            partyCode += \", digest_auth: auth\";\n        }\n        code +=\n            \"auth = { username: \" +\n                repr(request.urls[0].auth[0]) +\n                \", password: \" +\n                repr(request.urls[0].auth[1]) +\n                \"}\\n\";\n    }\n    let reqBody;\n    let explicitMultipart = false;\n    if (request.urls[0].uploadFile) {\n        if (eq(request.urls[0].uploadFile, \"-\") ||\n            eq(request.urls[0].uploadFile, \".\")) {\n            reqBody = \"body = STDIN.read\\n\";\n        }\n        else {\n            reqBody = \"body = File.read(\" + repr(request.urls[0].uploadFile) + \")\\n\";\n        }\n    }\n    else if (request.data) {\n        let importJson = false;\n        [reqBody, importJson] = getDataString(request);\n        if (importJson) {\n            imports.add(\"json\");\n        }\n    }\n    else if (request.multipartUploads) {\n        [reqBody, explicitMultipart] = getFilesString(request, warnings);\n        const contentType = request.headers.get(\"content-type\");\n        if (explicitMultipart &&\n            contentType &&\n            contentType.isString() &&\n            contentType.toString() === \"multipart/form-data\") {\n            request.headers.delete(\"content-type\");\n        }\n    }\n    if (request.headers.length) {\n        partyCode += \", headers: headers\";\n        code += \"headers = {\\n\";\n        for (const [headerName, headerValue] of request.headers) {\n            if ([\"accept-encoding\", \"content-length\"].includes(headerName.toLowerCase().toString())) {\n                code += \"# \";\n            }\n            // TODO: nil?\n            code +=\n                \"  \" +\n                    repr(headerName) +\n                    \": \" +\n                    repr(headerValue !== null && headerValue !== void 0 ? headerValue : new Word(\"nil\")) +\n                    \",\\n\";\n        }\n        code += \"}\\n\";\n    }\n    if (reqBody) {\n        code += reqBody;\n        if (explicitMultipart) {\n            partyCode += \", multipart: true\";\n        }\n        if (request.dataArray &&\n            request.dataArray.length === 1 &&\n            !(request.dataArray[0] instanceof Word) &&\n            !request.dataArray[0].name) {\n            const { filetype } = request.dataArray[0];\n            if (filetype === \"binary\") {\n                partyCode += \", body_stream: body\";\n            }\n            else {\n                partyCode += \", body: body\";\n            }\n        }\n        else {\n            partyCode += \", body: body\";\n        }\n    }\n    if (request.insecure) {\n        partyCode += \", verify: false\";\n    }\n    partyCode += \")\\n\";\n    code += partyCode;\n    if (request.urls[0].output && !eq(request.urls[0].output, \"/dev/null\")) {\n        if (eq(request.urls[0].output, \"-\")) {\n            code += \"\\nputs res.body\\n\";\n        }\n        else {\n            code += \"\\nFile.write(\" + repr(request.urls[0].output) + \", res.body)\\n\";\n        }\n    }\n    return code;\n}\nexport function _toRubyHttparty(requests, warnings = []) {\n    const imports = new Set();\n    const code = requests\n        .map((r) => requestToRubyHttparty(r, warnings, imports))\n        .join(\"\\n\\n\");\n    let prelude = \"require 'httparty'\\n\";\n    for (const imp of Array.from(imports).sort()) {\n        prelude += \"require '\" + imp + \"'\\n\";\n    }\n    return prelude + \"\\n\" + code;\n}\nexport function toRubyHttpartyWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const ruby = _toRubyHttparty(requests, warnings);\n    return [ruby, warnings];\n}\nexport function toRubyHttparty(curlCommand) {\n    return toRubyHttpartyWarn(curlCommand)[0];\n}\n//# sourceMappingURL=httparty.js.map","import { CCError, has } from \"../../utils.js\";\nimport { warnIfPartsIgnored } from \"../../Warnings.js\";\nimport { Word, eq } from \"../../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../../parse.js\";\nimport { parseQueryString } from \"../../Query.js\";\n// https://ruby-doc.org/stdlib-2.7.0/libdoc/net/http/rdoc/Net/HTTP.html\n// https://github.com/ruby/net-http/tree/master/lib/net\n// https://github.com/augustl/net-http-cheat-sheet\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"http0.9\",\n    \"http1.0\",\n    \"http1.1\",\n    \"insecure\",\n    \"no-digest\",\n    \"no-http0.9\",\n    \"no-insecure\",\n    \"output\",\n    \"proxy\",\n    \"proxy-user\",\n    \"upload-file\",\n    \"next\",\n]);\n// https://docs.ruby-lang.org/en/3.1/syntax/literals_rdoc.html#label-Strings\nconst regexSingleEscape = /'|\\\\/gu;\nconst regexDoubleEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]|#[{@$]/gu;\nconst regexCurlyEscape = /\\}|\\\\|\\p{C}|[^ \\P{Z}]|#[{@$]/gu; // TODO: escape { ?\nconst regexDigit = /[0-9]/;\nexport function reprStr(s, quote) {\n    if (quote === undefined) {\n        quote = \"'\";\n        if (s.match(/\\p{C}|[^ \\P{Z}]/gu) || (s.includes(\"'\") && !s.includes('\"'))) {\n            quote = '\"';\n        }\n    }\n    const regexEscape = quote === \"'\"\n        ? regexSingleEscape\n        : quote === '\"'\n            ? regexDoubleEscape\n            : regexCurlyEscape;\n    const startQuote = quote[0];\n    const endQuote = quote === \"{}\" ? quote[1] : quote[0];\n    return (startQuote +\n        s.replace(regexEscape, (c, index, string) => {\n            switch (c[0]) {\n                case \"\\x07\":\n                    return \"\\\\a\";\n                case \"\\b\":\n                    return \"\\\\b\";\n                case \"\\f\":\n                    return \"\\\\f\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\v\":\n                    return \"\\\\v\";\n                case \"\\x1B\":\n                    return \"\\\\e\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"'\":\n                    return \"\\\\'\";\n                case '\"':\n                    return '\\\\\"';\n                case \"#\":\n                    return \"\\\\\" + c;\n                case \"}\":\n                    return \"\\\\}\";\n                case \"\\0\":\n                    // \\0 is null but \\01 would be an octal escape\n                    if (!regexDigit.test(string.charAt(index + 1))) {\n                        return \"\\\\0\";\n                    }\n                    break;\n            }\n            const codePoint = c.codePointAt(0);\n            const hex = codePoint.toString(16);\n            if (hex.length <= 2 && codePoint < 0x7f) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            if (hex.length <= 4) {\n                return \"\\\\u\" + hex.padStart(4, \"0\");\n            }\n            return \"\\\\u{\" + hex + \"}\";\n        }) +\n        endQuote);\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"ENV[\" + reprStr(t.value) + \"]\");\n        }\n        else {\n            args.push(\"%x\" + reprStr(t.value, \"{}\"));\n        }\n    }\n    return args.join(\" + \");\n}\n// https://gist.github.com/misfo/1072693 but simplified\nfunction validSymbol(s) {\n    // TODO: can also start with @ $ and end with ! = ? are those special?\n    return s.isString() && /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(s.toString());\n}\nexport function reprSymbol(s) {\n    if (!validSymbol(s)) {\n        return repr(s);\n    }\n    return s.toString();\n}\nexport function objToRuby(obj, indent = 0) {\n    if (obj instanceof Word) {\n        return repr(obj);\n    }\n    switch (typeof obj) {\n        case \"string\":\n            return reprStr(obj);\n        case \"number\":\n            return obj.toString();\n        case \"boolean\":\n            return obj ? \"true\" : \"false\";\n        case \"object\":\n            if (obj === null) {\n                return \"nil\";\n            }\n            if (Array.isArray(obj)) {\n                if (obj.length === 0) {\n                    return \"[]\";\n                }\n                else {\n                    let s = \"[\\n\";\n                    for (const [i, item] of obj.entries()) {\n                        s += \" \".repeat(indent + 2) + objToRuby(item, indent + 2);\n                        s += i === obj.length - 1 ? \"\\n\" : \",\\n\";\n                    }\n                    s += \" \".repeat(indent) + \"]\";\n                    return s;\n                }\n            }\n            else {\n                if (Object.keys(obj).length === 0) {\n                    return \"{}\";\n                }\n                let s = \"{\\n\";\n                const objEntries = Object.entries(obj);\n                for (const [i, [k, v]] of objEntries.entries()) {\n                    // reprStr() because JSON keys must be strings.\n                    s +=\n                        \" \".repeat(indent + 2) +\n                            reprStr(k) +\n                            \" => \" +\n                            objToRuby(v, indent + 2);\n                    s += i === objEntries.length - 1 ? \"\\n\" : \",\\n\";\n                }\n                s += \" \".repeat(indent) + \"}\";\n                return s;\n            }\n        default:\n            throw new CCError(\"unexpected object type that shouldn't appear in JSON: \" + typeof obj);\n    }\n}\nexport function queryToRubyDict(q, indent = 0) {\n    if (q.length === 0) {\n        return \"{}\";\n    }\n    let s = \"{\\n\";\n    for (const [i, [k, v]] of q.entries()) {\n        s += \" \".repeat(indent + 2) + repr(k) + \" => \" + objToRuby(v, indent + 2);\n        s += i === q.length - 1 ? \"\\n\" : \",\\n\";\n    }\n    s += \" \".repeat(indent) + \"}\";\n    return s;\n}\nexport function getDataString(request) {\n    if (!request.data) {\n        return [\"\", false];\n    }\n    if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        const { filetype, filename } = request.dataArray[0];\n        if (eq(filename, \"-\")) {\n            if (filetype === \"binary\") {\n                // TODO: read stdin in binary\n                // https://ruby-doc.org/core-2.3.0/IO.html#method-i-binmode\n                // TODO: .delete(\"\\\\r\\\\n\") ?\n                return ['req.body = STDIN.read.delete(\"\\\\n\")\\n', false];\n            }\n            else {\n                return ['req.body = STDIN.read.delete(\"\\\\n\")\\n', false];\n            }\n        }\n        switch (filetype) {\n            case \"binary\":\n                return [\n                    // TODO: What's the difference between binread() and read()?\n                    // TODO: .delete(\"\\\\r\\\\n\") ?\n                    \"req.body = File.binread(\" + repr(filename) + ').delete(\"\\\\n\")\\n',\n                    false,\n                ];\n            case \"data\":\n            case \"json\":\n                return [\n                    \"req.body = File.read(\" + repr(filename) + ').delete(\"\\\\n\")\\n',\n                    false,\n                ];\n            case \"urlencode\":\n                // TODO: urlencode\n                return [\n                    \"req.body = File.read(\" + repr(filename) + ').delete(\"\\\\n\")\\n',\n                    false,\n                ];\n        }\n    }\n    const contentTypeHeader = request.headers.get(\"content-type\");\n    const isJson = contentTypeHeader &&\n        eq(contentTypeHeader.split(\";\")[0].trim(), \"application/json\");\n    if (isJson && request.data.isString()) {\n        try {\n            const dataAsStr = request.data.toString();\n            const dataAsJson = JSON.parse(dataAsStr);\n            if (typeof dataAsJson === \"object\" && dataAsJson !== null) {\n                // TODO: we actually want to know how it's serialized by Ruby's builtin\n                // JSON formatter but this is hopefully good enough.\n                const roundtrips = JSON.stringify(dataAsJson) === dataAsStr;\n                let code = \"\";\n                if (!roundtrips) {\n                    code += \"# The object won't be serialized exactly like this\\n\";\n                    code += \"# req.body = \" + repr(request.data) + \"\\n\";\n                }\n                code += \"req.body = \" + objToRuby(dataAsJson) + \".to_json\\n\";\n                return [code, true];\n            }\n        }\n        catch (_a) { }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, queryAsDict] = parseQueryString(request.data);\n    if (!request.isDataBinary && queryAsDict) {\n        // If the original request contained %20, Ruby will encode them as \"+\"\n        return [\"req.set_form_data(\" + queryToRubyDict(queryAsDict) + \")\\n\", false];\n    }\n    return [\"req.body = \" + repr(request.data) + \"\\n\", false];\n}\nexport function getFilesString(request) {\n    if (!request.multipartUploads) {\n        return \"\";\n    }\n    const multipartUploads = request.multipartUploads.map((m) => {\n        // https://github.com/psf/requests/blob/2d5517682b3b38547634d153cea43d48fbc8cdb5/requests/models.py#L117\n        //\n        // net/http's multipart syntax looks like this:\n        // [[name, file, {filename: filename}]]\n        const name = repr(m.name); // TODO: what if name is empty string?\n        const sentFilename = \"filename\" in m && m.filename && repr(m.filename);\n        if (\"contentFile\" in m) {\n            if (eq(m.contentFile, \"-\")) {\n                if (request.stdinFile) {\n                    return [\n                        name,\n                        \"File.open(\" + repr(request.stdinFile) + \")\",\n                        sentFilename,\n                    ];\n                }\n                else if (request.stdin) {\n                    return [name, repr(request.stdin), sentFilename];\n                }\n                // TODO: does this work?\n                return [name, \"STDIN\", sentFilename];\n            }\n            else if (m.contentFile === m.filename) {\n                // TODO: curl will look at the file extension to determine each content-type\n                return [name, \"File.open(\" + repr(m.contentFile) + \")\"];\n            }\n            return [name, \"File.open(\" + repr(m.contentFile) + \")\", sentFilename];\n        }\n        return [name, repr(m.content), sentFilename];\n    });\n    let filesString = \"req.set_form(\\n\";\n    if (multipartUploads.length === 0) {\n        filesString += \"  [],\\n\";\n    }\n    else {\n        filesString += \"  [\\n\";\n        for (const [i, [name, content, filename]] of multipartUploads.entries()) {\n            filesString += \"    [\\n\";\n            filesString += \"      \" + name + \",\\n\";\n            filesString += \"      \" + content;\n            if (typeof filename === \"string\") {\n                filesString += \",\\n\";\n                filesString += \"      {filename: \" + filename + \"}\\n\";\n            }\n            else {\n                filesString += \"\\n\";\n            }\n            if (i === multipartUploads.length - 1) {\n                filesString += \"    ]\\n\";\n            }\n            else {\n                filesString += \"    ],\\n\";\n            }\n        }\n        filesString += \"  ],\\n\";\n    }\n    // TODO: what if there's other stuff in the content type?\n    filesString += \"  'multipart/form-data'\\n\";\n    // TODO: charset\n    filesString += \")\\n\";\n    return filesString;\n}\nfunction requestToRuby(request, warnings, imports) {\n    warnIfPartsIgnored(request, warnings, { dataReadsFile: true });\n    if (request.dataReadsFile &&\n        request.dataArray &&\n        request.dataArray.length &&\n        (request.dataArray.length > 1 ||\n            (!(request.dataArray[0] instanceof Word) && request.dataArray[0].name))) {\n        warnings.push([\n            \"unsafe-data\",\n            \"the generated data content is wrong, \" +\n                // TODO: might not come from \"@\"\n                JSON.stringify(\"@\" + request.dataReadsFile) +\n                \" means read the file \" +\n                JSON.stringify(request.dataReadsFile),\n        ]);\n    }\n    let code = \"\";\n    const methods = {\n        GET: \"Get\",\n        HEAD: \"Head\",\n        POST: \"Post\",\n        PATCH: \"Patch\",\n        PUT: \"Put\",\n        PROPPATCH: \"Proppatch\",\n        LOCK: \"Lock\",\n        UNLOCK: \"Unlock\",\n        OPTIONS: \"Options\",\n        PROPFIND: \"Propfind\",\n        DELETE: \"Delete\",\n        MOVE: \"Move\",\n        COPY: \"Copy\",\n        MKCOL: \"Mkcol\",\n        TRACE: \"Trace\",\n    };\n    if (request.urls[0].queryDict &&\n        request.urls[0].queryDict.every((q) => validSymbol(q[0]))) {\n        code += \"uri = URI(\" + repr(request.urls[0].urlWithoutQueryList) + \")\\n\";\n        code += \"params = {\\n\";\n        for (const [key, value] of request.urls[0].queryDict) {\n            // TODO: warn that %20 becomes +\n            code += \"  :\" + key.toString() + \" => \" + objToRuby(value, 2) + \",\\n\";\n        }\n        code += \"}\\n\";\n        code += \"uri.query = URI.encode_www_form(params)\\n\\n\";\n    }\n    else {\n        code += \"uri = URI(\" + repr(request.urls[0].url) + \")\\n\";\n    }\n    const simple = !(request.headers.length ||\n        request.urls[0].auth ||\n        request.multipartUploads ||\n        request.data ||\n        request.urls[0].uploadFile ||\n        request.insecure ||\n        request.proxy ||\n        request.urls[0].output);\n    const method = request.urls[0].method;\n    if (method.isString() && has(methods, method.toString())) {\n        if (method.toString() === \"GET\" && simple) {\n            code += \"res = Net::HTTP.get_response(uri)\\n\";\n            return code;\n        }\n        else {\n            code += \"req = Net::HTTP::\" + methods[method.toString()] + \".new(uri)\\n\";\n        }\n    }\n    else {\n        code +=\n            \"req = Net::HTTPGenericRequest.new(\" +\n                repr(request.urls[0].method) +\n                \", true, true, uri)\\n\";\n    }\n    if (request.urls[0].auth && request.authType === \"basic\") {\n        code +=\n            \"req.basic_auth \" +\n                repr(request.urls[0].auth[0]) +\n                \", \" +\n                repr(request.urls[0].auth[1]) +\n                \"\\n\";\n    }\n    let reqBody;\n    if (request.urls[0].uploadFile) {\n        if (eq(request.urls[0].uploadFile, \"-\") ||\n            eq(request.urls[0].uploadFile, \".\")) {\n            reqBody = \"req.body = STDIN.read\\n\";\n        }\n        else {\n            reqBody =\n                \"req.body = File.read(\" + repr(request.urls[0].uploadFile) + \")\\n\";\n        }\n    }\n    else if (request.multipartUploads) {\n        reqBody = getFilesString(request);\n        request.headers.delete(\"content-type\");\n    }\n    else if (request.data) {\n        let importJson = false;\n        [reqBody, importJson] = getDataString(request);\n        if (importJson) {\n            imports.add(\"json\");\n        }\n    }\n    const contentType = request.headers.get(\"content-type\");\n    if (contentType !== null && contentType !== undefined) {\n        // If the content type has stuff after the content type, like\n        // application/x-www-form-urlencoded; charset=UTF-8\n        // then we generate misleading code here because the charset won't be sent.\n        code += \"req.content_type = \" + repr(contentType) + \"\\n\";\n        request.headers.delete(\"content-type\");\n    }\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            if ([\"accept-encoding\", \"content-length\"].includes(headerName.toLowerCase().toString())) {\n                code += \"# \";\n            }\n            // TODO: nil?\n            code +=\n                \"req[\" +\n                    repr(headerName) +\n                    \"] = \" +\n                    repr(headerValue !== null && headerValue !== void 0 ? headerValue : new Word(\"nil\")) +\n                    \"\\n\";\n        }\n    }\n    if (reqBody) {\n        code += \"\\n\" + reqBody;\n    }\n    code += \"\\n\";\n    if (request.proxy) {\n        const proxy = request.proxy.includes(\"://\")\n            ? request.proxy\n            : request.proxy.prepend(\"http://\");\n        code += \"proxy = URI(\" + repr(proxy) + \")\\n\";\n    }\n    code += \"req_options = {\\n\";\n    code += \"  use_ssl: uri.scheme == 'https'\";\n    if (request.insecure) {\n        imports.add(\"openssl\");\n        code += \",\\n\";\n        code += \"  verify_mode: OpenSSL::SSL::VERIFY_NONE\\n\";\n    }\n    else {\n        code += \"\\n\";\n    }\n    code += \"}\\n\";\n    if (!request.proxy) {\n        code +=\n            \"res = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|\\n\";\n    }\n    else {\n        if (request.proxyAuth) {\n            const [proxyUser, proxyPassword] = request.proxyAuth.split(\":\", 2);\n            code +=\n                \"res = Net::HTTP.start(uri.hostname, uri.port, proxy.hostname, proxy.port, \" +\n                    repr(proxyUser) +\n                    \", \" +\n                    repr(proxyPassword || \"\") +\n                    \", req_options) do |http|\\n\";\n        }\n        else {\n            code +=\n                \"res = Net::HTTP.new(uri.hostname, uri.port, proxy.hostname, proxy.port, req_options).start do |http|\\n\";\n        }\n    }\n    code += \"  http.request(req)\\n\";\n    code += \"end\";\n    if (request.urls[0].output && !eq(request.urls[0].output, \"/dev/null\")) {\n        if (eq(request.urls[0].output, \"-\")) {\n            code += \"\\nputs res.body\";\n        }\n        else {\n            code += \"\\nFile.write(\" + repr(request.urls[0].output) + \", res.body)\";\n        }\n    }\n    return code + \"\\n\";\n}\nexport function _toRuby(requests, warnings = []) {\n    const imports = new Set();\n    const code = requests\n        .map((r) => requestToRuby(r, warnings, imports))\n        .join(\"\\n\\n\");\n    let prelude = \"require 'net/http'\\n\";\n    for (const imp of Array.from(imports).sort()) {\n        prelude += \"require '\" + imp + \"'\\n\";\n    }\n    return prelude + \"\\n\" + code;\n}\nexport function toRubyWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const ruby = _toRuby(requests, warnings);\n    return [ruby, warnings];\n}\nexport function toRuby(curlCommand) {\n    return toRubyWarn(curlCommand)[0];\n}\n//# sourceMappingURL=ruby.js.map","import { eq } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"form\",\n    \"form-string\",\n    \"max-redirs\",\n    \"location\",\n    \"no-location\",\n    // \"location-trusted\",\n    // \"no-location-trusted\",\n]);\nconst INDENTATION = \" \".repeat(4);\nfunction indent(line, level = 1) {\n    return INDENTATION.repeat(level) + line;\n}\n// https://doc.rust-lang.org/reference/tokens.html\nconst regexEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c) => {\n            switch (c) {\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\0\":\n                    return \"\\\\0\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            const hex = c.codePointAt(0).toString(16);\n            if (hex.length <= 2) {\n                return \"\\\\x\" + hex.padStart(2, \"0\");\n            }\n            return \"\\\\u{\" + hex + \"}\";\n        }) +\n        '\"');\n}\nexport function repr(w, imports) {\n    const ret = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            ret.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            ret.push(\"env::var(\" + reprStr(t.value) + ').unwrap_or(\"\")');\n            imports.add(\"std::env\");\n        }\n        else {\n            // TODO: tokenize subcommand\n            // .new() is only passed the command name, args are given with .arg().arg() or .args([])\n            ret.push(\"Command::new(\" + reprStr(t.value) + \").output().stdout\");\n            imports.add(\"std::process::Command\");\n        }\n    }\n    if (ret.length === 1) {\n        return ret[0];\n    }\n    return \"[\" + ret.join(\", \") + \"].concat()\";\n}\nexport function _toRust(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    const imports = new Set();\n    const lines = [];\n    lines.push(\"\", \"fn main() -> Result<(), Box<dyn std::error::Error>> {\");\n    if (request.headers.length) {\n        lines.push(indent(\"let mut headers = header::HeaderMap::new();\"));\n        const headerEnum = {\n            cookie: \"header::COOKIE\",\n        };\n        for (const [headerName, headerValue] of request.headers) {\n            const enumValue = headerEnum[headerName.toLowerCase().toString()];\n            const name = enumValue || `\"${headerName}\"`;\n            if (headerValue !== null) {\n                lines.push(indent(`headers.insert(${name}, ${repr(headerValue, imports)}.parse().unwrap());`));\n            }\n        }\n        lines.push(\"\");\n    }\n    if (request.multipartUploads) {\n        lines.push(indent(\"let form = multipart::Form::new()\"));\n        const parts = request.multipartUploads.map((m) => {\n            if (\"contentFile\" in m) {\n                return indent(`.file(${repr(m.name, imports)}, ${repr(m.contentFile, imports)})?`, 2);\n            }\n            return indent(`.text(${repr(m.name, imports)}, ${repr(m.content, imports)})`, 2);\n        });\n        parts[parts.length - 1] += \";\";\n        lines.push(...parts, \"\");\n    }\n    if (!request.followRedirects) {\n        lines.push(indent(\"let client = reqwest::blocking::Client::builder()\"));\n        lines.push(indent(\".redirect(reqwest::redirect::Policy::none())\", 2));\n        lines.push(indent(\".build()\", 2));\n        lines.push(indent(\".unwrap();\", 2));\n    }\n    else if (typeof request.maxRedirects === \"undefined\") {\n        // Curl's default is following 50 redirects, reqwest's is 10\n        lines.push(indent(\"let client = reqwest::blocking::Client::new();\"));\n    }\n    else {\n        lines.push(indent(\"let client = reqwest::blocking::Client::builder()\"));\n        if (eq(request.maxRedirects, \"-1\")) {\n            lines.push(indent(\".redirect(reqwest::redirect::Policy::custom(|attempt| { attempt.follow() }))\", 2));\n        }\n        else {\n            // Insert the --max-redirs value as-is, hoping it's a valid integer\n            lines.push(indent(\".redirect(reqwest::redirect::Policy::limited(\" +\n                request.maxRedirects.trim().toString() +\n                \"))\", 2));\n        }\n        lines.push(indent(\".build()\", 2));\n        lines.push(indent(\".unwrap();\", 2));\n    }\n    const reqwestMethods = [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\"];\n    if (reqwestMethods.includes(request.urls[0].method.toString())) {\n        lines.push(indent(`let res = client.${request.urls[0].method.toLowerCase()}(${repr(request.urls[0].url, imports)})`));\n    }\n    else {\n        lines.push(indent(`let res = client.request(${repr(request.urls[0].method, imports)}, ${repr(request.urls[0].url, imports)})`));\n    }\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        lines.push(indent(`.basic_auth(${repr(user, imports)}, Some(${repr(password, imports)}))`, 2));\n    }\n    if (request.headers.length) {\n        lines.push(indent(\".headers(headers)\", 2));\n    }\n    if (request.multipartUploads) {\n        lines.push(indent(\".multipart(form)\", 2));\n    }\n    else if (request.data) {\n        if (request.data && request.data.indexOf(\"\\n\") !== -1) {\n            // Use raw strings for multiline content\n            lines.push(indent('.body(r#\"', 2), request.data.toString(), // TODO: this is wrong\n            '\"#', indent(\")\", 2));\n        }\n        else {\n            lines.push(indent(`.body(${repr(request.data, imports)})`, 2));\n        }\n    }\n    lines.push(indent(\".send()?\", 2), indent(\".text()?;\", 2), indent('println!(\"{}\", res);'), \"\", indent(\"Ok(())\"), \"}\");\n    const preambleLines = [\"extern crate reqwest;\"];\n    {\n        // Generate imports.\n        const imports = [\n            { want: \"header\", condition: !!request.headers.length },\n            { want: \"blocking::multipart\", condition: !!request.multipartUploads },\n        ]\n            .filter((i) => i.condition)\n            .map((i) => i.want);\n        if (imports.length > 1) {\n            preambleLines.push(`use reqwest::{${imports.join(\", \")}};`);\n        }\n        else if (imports.length) {\n            preambleLines.push(`use reqwest::${imports[0]};`);\n        }\n    }\n    for (const imp of Array.from(imports).sort()) {\n        preambleLines.push(\"use \" + imp + \";\");\n    }\n    return [...preambleLines, ...lines].join(\"\\n\") + \"\\n\";\n}\nexport function toRustWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const rust = _toRust(requests, warnings);\n    return [rust, warnings];\n}\nexport function toRust(curlCommand) {\n    return toRustWarn(curlCommand)[0];\n}\n//# sourceMappingURL=rust.js.map","import { eq, mergeWords } from \"../shell/Word.js\";\nimport { parse, getFirst, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([...COMMON_SUPPORTED_ARGS, \"max-time\"]);\n// https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters/\nconst regexEscape = /\"|\\\\|\\p{C}|[^ \\P{Z}]/gu;\nexport function reprStr(s) {\n    return ('\"' +\n        s.replace(regexEscape, (c) => {\n            switch (c) {\n                case \"\\x00\":\n                    return \"\\\\0\";\n                case \"\\\\\":\n                    return \"\\\\\\\\\";\n                case \"\\t\":\n                    return \"\\\\t\";\n                case \"\\n\":\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case '\"':\n                    return '\\\\\"';\n            }\n            const hex = c.codePointAt(0).toString(16);\n            return \"\\\\u{\" + hex + \"}\";\n        }) +\n        '\"');\n}\nexport function repr(w) {\n    const args = [];\n    for (const t of w.tokens) {\n        if (typeof t === \"string\") {\n            args.push(reprStr(t));\n        }\n        else if (t.type === \"variable\") {\n            args.push(\"(ProcessInfo.processInfo.environment[\" + reprStr(t.value) + '] ?? \"\")');\n        }\n        else {\n            args.push(\"exec(\" + reprStr(t.value) + \")\");\n            // TODO: add exec()\n        }\n    }\n    return args.join(\" + \");\n}\nfunction reprJson(data, indent = 0) {\n    if (typeof data === \"string\") {\n        return reprStr(data);\n    }\n    else if (typeof data === \"number\") {\n        return data.toString();\n    }\n    else if (typeof data === \"boolean\") {\n        return data ? \"true\" : \"false\";\n    }\n    else if (data === null) {\n        return \"nil\";\n    }\n    else if (Array.isArray(data)) {\n        if (data.length === 0) {\n            return \"[]\";\n        }\n        let code = \"[\\n\";\n        for (const item of data) {\n            code += \"    \".repeat(indent + 1) + reprJson(item, indent + 1) + \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        code += \"    \".repeat(indent) + \"]\";\n        return code;\n    }\n    else if (typeof data === \"object\") {\n        const entries = Object.entries(data);\n        if (entries.length === 0) {\n            return \"[:]\";\n        }\n        let code = \"[\\n\";\n        for (const [key, value] of entries) {\n            code +=\n                \"    \".repeat(indent + 1) +\n                    reprStr(key) +\n                    \": \" +\n                    reprJson(value, indent + 1) +\n                    \",\\n\";\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        code += \"    \".repeat(indent) + \"]\";\n        return code;\n    }\n    else {\n        throw new Error(\"Unsupported JSON type: \" + typeof data);\n    }\n}\nfunction formatData(request, data) {\n    const contentType = request.headers.getContentType();\n    if (contentType === \"application/x-www-form-urlencoded\" && data.isString()) {\n        const [first, ...rest] = data.split(\"&\");\n        let code = \"let data = NSMutableData(data: \" +\n            repr(first) +\n            \".data(using: .utf8)!)\\n\";\n        for (const part of rest) {\n            code +=\n                \"data.append(\" +\n                    repr(mergeWords(\"&\", part)) +\n                    \".data(using: .utf8)!)\\n\";\n        }\n        return [code, \"request.httpBody = data as Data\\n\"];\n    }\n    else if (contentType === \"application/json\" && data.isString()) {\n        const dataStr = data.toString();\n        let parsed;\n        try {\n            parsed = JSON.parse(dataStr);\n            const roundtrips = JSON.stringify(parsed) === dataStr;\n            // Only convert arrays and {} to Swift types\n            if (Array.isArray(parsed) ||\n                (typeof parsed === \"object\" && parsed !== null)) {\n                let code = \"\";\n                code += \"let jsonData = \" + reprJson(parsed);\n                if (Array.isArray(parsed)) {\n                    // TODO: narrow type\n                    code += \" as [Any]\\n\";\n                }\n                else {\n                    code += \" as [String : Any]\\n\";\n                }\n                code +=\n                    \"let data = try! JSONSerialization.data(withJSONObject: jsonData, options: [])\\n\";\n                if (!roundtrips) {\n                    code += \"// let data = \" + repr(data) + \".data(using: .utf8)\\n\";\n                }\n                return [code, \"request.httpBody = data as Data\\n\"];\n            }\n        }\n        catch (_a) { }\n    }\n    return [\"\", \"request.httpBody = \" + repr(data) + \".data(using: .utf8)\\n\"];\n}\nexport function _toSwift(requests, warnings = []) {\n    const request = getFirst(requests, warnings);\n    let code = \"import Foundation\\n\\n\";\n    let dataCode, dataArgCode;\n    if (request.data) {\n        [dataCode, dataArgCode] = formatData(request, request.data);\n        if (dataCode) {\n            code += dataCode + \"\\n\";\n        }\n    }\n    code += \"let url = URL(string: \" + repr(request.urls[0].url) + \")!\\n\";\n    if (request.urls[0].auth) {\n        const [username, password] = request.urls[0].auth;\n        code += \"\\n\";\n        code += \"let username = \" + repr(username) + \"\\n\";\n        code += \"let password = \" + repr(password) + \"\\n\";\n        code +=\n            'let loginString = String(format: \"\\\\(username):\\\\(password)\", username, password)\\n';\n        code += \"let loginData = loginString.data(using: String.Encoding.utf8)!\\n\";\n        code += \"let base64LoginString = loginData.base64EncodedString()\\n\";\n        code += \"\\n\";\n    }\n    if (request.headers.length || request.urls[0].auth) {\n        code += \"let headers = [\\n\";\n        for (const [headerName, headerValue] of request.headers) {\n            if (headerValue === null) {\n                continue;\n            }\n            code += \"    \" + repr(headerName) + \": \" + repr(headerValue) + \",\\n\";\n        }\n        if (request.urls[0].auth) {\n            const authHeader = request.headers.lowercase\n                ? \"authorization\"\n                : \"Authorization\";\n            code += '    \"' + authHeader + '\": \"Basic \\\\(base64LoginString)\",\\n';\n        }\n        if (code.endsWith(\",\\n\")) {\n            code = code.slice(0, -2) + \"\\n\";\n        }\n        code += \"]\\n\";\n    }\n    code += \"\\n\";\n    code += \"var request = URLRequest(url: url\";\n    if (request.timeout && !eq(request.timeout, \"60.0\")) {\n        // TODO: must be double?\n        code += \", timeoutInterval: \" + request.timeout.toString();\n    }\n    code += \")\\n\";\n    if (!eq(request.urls[0].method, \"GET\")) {\n        code += \"request.httpMethod = \" + repr(request.urls[0].method) + \"\\n\";\n    }\n    if (request.headers.length) {\n        code += \"request.allHTTPHeaderFields = headers\\n\";\n    }\n    if (dataArgCode) {\n        code += dataArgCode;\n    }\n    code += \"\\n\";\n    code +=\n        \"let task = URLSession.shared.dataTask(with: request) { (data, response, error) in\\n\";\n    code += \"    if let error = error {\\n\";\n    code += \"        print(error)\\n\";\n    code += \"    } else if let data = data {\\n\";\n    code += \"        let str = String(data: data, encoding: .utf8)\\n\";\n    code += '        print(str ?? \"\")\\n';\n    code += \"    }\\n\";\n    code += \"}\\n\";\n    code += \"\\n\";\n    code += \"task.resume()\\n\";\n    return code;\n}\nexport function toSwiftWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const code = _toSwift(requests, warnings);\n    return [code, warnings];\n}\nexport function toSwift(curlCommand) {\n    return toSwiftWarn(curlCommand)[0];\n}\n//# sourceMappingURL=swift.js.map","import { warnIfPartsIgnored } from \"../Warnings.js\";\nimport { Word, eq, mergeWords } from \"../shell/Word.js\";\nimport { parse, COMMON_SUPPORTED_ARGS } from \"../parse.js\";\nexport const supportedArgs = new Set([\n    ...COMMON_SUPPORTED_ARGS,\n    \"cookie-jar\",\n    \"ipv4\",\n    \"no-ipv4\",\n    \"ipv6\",\n    \"no-ipv6\",\n    \"form\", // not supported, more specific warning\n    \"form-string\",\n    \"ciphers\",\n    \"insecure\",\n    \"cert\",\n    \"cert-type\",\n    \"key\",\n    \"key-type\",\n    \"cacert\",\n    \"capath\",\n    \"crlfile\",\n    \"pinnedpubkey\",\n    \"random-file\",\n    \"egd-file\",\n    \"hsts\",\n    \"noproxy\", // not fully supported\n    \"proxy\", // not supported\n    \"proxy-user\",\n    // TODO: supported by all?\n    \"globoff\",\n    \"no-globoff\",\n    \"netrc\",\n    \"netrc-optional\",\n    \"timeout\",\n    \"connect-timeout\",\n    \"limit-rate\",\n    \"compressed\",\n    \"no-compressed\",\n    // Wget picks the auth and some it doesn't support but there's a more\n    // specific error message for those.\n    \"anyauth\",\n    \"no-anyauth\",\n    \"digest\",\n    \"no-digest\",\n    \"aws-sigv4\",\n    \"negotiate\",\n    \"no-negotiate\",\n    \"delegation\", // GSS/kerberos\n    // \"service-name\", // GSS/kerberos, not supported\n    \"ntlm\",\n    \"no-ntlm\",\n    \"ntlm-wb\",\n    \"no-ntlm-wb\",\n    \"no-digest\",\n    \"output\",\n    \"upload-file\",\n    \"continue-at\",\n    \"clobber\",\n    \"remote-time\",\n    \"keep-alive\",\n    \"silent\",\n    \"verbose\",\n    \"next\",\n]);\n// TODO: check this\n// https://www.gnu.org/software/bash/manual/html_node/Quoting.html\nconst regexDoubleEscape = /\\$|`|\"|\\\\|!/gu;\nconst unprintableChars = /\\p{C}|[^ \\P{Z}]/gu; // TODO: there's probably more\nconst regexAnsiCEscape = /\\p{C}|[^ \\P{Z}]|\\\\|'/gu;\n// https://unix.stackexchange.com/questions/270977/\nconst shellChars = /[\\x02-\\x09\\x0b-\\x1a\\\\#?`(){}[\\]^*<=>~|; \"!$&'\\x82-\\xff]/;\nexport function reprStr(s, mustQuote = false) {\n    const containsUnprintableChars = unprintableChars.test(s);\n    if (containsUnprintableChars) {\n        return (\"$'\" +\n            s.replace(regexAnsiCEscape, (c) => {\n                switch (c) {\n                    case \"\\x07\":\n                        return \"\\\\a\";\n                    case \"\\b\":\n                        return \"\\\\b\";\n                    case \"\\x1B\":\n                        return \"\\\\e\";\n                    case \"\\f\":\n                        return \"\\\\f\";\n                    case \"\\n\":\n                        return \"\\\\n\";\n                    case \"\\r\":\n                        return \"\\\\r\";\n                    case \"\\t\":\n                        return \"\\\\t\";\n                    case \"\\v\":\n                        return \"\\\\v\";\n                    case \"\\\\\":\n                        return \"\\\\\\\\\";\n                    case \"'\":\n                        return \"\\\\'\";\n                    // TODO: unnecessary?\n                    //   case '\"':\n                    //     return '\\\\\"';\n                    //   case \"?\":\n                    //     return \"\\\\?\";\n                }\n                const hex = c.codePointAt(0).toString(16);\n                if (hex.length <= 2) {\n                    return \"\\\\x\" + hex.padStart(2, \"0\");\n                }\n                if (hex.length <= 4) {\n                    return \"\\\\u\" + hex.padStart(4, \"0\");\n                }\n                return \"\\\\U\" + hex.padStart(8, \"0\");\n            }) +\n            \"'\");\n    }\n    if ((s.includes('\"') ||\n        s.includes(\"$\") ||\n        s.includes(\"`\") ||\n        s.includes(\"!\") ||\n        mustQuote) &&\n        !s.includes(\"'\")) {\n        return \"'\" + s + \"'\";\n    }\n    if (shellChars.test(s) || mustQuote) {\n        return ('\"' +\n            s.replace(regexDoubleEscape, (c) => {\n                switch (c[0]) {\n                    case \"$\":\n                        return \"\\\\$\";\n                    case \"`\":\n                        return \"\\\\`\";\n                    case '\"':\n                        return '\\\\\"';\n                    case \"\\\\\":\n                        return \"\\\\\\\\\";\n                    case \"!\":\n                        // ! might have an effect or it might not, depending on if\n                        // the command is in a file or pasted into the shell and other things.\n                        // If it's backslash escaped, the backslash is still not removed, a\n                        // safe way to escape it is to close the double quote, put the ! in\n                        // single quotes and then open the double quote again.\n                        return \"\\\"'!'\\\"\";\n                }\n                // Should never happen\n                return c;\n            }) +\n            '\"');\n    }\n    return s;\n}\nexport function repr(w) {\n    // TODO: put variables in the quotes\n    const args = [];\n    for (const [i, t] of w.tokens.entries()) {\n        if (typeof t === \"string\") {\n            // A string after a variable cannot be un-quoted\n            // After a subcommand it's usually okay but that's more complex.\n            args.push(reprStr(t, !!i));\n        }\n        else if (t.type === \"variable\") {\n            args.push(t.text);\n        }\n        else {\n            // TODO: this will probably lead to syntax errors\n            args.push(t.text);\n        }\n    }\n    return args.join(\"\");\n}\nfunction requestToWget(request, warnings) {\n    warnIfPartsIgnored(request, warnings, {\n        dataReadsFile: true,\n        cookieFiles: true,\n        multipleUrls: true,\n    });\n    if (request.dataReadsFile &&\n        request.dataArray &&\n        request.dataArray.length &&\n        (request.dataArray.length > 1 ||\n            (!(request.dataArray[0] instanceof Word) && request.dataArray[0].name))) {\n        warnings.push([\n            \"unsafe-data\",\n            \"the generated data content is wrong, \" +\n                // TODO: might not come from \"@\"\n                JSON.stringify(\"@\" + request.dataReadsFile) +\n                \" means read the file \" +\n                JSON.stringify(request.dataReadsFile),\n        ]);\n    }\n    const args = [];\n    if (request.urls[0].uploadFile ||\n        (request.dataArray &&\n            request.dataArray.length === 1 &&\n            !(request.dataArray[0] instanceof Word) &&\n            !request.dataArray[0].name) ||\n        request.data) {\n        if (!eq(request.urls[0].method, \"POST\")) {\n            args.push(\"--method=\" + repr(request.urls[0].method));\n        }\n    }\n    else if (!eq(request.urls[0].method, \"GET\")) {\n        args.push(\"--method=\" + repr(request.urls[0].method));\n    }\n    if (request.urls.length > 1) {\n        const uniqueMethods = new Set(request.urls.map((u) => u.method.toString()));\n        // TODO: add tons of checks/warnings that wget doesn't let you set things per-URL\n        if (uniqueMethods.size > 1) {\n            warnings.push([\n                \"mixed-methods\",\n                \"the input curl command uses multiple HTTP methods, which Wget doesn't support: \" +\n                    request.urls\n                        .map((u) => JSON.stringify(u.method.toString()))\n                        .join(\", \"),\n            ]);\n        }\n    }\n    if (request.cookieFiles && request.cookieFiles.length) {\n        for (const cookieFile of request.cookieFiles) {\n            args.push(\"--load-cookies=\" + repr(cookieFile));\n        }\n        if (request.cookieFiles.length > 1) {\n            const lastCookieFile = request.cookieFiles[request.cookieFiles.length - 1];\n            warnings.push([\n                \"multiple-cookie-files\",\n                \"Wget only supports reading cookies from one file, only the last one will be sent: \" +\n                    lastCookieFile.toString(),\n            ]);\n        }\n    }\n    if (request.cookieJar) {\n        args.push(\"--save-cookies=\" + repr(request.cookieJar));\n        // TODO: --keep-session-cookies\n    }\n    if (request.headers.length) {\n        for (const [headerName, headerValue] of request.headers) {\n            args.push(\"--header=\" + repr(mergeWords(headerName, \": \", headerValue !== null && headerValue !== void 0 ? headerValue : \"\")));\n            // TODO: there's also --referer, --user-agent and --content-disposition\n        }\n    }\n    if (request.compressed !== undefined) {\n        if (request.compressed) {\n            args.push(\"--compression=auto\");\n        }\n        else {\n            args.push(\"--compression=none\");\n        }\n    }\n    if (request.maxRedirects && request.maxRedirects.toString() !== \"20\") {\n        // TODO: escape/parse?\n        args.push(\"--max-redirect=\" + repr(request.maxRedirects));\n    }\n    if (request.ipv4) {\n        args.push(\"--inet4-only\");\n    }\n    if (request.ipv6) {\n        args.push(\"--inet6-only\");\n    }\n    if (request.urls[0].auth) {\n        const [user, password] = request.urls[0].auth;\n        args.push(\"--user=\" + repr(user));\n        if (password.toBool()) {\n            args.push(\"--password=\" + repr(password));\n        }\n        if (request.authType === \"basic\") {\n            args.push(\"--auth-no-challenge\");\n        }\n        if (![\"none\", \"basic\", \"digest\", \"ntlm\", \"ntlm-wb\", \"negotiate\"].includes(request.authType)) {\n            warnings.push([\n                \"wget-unsupported-auth\",\n                \"Wget doesn't support \" + request.authType + \" authentication\",\n            ]);\n        }\n    }\n    if (request.urls[0].uploadFile) {\n        if (eq(request.urls[0].uploadFile, \"-\") ||\n            eq(request.urls[0].uploadFile, \".\")) {\n            warnings.push([\n                \"wget-stdin\",\n                \"Wget does not support uploading from stdin\",\n            ]);\n        }\n        if (eq(request.urls[0].method, \"POST\")) {\n            args.push(\"--post-file=\" + repr(request.urls[0].uploadFile));\n        }\n        else {\n            args.push(\"--body-file=\" + repr(request.urls[0].uploadFile));\n        }\n    }\n    else if (request.multipartUploads) {\n        warnings.push([\n            \"multipart\",\n            \"Wget does not support sending multipart/form-data\",\n        ]);\n    }\n    else if (request.dataArray &&\n        request.dataArray.length === 1 &&\n        !(request.dataArray[0] instanceof Word) &&\n        !request.dataArray[0].name) {\n        if (eq(request.urls[0].method, \"POST\")) {\n            args.push(\"--post-file=\" + repr(request.dataArray[0].filename));\n        }\n        else {\n            args.push(\"--body-file=\" + repr(request.dataArray[0].filename));\n        }\n    }\n    else if (request.data) {\n        if (eq(request.urls[0].method, \"POST\")) {\n            args.push(\"--post-data=\" + repr(request.data));\n        }\n        else {\n            args.push(\"--body-data=\" + repr(request.data));\n        }\n    }\n    // https://www.gnu.org/software/wget/manual/html_node/HTTPS-_0028SSL_002fTLS_0029-Options.html\n    if (request.ciphers) {\n        args.push(\"--ciphers=\" + repr(request.ciphers));\n    }\n    if (request.insecure) {\n        args.push(\"--no-check-certificate\");\n    }\n    if (request.cert) {\n        const [cert, password] = request.cert;\n        args.push(\"--certificate=\" + repr(cert));\n        if (password) {\n            warnings.push([\n                \"wget-cert-password\",\n                // TODO: is this true?\n                \"Wget does not support certificate passwords\",\n            ]);\n        }\n    }\n    if (request.certType) {\n        args.push(\"--certificate-type=\" + repr(request.certType));\n    }\n    if (request.key) {\n        args.push(\"--private-key=\" + repr(request.key));\n    }\n    if (request.keyType) {\n        args.push(\"--private-key-type=\" + repr(request.keyType));\n    }\n    if (request.cacert) {\n        args.push(\"--ca-certificate=\" + repr(request.cacert));\n    }\n    if (request.capath) {\n        args.push(\"--ca-directory=\" + repr(request.capath));\n    }\n    if (request.crlfile) {\n        args.push(\"--crl-file=\" + repr(request.crlfile));\n    }\n    if (request.pinnedpubkey) {\n        args.push(\"--pinnedpubkey=\" + repr(request.pinnedpubkey));\n    }\n    if (request.randomFile) {\n        args.push(\"--random-file=\" + repr(request.randomFile));\n    }\n    if (request.egdFile) {\n        args.push(\"--egd-file=\" + repr(request.egdFile));\n    }\n    if (request.hsts) {\n        for (const hsts of request.hsts) {\n            // TODO: warn multiple won't work\n            args.push(\"--hsts-file=\" + repr(hsts));\n        }\n    }\n    // TODO: --secure-protocol\n    if (request.netrc === \"ignored\") {\n        args.push(\"--no-netrc\");\n    }\n    if (request.noproxy) {\n        if (eq(request.noproxy, \"*\")) {\n            args.push(\"--no-proxy\");\n        }\n        else {\n            warnings.push([\n                \"wget-noproxy\",\n                \"Wget does not support noproxy for specific hosts\",\n            ]);\n        }\n    }\n    if (request.proxy) {\n        warnings.push([\n            \"wget-proxy\",\n            \"Wget requires specifying proxies in environment variables: \" +\n                JSON.stringify(request.proxy.toString()),\n        ]);\n    }\n    if (request.proxyAuth) {\n        const [proxyUser, proxyPassword] = request.proxyAuth.split(\":\", 2);\n        args.push(\"--proxy-user=\" + repr(proxyUser));\n        if (proxyPassword && proxyPassword.toBool()) {\n            args.push(\"--proxy-password=\" + repr(proxyPassword));\n        }\n    }\n    if (request.timeout) {\n        // TODO: warn that this is not for the whole request\n        args.push(\"--timeout=\" + repr(request.timeout));\n    }\n    if (request.connectTimeout) {\n        args.push(\"--connect-timeout=\" + repr(request.connectTimeout));\n    }\n    // TODO: curl's --speed-limit\n    if (request.limitRate) {\n        // TODO: they probably have different syntaxes\n        args.push(\"--limit-rate=\" + repr(request.limitRate));\n    }\n    // TODO: this doesn't match up. Warn if multiple, etc.\n    if (request.urls[0].output) {\n        args.push(\"--output-document=\" + repr(request.urls[0].output));\n    }\n    else {\n        args.push(\"--output-document -\");\n    }\n    if (request.clobber === false) {\n        args.push(\"--no-clobber\");\n    }\n    // TODO: --create-dirs\n    if (request.remoteTime === false) {\n        args.push(\"--no-use-server-timestamps\");\n    }\n    if (request.continueAt) {\n        if (eq(request.continueAt, \"-\")) {\n            args.push(\"--continue\");\n        }\n        else {\n            args.push(\"--start-pos=\" + repr(request.continueAt));\n        }\n    }\n    if (request.keepAlive === false) {\n        args.push(\"--no-http-keep-alive\");\n    }\n    // This is used only for FTP by Wget, we might as well add it even\n    // though we don't support FTP.\n    if (request.globoff) {\n        // TODO: this isn't great, it has different meanings from curl to Wget\n        // TODO: don't remove \\[ and \\] from original URL?\n        args.push(\"--no-glob\");\n    }\n    // TODO:\n    // curl:\n    // --silent, --verbose, --no-verbose (the default)\n    // --progress-meter (the default), --no-progress-meter, --progress-bar\n    // --trace-ascii, --trace\n    // wget:\n    // --quiet, --verbose (the default), --no-verbose\n    // --progress=bar (the default), --progress=dot\n    // --debug\n    if (request.silent) {\n        args.push(\"--quiet\");\n    }\n    else if (request.verbose === false) {\n        args.push(\"--no-verbose\");\n    }\n    for (const url of request.urls) {\n        // TODO: wget probably has a different syntax\n        args.push(repr(url.url));\n    }\n    const multiline = args.length > 3 || args.reduce((a, b) => a + b.length, 0) > 80 - 5;\n    const joiner = multiline ? \" \\\\\\n  \" : \" \";\n    return \"wget \" + args.join(joiner) + \"\\n\";\n}\n// TODO: --verbose ?\nexport function _toWget(requests, warnings = []) {\n    return requests.map((r) => requestToWget(r, warnings)).join(\"\\n\\n\");\n}\nexport function toWgetWarn(curlCommand, warnings = []) {\n    const requests = parse(curlCommand, supportedArgs, warnings);\n    const wget = _toWget(requests, warnings);\n    return [wget, warnings];\n}\nexport function toWget(curlCommand) {\n    return toWgetWarn(curlCommand)[0];\n}\n//# sourceMappingURL=wget.js.map","import { CCError } from \"./utils.js\";\nimport { Word } from \"./shell/Word.js\";\nimport { tokenize } from \"./shell/tokenizer.js\";\nimport * as curl from \"./curl/opts.js\";\nimport { curlLongOpts, curlLongOptsShortened, curlShortOpts, } from \"./curl/opts.js\";\nimport { buildRequests } from \"./Request.js\";\nexport { COMMON_SUPPORTED_ARGS } from \"./curl/opts.js\";\nexport { getFirst } from \"./Request.js\";\nexport function clip(s, maxLength = 30) {\n    if (s.length > maxLength) {\n        return s.slice(0, maxLength - 3) + \"...\";\n    }\n    return s;\n}\nfunction findCommands(curlCommand, warnings) {\n    if (typeof curlCommand === \"string\") {\n        return tokenize(curlCommand, warnings);\n    }\n    if (curlCommand.length === 0) {\n        throw new CCError(\"no arguments provided\");\n    }\n    if (curlCommand[0].trim() !== \"curl\") {\n        throw new CCError('command should begin with \"curl\" but instead begins with ' +\n            JSON.stringify(clip(curlCommand[0])));\n    }\n    return [[curlCommand.map((arg) => new Word(arg)), undefined, undefined]];\n}\n/**\n * Accepts a string of Bash code or a tokenized argv array.\n * Returns an array of parsed curl objects.\n * @param command a string of Bash code containing at least one curl command or an\n * array of shell argument tokens (meant for passing process.argv).\n */\nexport function parse(command, supportedArgs, warnings = []) {\n    let requests = [];\n    const curlCommands = findCommands(command, warnings);\n    for (const [argv, stdin, stdinFile] of curlCommands) {\n        const [globalConfig] = curl.parseArgs(argv, curlLongOpts, curlLongOptsShortened, curlShortOpts, supportedArgs, warnings);\n        requests = requests.concat(buildRequests(globalConfig, stdin, stdinFile));\n    }\n    return requests;\n}\n//# sourceMappingURL=parse.js.map","// Words act like strings. They're lists of characters, except some\n// characters can be shell variables or expressions.\n// They're implemented like this:\n// [\"foobar\", {type: \"variable\", value: \"baz\", text: \"$baz\"}, \"qux\"]\n// Except for the empty string [\"\"], there should be no empty strings in the array.\nimport { CCError } from \"../utils.js\";\n// TODO: Words should keep a list of operations that happened to them\n// like .replace() so that we can generate code that also does that operation\n// on the contents of the environment variable or the output of the command.\nexport class Word {\n    constructor(tokens) {\n        this.valueOf = Word.toString;\n        if (typeof tokens === \"string\") {\n            tokens = [tokens];\n        }\n        if (tokens === undefined || tokens.length === 0) {\n            tokens = [\"\"];\n        }\n        this.tokens = [];\n        for (const t of tokens) {\n            if (typeof t === \"string\") {\n                if (this.tokens.length > 0 &&\n                    typeof this.tokens[this.tokens.length - 1] === \"string\") {\n                    // If we have 2+ strings in a row, merge them\n                    this.tokens[this.tokens.length - 1] += t;\n                }\n                else if (t) {\n                    // skip empty strings\n                    this.tokens.push(t);\n                }\n            }\n            else {\n                this.tokens.push(t);\n            }\n        }\n        if (this.tokens.length === 0) {\n            this.tokens.push(\"\");\n        }\n    }\n    get length() {\n        let len = 0;\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                len += t.length;\n            }\n            else {\n                len += 1;\n            }\n        }\n        return len;\n    }\n    *[Symbol.iterator]() {\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                for (const c of t) {\n                    yield c;\n                }\n            }\n            else {\n                yield t;\n            }\n        }\n    }\n    // TODO: do we need this function?\n    get(index) {\n        let i = 0;\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                if (i + t.length > index) {\n                    return t[index - i];\n                }\n                i += t.length;\n            }\n            else {\n                if (i === index) {\n                    return t;\n                }\n                i += 1;\n            }\n        }\n        throw new CCError(\"Index out of bounds\");\n    }\n    charAt(index = 0) {\n        try {\n            return this.get(index);\n        }\n        catch (_a) { }\n        return \"\";\n    }\n    indexOf(search, start) {\n        if (start === undefined) {\n            start = 0;\n        }\n        let i = 0;\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                if (i + t.length > start) {\n                    const index = t.indexOf(search, start - i);\n                    if (index !== -1) {\n                        return i + index;\n                    }\n                }\n                i += t.length;\n            }\n            else {\n                i += 1;\n            }\n        }\n        return -1;\n    }\n    // Like indexOf() but accepts a string of characters and returns the index of the first one\n    // it finds\n    indexOfFirstChar(search) {\n        let i = 0;\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                for (const c of t) {\n                    if (search.includes(c)) {\n                        return i;\n                    }\n                    i += 1;\n                }\n            }\n            else {\n                i += 1;\n            }\n        }\n        return -1;\n    }\n    removeFirstChar(c) {\n        if (this.length === 0) {\n            return new Word();\n        }\n        if (this.charAt(0) === c) {\n            return this.slice(1);\n        }\n        return this.copy();\n    }\n    copy() {\n        return new Word(this.tokens);\n    }\n    slice(indexStart, indexEnd) {\n        if (indexStart === undefined) {\n            indexStart = this.length;\n        }\n        if (indexEnd === undefined) {\n            indexEnd = this.length;\n        }\n        if (indexStart >= this.length) {\n            return new Word();\n        }\n        if (indexStart < 0) {\n            indexStart = Math.max(indexStart + this.length, 0);\n        }\n        if (indexEnd < 0) {\n            indexEnd = Math.max(indexEnd + this.length, 0);\n        }\n        if (indexEnd <= indexStart) {\n            return new Word();\n        }\n        const ret = [];\n        let i = 0;\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                if (i + t.length > indexStart) {\n                    if (i < indexEnd) {\n                        ret.push(t.slice(Math.max(indexStart - i, 0), indexEnd - i));\n                    }\n                }\n                i += t.length;\n            }\n            else {\n                if (i >= indexStart && i < indexEnd) {\n                    ret.push(t);\n                }\n                i += 1;\n            }\n        }\n        return new Word(ret);\n    }\n    // TODO: check\n    includes(search, start) {\n        if (start === undefined) {\n            start = 0;\n        }\n        let i = 0;\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                if (i + t.length > start) {\n                    if (t.includes(search, start - i)) {\n                        return true;\n                    }\n                }\n                i += t.length;\n            }\n            else {\n                i += 1;\n            }\n        }\n        return false;\n    }\n    test(search) {\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                if (search.test(t)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    prepend(c) {\n        const ret = this.copy();\n        if (ret.tokens.length && typeof ret.tokens[0] === \"string\") {\n            ret.tokens[0] = c + ret.tokens[0];\n        }\n        else {\n            ret.tokens.unshift(c);\n        }\n        return ret;\n    }\n    append(c) {\n        const ret = this.copy();\n        if (ret.tokens.length &&\n            typeof ret.tokens[ret.tokens.length - 1] === \"string\") {\n            ret.tokens[ret.tokens.length - 1] += c;\n        }\n        else {\n            ret.tokens.push(c);\n        }\n        return ret;\n    }\n    // Merges two Words\n    add(other) {\n        return new Word([...this.tokens, ...other.tokens]);\n    }\n    // Returns the first match, searches each string independently\n    // TODO: improve this\n    match(regex) {\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                const match = t.match(regex);\n                if (match) {\n                    return match;\n                }\n            }\n        }\n        return null;\n    }\n    search(regex) {\n        let offset = 0;\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                const match = t.search(regex);\n                if (match !== -1) {\n                    return offset + match;\n                }\n                offset += t.length;\n            }\n        }\n        return -1;\n    }\n    // .replace() is called per-string, so it won't work through shell variables\n    replace(search, replacement) {\n        const ret = [];\n        for (const t of this.tokens) {\n            if (typeof t === \"string\") {\n                ret.push(t.replace(search, replacement));\n            }\n            else {\n                ret.push(t);\n            }\n        }\n        return new Word(ret);\n    }\n    // splits correctly, not like String.split()\n    // The last entry can contain the separator if limit entries has been reached\n    split(separator, limit) {\n        const ret = [];\n        let i = 0;\n        let start = 0;\n        while (i < this.length) {\n            let match = true;\n            for (let j = 0; j < separator.length; j++) {\n                if (this.get(i + j) !== separator.charAt(j)) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                ret.push(this.slice(start, i));\n                i += separator.length;\n                start = i;\n                if (limit !== undefined && ret.length === limit - 1) {\n                    break;\n                }\n            }\n            else {\n                i += 1;\n            }\n        }\n        if (start <= this.length) {\n            ret.push(this.slice(start));\n        }\n        return ret;\n    }\n    toLowerCase() {\n        return new Word(this.tokens.map((t) => (typeof t === \"string\" ? t.toLowerCase() : t)));\n    }\n    toUpperCase() {\n        return new Word(this.tokens.map((t) => (typeof t === \"string\" ? t.toUpperCase() : t)));\n    }\n    trimStart() {\n        const ret = [];\n        let i, t;\n        for ([i, t] of this.tokens.entries()) {\n            if (typeof t === \"string\") {\n                if (i === 0) {\n                    t = t.trimStart();\n                }\n                if (t) {\n                    ret.push(t);\n                }\n            }\n            else {\n                ret.push(t);\n            }\n        }\n        if (ret.length === 0) {\n            return new Word();\n        }\n        return new Word(ret);\n    }\n    trimEnd() {\n        const ret = [];\n        let i, t;\n        for ([i, t] of this.tokens.entries()) {\n            if (typeof t === \"string\") {\n                if (i === this.tokens.length - 1) {\n                    t = t.trimEnd();\n                }\n                if (t) {\n                    ret.push(t);\n                }\n            }\n            else {\n                ret.push(t);\n            }\n        }\n        if (ret.length === 0) {\n            return new Word();\n        }\n        return new Word(ret);\n    }\n    trim() {\n        const ret = [];\n        let i, t;\n        for ([i, t] of this.tokens.entries()) {\n            if (typeof t === \"string\") {\n                if (i === 0) {\n                    t = t.trimStart();\n                }\n                if (i === this.tokens.length - 1) {\n                    t = t.trimEnd();\n                }\n                if (t) {\n                    ret.push(t);\n                }\n            }\n            else {\n                ret.push(t);\n            }\n        }\n        if (ret.length === 0) {\n            return new Word();\n        }\n        return new Word(ret);\n    }\n    isEmpty() {\n        if (this.tokens.length === 0) {\n            return true;\n        }\n        if (this.tokens.length === 1 && typeof this.tokens[0] === \"string\") {\n            return this.tokens[0].length === 0;\n        }\n        return false;\n    }\n    toBool() {\n        return !this.isEmpty();\n    }\n    // Returns true if .tokens contains no variables/commands\n    isString() {\n        for (const t of this.tokens) {\n            if (typeof t !== \"string\") {\n                return false;\n            }\n        }\n        return true;\n    }\n    firstShellToken() {\n        for (const t of this.tokens) {\n            if (typeof t !== \"string\") {\n                return t;\n            }\n        }\n        return null;\n    }\n    startsWith(prefix) {\n        if (this.tokens.length === 0) {\n            return false;\n        }\n        if (typeof this.tokens[0] === \"string\") {\n            return this.tokens[0].startsWith(prefix);\n        }\n        return false;\n    }\n    endsWith(suffix) {\n        if (this.tokens.length === 0) {\n            return false;\n        }\n        const lastToken = this.tokens[this.tokens.length - 1];\n        if (typeof lastToken === \"string\") {\n            return lastToken.endsWith(suffix);\n        }\n        return false;\n    }\n    // This destroys the information about the original tokenization\n    toString() {\n        return this.tokens\n            .map((t) => (typeof t === \"string\" ? t : t.text))\n            .join(\"\");\n    }\n}\nexport function eq(it, other) {\n    if (it === undefined ||\n        it === null ||\n        other === undefined ||\n        other === null) {\n        return it === other;\n    }\n    if (typeof other === \"string\") {\n        return (it.tokens.length === 1 &&\n            typeof it.tokens[0] === \"string\" &&\n            it.tokens[0] === other);\n    }\n    return (it.tokens.length === other.tokens.length &&\n        it.tokens.every((itToken, i) => {\n            const otherToken = other.tokens[i];\n            if (typeof itToken === \"string\") {\n                return itToken === otherToken;\n            }\n            else if (typeof otherToken !== \"string\") {\n                return itToken.text === otherToken.text;\n            }\n            return false;\n        }));\n}\nexport function firstShellToken(word) {\n    if (typeof word === \"string\") {\n        return null;\n    }\n    return word.firstShellToken();\n}\nexport function mergeWords(...words) {\n    const ret = [];\n    for (const w of words) {\n        if (w instanceof Word) {\n            ret.push(...w.tokens);\n        }\n        else {\n            ret.push(w);\n        }\n    }\n    return new Word(ret);\n}\nexport function joinWords(words, joinChar) {\n    const ret = [];\n    for (const w of words) {\n        if (ret.length) {\n            ret.push(joinChar);\n        }\n        ret.push(...w.tokens);\n    }\n    return new Word(ret);\n}\n//# sourceMappingURL=Word.js.map","import { Word, firstShellToken } from \"./Word.js\";\nimport { CCError } from \"../utils.js\";\nimport { clip } from \"../parse.js\";\nimport parser from \"./Parser.js\";\nimport { underlineNode, underlineCursor } from \"../Warnings.js\";\nconst BACKSLASHES = /\\\\./gs;\nfunction removeBackslash(m) {\n    return m.charAt(1) === \"\\n\" ? \"\" : m.charAt(1);\n}\nfunction removeBackslashes(str) {\n    return str.replace(BACKSLASHES, removeBackslash);\n}\n// https://www.gnu.org/software/bash/manual/bash.html#Double-Quotes\nconst DOUBLE_QUOTE_BACKSLASHES = /\\\\[\\\\$`\"\\n]/gs;\nfunction removeDoubleQuoteBackslashes(str) {\n    return str.replace(DOUBLE_QUOTE_BACKSLASHES, removeBackslash);\n}\n// ANSI-C quoted strings look $'like this'.\n// Not all shells have them but Bash does\n// https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n//\n// https://git.savannah.gnu.org/cgit/bash.git/tree/lib/sh/strtrans.c\nconst ANSI_BACKSLASHES = /\\\\(\\\\|a|b|e|E|f|n|r|t|v|'|\"|\\?|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{1,4}|U[0-9A-Fa-f]{1,8}|c.)/gs;\nfunction removeAnsiCBackslashes(str) {\n    function unescapeChar(m) {\n        switch (m.charAt(1)) {\n            case \"\\\\\":\n                return \"\\\\\";\n            case \"a\":\n                return \"\\x07\";\n            case \"b\":\n                return \"\\b\";\n            case \"e\":\n            case \"E\":\n                return \"\\x1B\";\n            case \"f\":\n                return \"\\f\";\n            case \"n\":\n                return \"\\n\";\n            case \"r\":\n                return \"\\r\";\n            case \"t\":\n                return \"\\t\";\n            case \"v\":\n                return \"\\v\";\n            case \"'\":\n                return \"'\";\n            case '\"':\n                return '\"';\n            case \"?\":\n                return \"?\";\n            case \"c\":\n                // Bash handles all characters by considering the first byte\n                // of its UTF-8 input and can produce invalid UTF-8, whereas\n                // JavaScript stores strings in UTF-16\n                if (m.codePointAt(2) > 127) {\n                    throw new CCError('non-ASCII control character in ANSI-C quoted string: \"\\\\u{' +\n                        m.codePointAt(2).toString(16) +\n                        '}\"');\n                }\n                // If this produces a 0x00 (null) character, it will cause bash to\n                // terminate the string at that character, but we return the null\n                // character in the result.\n                return m[2] === \"?\"\n                    ? \"\\x7F\"\n                    : String.fromCodePoint(m[2].toUpperCase().codePointAt(0) & 0b00011111);\n            case \"x\":\n            case \"u\":\n            case \"U\":\n                // Hexadecimal character literal\n                // Unlike bash, this will error if the the code point is greater than 10FFFF\n                return String.fromCodePoint(parseInt(m.slice(2), 16));\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n                // Octal character literal\n                return String.fromCodePoint(parseInt(m.slice(1), 8) % 256);\n            default:\n                // There must be a mis-match between ANSI_BACKSLASHES and the switch statement\n                throw new CCError(\"unhandled character in ANSI-C escape code: \" + JSON.stringify(m));\n        }\n    }\n    return str.replace(ANSI_BACKSLASHES, unescapeChar);\n}\nfunction toTokens(node, curlCommand, warnings) {\n    let vals = [];\n    switch (node.type) {\n        case \"$\":\n            // TODO: https://github.com/tree-sitter/tree-sitter-bash/issues/258\n            return [\"$\"];\n        case \"word\":\n        case \"number\":\n            // TODO: number might have a ${variable}\n            return [removeBackslashes(node.text)];\n        case \"raw_string\":\n            return [node.text.slice(1, -1)];\n        case \"ansi_c_string\":\n            return [removeAnsiCBackslashes(node.text.slice(2, -1))];\n        case \"string\":\n        case \"translated_string\": {\n            // TODO: MISSING quotes, for example\n            // curl \"example.com\n            let res = \"\";\n            for (const child of node.namedChildren) {\n                if (child.type === \"string_content\") {\n                    res += removeDoubleQuoteBackslashes(child.text);\n                }\n                else {\n                    // expansion, simple_expansion or command_substitution (or concat?)\n                    const subVal = toTokens(child, curlCommand, warnings);\n                    if (typeof subVal === \"string\") {\n                        res += subVal;\n                    }\n                    else {\n                        if (res) {\n                            vals.push(res);\n                            res = \"\";\n                        }\n                        vals = vals.concat(subVal);\n                    }\n                }\n            }\n            if (res || vals.length === 0) {\n                vals.push(res);\n            }\n            return vals;\n        }\n        case \"simple_expansion\":\n            // TODO: handle variables downstream\n            // '$' + variable_name or special_variable_name\n            warnings.push([\n                \"expansion\",\n                \"found environment variable\\n\" + underlineNode(node, curlCommand),\n            ]);\n            if (node.firstNamedChild &&\n                node.firstNamedChild.type === \"special_variable_name\") {\n                // https://www.gnu.org/software/bash/manual/bash.html#Special-Parameters\n                // TODO: warning isn't printed\n                warnings.push([\n                    \"special_variable_name\",\n                    node.text +\n                        \" is a special Bash variable\\n\" +\n                        underlineNode(node.firstNamedChild, curlCommand),\n                ]);\n            }\n            return [\n                {\n                    type: \"variable\",\n                    value: node.text.slice(1),\n                    text: node.text,\n                    syntaxNode: node,\n                },\n            ];\n        case \"expansion\":\n            // Expansions look ${like_this}\n            // https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion\n            // TODO: MISSING }, for example\n            // curl example${com\n            warnings.push([\n                \"expansion\",\n                \"found expansion expression\\n\" + underlineNode(node, curlCommand),\n            ]);\n            // variable_name or subscript or no child\n            // TODO: handle substitutions\n            return [\n                {\n                    type: \"variable\",\n                    value: node.text.slice(2, -1),\n                    text: node.text,\n                    syntaxNode: node,\n                },\n            ];\n        case \"command_substitution\":\n            // TODO: MISSING ), for example\n            // curl example$(com\n            warnings.push([\n                \"expansion\",\n                \"found command substitution expression\\n\" +\n                    underlineNode(node, curlCommand),\n            ]);\n            return [\n                {\n                    type: \"command\",\n                    // TODO: further tokenize and pass an array of args\n                    // to subprocess.run() or a command name + string args to C#\n                    value: node.text.slice(node.text.startsWith(\"$(\") ? 2 : 1, -1),\n                    text: node.text,\n                    syntaxNode: node,\n                },\n            ];\n        case \"concatenation\": {\n            // item[]=1 turns into item=1 if we don't do this\n            // https://github.com/tree-sitter/tree-sitter-bash/issues/104\n            let prevEnd = 0;\n            let res = \"\";\n            for (const child of node.children) {\n                // TODO: removeBackslashes()?\n                // Can we get anything other than []{} characters here?\n                res += node.text.slice(prevEnd, child.startIndex - node.startIndex);\n                prevEnd = child.endIndex - node.startIndex;\n                const subVal = toTokens(child, curlCommand, warnings);\n                if (typeof subVal === \"string\") {\n                    res += subVal;\n                }\n                else {\n                    if (res) {\n                        vals.push(res);\n                        res = \"\";\n                    }\n                    vals = vals.concat(subVal);\n                }\n            }\n            res += node.text.slice(prevEnd);\n            if (res || vals.length === 0) {\n                vals.push(res);\n            }\n            return vals;\n        }\n        default:\n            throw new CCError(\"unexpected syntax node type \" +\n                JSON.stringify(node.type) +\n                '. Must be one of \"word\", \"number\", \"string\", \"raw_string\", \"ansi_c_string\", \"expansion\", \"simple_expansion\", \"translated_string\", \"command_substitution\" or \"concatenation\"\\n' +\n                underlineNode(node, curlCommand));\n    }\n}\nfunction toWord(node, curlCommand, warnings) {\n    return new Word(toTokens(node, curlCommand, warnings));\n}\nfunction* traverseLookingForBadNodes(tree) {\n    const cursor = tree.walk();\n    let reachedRoot = false;\n    while (!reachedRoot) {\n        if (cursor.nodeType === \"ERROR\" || cursor.nodeIsMissing) {\n            yield cursor;\n        }\n        if (cursor.gotoFirstChild()) {\n            continue;\n        }\n        if (cursor.gotoNextSibling()) {\n            continue;\n        }\n        let retracing = true;\n        while (retracing) {\n            if (!cursor.gotoParent()) {\n                retracing = false;\n                reachedRoot = true;\n            }\n            if (cursor.gotoNextSibling()) {\n                retracing = false;\n            }\n        }\n    }\n}\nfunction warnAboutBadNodes(ast, curlCommand, warnings) {\n    const maxShown = 3;\n    let count = 0;\n    for (const badNode of traverseLookingForBadNodes(ast)) {\n        if (count < maxShown) {\n            let underlinedNode = \"\";\n            try {\n                underlinedNode = \":\\n\" + underlineCursor(badNode, curlCommand);\n            }\n            catch (_a) { }\n            const line = badNode.startPosition.row;\n            const column = badNode.startPosition.column;\n            warnings.push([\n                \"bash\",\n                `Bash parsing error on line ${line + 1}` +\n                    (column !== 0 ? `, column ${column + 1}` : \"\") +\n                    underlinedNode,\n            ]);\n        }\n        count += 1;\n    }\n    const extra = count - maxShown;\n    if (extra > 0) {\n        warnings.push([\n            \"bash\",\n            `${extra} more Bash parsing error${extra > 1 ? \"s\" : \"\"} omitted`,\n        ]);\n    }\n}\nfunction warnAboutUselessBackslash(n, curlCommandLines, warnings) {\n    const lastCommandLine = curlCommandLines[n.endPosition.row];\n    const impromperBackslash = lastCommandLine.match(/\\\\\\s+$/);\n    if (impromperBackslash &&\n        curlCommandLines.length > n.endPosition.row + 1 &&\n        impromperBackslash.index !== undefined) {\n        warnings.push([\n            \"unescaped-newline\",\n            \"The trailling '\\\\' on line \" +\n                (n.endPosition.row + 1) +\n                \" is followed by whitespace, so it won't escape the newline after it:\\n\" +\n                // TODO: cut off line if it's very long?\n                lastCommandLine +\n                \"\\n\" +\n                \" \".repeat(impromperBackslash.index) +\n                \"^\".repeat(impromperBackslash[0].length),\n        ]);\n    }\n}\nfunction extractRedirect(node, curlCommand, warnings) {\n    if (!node.namedChildCount) {\n        throw new CCError('got empty \"redirected_statement\" AST node');\n    }\n    let stdin, stdinFile;\n    const [command, ...redirects] = node.namedChildren;\n    if (command.type !== \"command\") {\n        throw new CCError('got \"redirected_statement\" AST node whose first child is not a \"command\", got ' +\n            command.type +\n            \" instead\\n\" +\n            underlineNode(command, curlCommand));\n    }\n    if (node.childCount < 2) {\n        throw new CCError('got \"redirected_statement\" AST node with only one child - no redirect');\n    }\n    if (redirects.length > 1) {\n        warnings.push([\n            \"multiple-redirects\",\n            // TODO: this is misleading because not all generators support redirects\n            \"found \" +\n                redirects.length +\n                \" redirect nodes. Only the first one will be used:\\n\" +\n                underlineNode(redirects[1], curlCommand),\n        ]);\n    }\n    const redirect = redirects[0];\n    if (redirect.type === \"file_redirect\") {\n        const destination = redirect.childForFieldName(\"destination\");\n        if (!destination) {\n            throw new CCError('got \"file_redirect\" AST node with no \"destination\" child');\n        }\n        stdinFile = toWord(destination, curlCommand, warnings);\n    }\n    else if (redirect.type === \"heredoc_redirect\") {\n        const heredocBody = redirect.descendantsOfType(\"heredoc_body\")[0];\n        if (!heredocBody) {\n            throw new CCError('got \"redirected_statement\" AST node without heredoc_body');\n        }\n        // TODO: heredocs can do variable expansion and stuff\n        stdin = new Word(heredocBody.text);\n    }\n    else if (redirect.type === \"herestring_redirect\") {\n        // TODO: herestring_redirect can be in a command node\n        // https://github.com/tree-sitter/tree-sitter-bash/issues/260\n        if (redirect.namedChildCount < 1 || !redirect.firstNamedChild) {\n            throw new CCError('got \"redirected_statement\" AST node with empty herestring');\n        }\n        stdin = toWord(redirect.firstNamedChild, curlCommand, warnings);\n    }\n    else {\n        throw new CCError('got \"redirected_statement\" AST node whose second child is not one of \"file_redirect\", \"heredoc_redirect\" or \"herestring_redirect\", got ' +\n            command.type +\n            \" instead\");\n    }\n    return [command, stdin, stdinFile];\n}\nfunction _findCurlInPipeline(node, curlCommand, warnings) {\n    let command, stdin, stdinFile;\n    for (const child of node.namedChildren) {\n        if (child.type === \"command\") {\n            const commandName = child.namedChildren[0];\n            if (commandName.type !== \"command_name\") {\n                throw new CCError('got \"command\" AST node whose first child is not a \"command_name\", got ' +\n                    commandName.type +\n                    \" instead\\n\" +\n                    underlineNode(commandName, curlCommand));\n            }\n            const commandNameWord = commandName.namedChildren[0];\n            if (commandNameWord.type !== \"word\") {\n                throw new CCError('got \"command_name\" AST node whose first child is not a \"word\", got ' +\n                    commandNameWord.type +\n                    \" instead\\n\" +\n                    underlineNode(commandNameWord, curlCommand));\n            }\n            if (commandNameWord.text === \"curl\") {\n                if (!command) {\n                    command = child;\n                }\n                else {\n                    warnings.push([\n                        \"multiple-curl-in-pipeline\",\n                        \"found multiple curl commands in pipeline:\\n\" +\n                            underlineNode(child, curlCommand),\n                    ]);\n                }\n            }\n        }\n        else if (child.type === \"redirected_statement\") {\n            const [redirCommand, redirStdin, redirStdinFile] = extractRedirect(child, curlCommand, warnings);\n            if (redirCommand.namedChildren[0].text === \"curl\") {\n                if (!command) {\n                    [command, stdin, stdinFile] = [\n                        redirCommand,\n                        redirStdin,\n                        redirStdinFile,\n                    ];\n                }\n                else {\n                    warnings.push([\n                        \"multiple-curl-in-pipeline\",\n                        \"found multiple curl commands in pipeline:\\n\" +\n                            underlineNode(redirCommand, curlCommand),\n                    ]);\n                }\n            }\n        }\n        else if (child.type === \"pipeline\") {\n            // pipelines can be nested\n            // https://github.com/tree-sitter/tree-sitter-bash/issues/167\n            const [nestedCommand, nestedStdin, nestedStdinFile] = _findCurlInPipeline(child, curlCommand, warnings);\n            if (!nestedCommand) {\n                continue;\n            }\n            if (nestedCommand.namedChildren[0].text === \"curl\") {\n                if (!command) {\n                    [command, stdin, stdinFile] = [\n                        nestedCommand,\n                        nestedStdin,\n                        nestedStdinFile,\n                    ];\n                }\n                else {\n                    warnings.push([\n                        \"multiple-curl-in-pipeline\",\n                        \"found multiple curl commands in pipeline:\\n\" +\n                            underlineNode(nestedCommand, curlCommand),\n                    ]);\n                }\n            }\n        }\n    }\n    return [command, stdin, stdinFile];\n}\n// TODO: use pipeline input/output redirects,\n// i.e. add stdinCommand and stdout/stdoutFile/stdoutCommand\nfunction findCurlInPipeline(node, curlCommand, warnings) {\n    const [command, stdin, stdinFile] = _findCurlInPipeline(node, curlCommand, warnings);\n    if (!command) {\n        throw new CCError(\"could not find curl command in pipeline\\n\" +\n            underlineNode(node, curlCommand));\n    }\n    return [command, stdin, stdinFile];\n}\n// TODO: check entire AST for ERROR/MISSING nodes\n// TODO: get all command nodes\nfunction extractCommandNodes(ast, curlCommand, warnings) {\n    // https://github.com/tree-sitter/tree-sitter-bash/blob/master/grammar.js\n    // The AST must be in a nice format, i.e.\n    // (program\n    //   (command\n    //     name: (command_name (word))\n    //     argument+: (\n    //       word |\n    //       \"string\" |\n    //       'raw_string' |\n    //       $'ansi_c_string' |\n    //       $\"translated_string\" |\n    //       ${expansion} |\n    //       $simple_expansion |\n    //       concatenation)))\n    // or\n    // (program\n    //   (redirected_statement\n    //     body: (command, same as above)\n    //     redirect))\n    // Shouldn't happen.\n    if (ast.rootNode.type !== \"program\") {\n        // TODO: better error message.\n        throw new CCError(\n        // TODO: expand \"AST\" acronym the first time it appears in an error message\n        'expected a \"program\" top-level AST node, got ' +\n            ast.rootNode.type +\n            \" instead\");\n    }\n    if (ast.rootNode.namedChildCount < 1 || !ast.rootNode.namedChildren) {\n        // TODO: better error message.\n        throw new CCError('empty \"program\" node');\n    }\n    const curlCommandLines = curlCommand.split(\"\\n\");\n    let sawComment = false;\n    const commands = [];\n    // Get top-level command and redirected_statement AST nodes, skipping comments\n    for (const n of ast.rootNode.namedChildren) {\n        switch (n.type) {\n            case \"comment\":\n                sawComment = true;\n                continue;\n            case \"command\":\n                commands.push([n, undefined, undefined]);\n                warnAboutUselessBackslash(n, curlCommandLines, warnings);\n                break;\n            case \"redirected_statement\":\n                commands.push(extractRedirect(n, curlCommand, warnings));\n                warnAboutUselessBackslash(n, curlCommandLines, warnings);\n                break;\n            case \"pipeline\":\n                commands.push(findCurlInPipeline(n, curlCommand, warnings));\n                warnAboutUselessBackslash(n, curlCommandLines, warnings);\n                break;\n            case \"heredoc_body\": // https://github.com/tree-sitter/tree-sitter-bash/issues/118\n                continue;\n            case \"ERROR\":\n                throw new CCError(`Bash parsing error on line ${n.startPosition.row + 1}:\\n` +\n                    underlineNode(n, curlCommand));\n            default:\n                // TODO: better error message.\n                throw new CCError(\"found \" +\n                    JSON.stringify(n.type) +\n                    ' AST node, only \"command\", \"pipeline\" or \"redirected_statement\" are supported\\n' +\n                    underlineNode(n, curlCommand));\n        }\n    }\n    if (!commands.length) {\n        // NOTE: if you add more node types in the `for` loop above, this error needs to be updated.\n        // We would probably need to keep track of the node types we've seen.\n        throw new CCError('expected a \"command\" or \"redirected_statement\" AST node' +\n            (sawComment ? ', only found \"comment\" nodes' : \"\"));\n    }\n    return commands;\n}\nfunction toNameAndArgv(command, curlCommand, warnings) {\n    if (command.childCount < 1) {\n        // TODO: better error message.\n        throw new CCError('empty \"command\" node\\n' + underlineNode(command, curlCommand));\n    }\n    // TODO: warn about leading variable_assignment s\n    const name = command.childForFieldName(\"name\");\n    const args = command.childrenForFieldName(\"argument\");\n    // TODO: find if one changes stdin\n    // const redirects = command.childrenForFieldName(\"redirect\");\n    if (!name) {\n        throw new CCError('found \"command\" AST node with no \"command_name\" child\\n' +\n            underlineNode(command, curlCommand));\n    }\n    return [name, args];\n}\n// Checks that name is \"curl\"\nfunction nameToWord(name, curlCommand, warnings) {\n    if (name.childCount < 1 || !name.firstChild) {\n        throw new CCError('found empty \"command_name\" AST node\\n' +\n            underlineNode(name, curlCommand));\n    }\n    else if (name.childCount > 1) {\n        warnings.push([\n            \"extra-command_name-children\",\n            'expected \"command_name\" node to only have one child but it has ' +\n                name.childCount,\n        ]);\n    }\n    const nameNode = name.firstChild;\n    const nameWord = toWord(nameNode, curlCommand, warnings);\n    const nameWordStr = nameWord.toString();\n    const cmdNameShellToken = firstShellToken(nameWord);\n    if (cmdNameShellToken) {\n        // The most common reason for the command name to contain an expression\n        // is probably users accidentally copying a $ from the shell prompt\n        // without a space after it\n        if (nameWordStr !== \"$curl\") {\n            // TODO: or just assume it evaluates to \"curl\"?\n            throw new CCError(\"expected command name to be a simple value but found a \" +\n                cmdNameShellToken.type +\n                \"\\n\" +\n                underlineNode(cmdNameShellToken.syntaxNode, curlCommand));\n        }\n    }\n    else if (nameWordStr.trim() !== \"curl\") {\n        const c = nameWordStr.trim();\n        if (!c) {\n            throw new CCError(\"found command without a command_name\\n\" +\n                underlineNode(nameNode, curlCommand));\n        }\n        throw new CCError('command should begin with \"curl\" but instead begins with ' +\n            JSON.stringify(clip(c)) +\n            \"\\n\" +\n            underlineNode(nameNode, curlCommand));\n    }\n    return nameWord;\n}\nexport function tokenize(curlCommand, warnings = []) {\n    const ast = parser.parse(curlCommand);\n    warnAboutBadNodes(ast, curlCommand, warnings);\n    // TODO: pass syntax nodes for each token downstream and use it to\n    // highlight the problematic parts in warnings/errors so that it's clear\n    // which command a warning/error is for\n    // TODO: could even go further and pass all start/end indexes of all\n    // values all the way through the conversion so when you mouse over a part of\n    // the generated Python code we could highlight the part of the curl command\n    // that it came from.\n    const commandNodes = extractCommandNodes(ast, curlCommand, warnings);\n    const commands = [];\n    for (const [command, stdin, stdinFile] of commandNodes) {\n        const [name, argv] = toNameAndArgv(command, curlCommand, warnings);\n        commands.push([\n            [\n                nameToWord(name, curlCommand, warnings),\n                ...argv.map((arg) => toWord(arg, curlCommand, warnings)),\n            ],\n            stdin,\n            stdinFile,\n        ]);\n    }\n    return commands;\n}\n//# sourceMappingURL=tokenizer.js.map","// This file replaces Parser.ts when curlconverter is running in the browser.\nimport Parser from \"web-tree-sitter\";\n// NOTE: top-level await requires Safari 15+\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#browser_compatibility\nawait Parser.init({\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    locateFile(scriptName, scriptDirectory) {\n        return \"js/\" + scriptName;\n    },\n});\nconst Bash = await Parser.Language.load(\"js/tree-sitter-bash.wasm\");\nconst parser = new Parser();\nparser.setLanguage(Bash);\nexport default parser;\n//# sourceMappingURL=webParser.js.map","export class CCError extends Error {\n}\nexport const UTF8encoder = new TextEncoder();\n// Note: !has() will lead to type errors\n// TODO: replace with Object.hasOwn() once Node 16 is EOL'd on 2023-09-11\nexport function has(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n// Node.js 14 doesn't have btoa() and later Node.js versions deprecated it\nexport function btoa(str) {\n    if (typeof window === \"undefined\" || !window.btoa) {\n        return Buffer.from(str, \"utf8\").toString(\"base64\");\n    }\n    else {\n        return window.btoa(str);\n    }\n}\nexport function isInt(s) {\n    return /^\\s*[+-]?\\d+$/.test(s);\n}\n//# sourceMappingURL=utils.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(393);\n"],"names":["object","hasOwnProperty","forOwn","callback","key","call","fourHexEscape","hex","slice","hexadecimal","code","lowercase","toString","toUpperCase","isArray","Array","singleEscapes","regexSingleEscape","regexDigit","regexWhitespace","escapeEverythingRegex","escapeNonAsciiRegex","jsesc","argument","options","increaseIndentation","oldIndent","indent","indentLevel","repeat","defaults","json","destination","source","quotes","wrap","value","quote","compact","lowercaseHex","inline1","__inline1__","inline2","__inline2__","newLine","result","isEmpty","useBinNumbers","numbers","useOctNumbers","useDecNumbers","useHexNumbers","toJSON","isMap","size","from","isSet","Buffer","isBuffer","length","array","index","forEach","push","join","isNumber","isObject","JSON","stringify","String","regex","escapeEverything","replace","char","pair","lone","quoteChar","string","minimal","first","charCodeAt","second","es6","test","charAt","isScriptContext","version","module","exports","assertPath","path","TypeError","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","i","lastSlashIndex","lastIndexOf","posix","resolve","cwd","resolvedPath","resolvedAbsolute","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","joined","arg","relative","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","dir","root","base","name","_format","parse","ret","delimiter","win32","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","noop","nextTick","args","prototype","apply","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","umask","Module","ENVIRONMENT_IS_WEB","window","ENVIRONMENT_IS_WORKER","importScripts","ENVIRONMENT_IS_NODE","node","TreeSitter","initPromise","document","currentScript","Parser","constructor","initialize","init","moduleOptions","Object","assign","Promise","resolveInitPromise","moduleOverrides","arguments_","thisProgram","quit_","status","toThrow","scriptDirectory","readAsync","readBinary","locateFile","fs","nodePath","__dirname","filename","isFileURI","URL","readFileSync","binary","reject","readFile","err","data","buffer","exitCode","self","location","href","src","startsWith","substr","url","xhr","XMLHttpRequest","open","responseType","send","Uint8Array","onload","response","onerror","fetch","credentials","then","ok","arrayBuffer","console","log","bind","error","dynamicLibraries","wasmBinary","wasmMemory","ABORT","EXITSTATUS","HEAP8","HEAPU8","HEAP16","HEAPU16","HEAP32","HEAPU32","HEAPF32","HEAPF64","HEAP_DATA_VIEW","updateMemoryViews","b","DataView","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","INITIAL_MEMORY","WebAssembly","Memory","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","__RELOC_FUNCS__","runtimeInitialized","preRun","addOnPreRun","shift","callRuntimeCallbacks","initRuntime","preMain","postRun","addOnPostRun","cb","unshift","addOnInit","runDependencies","runDependencyWatcher","dependenciesFulfilled","getUniqueRunDependency","id","addRunDependency","removeRunDependency","clearInterval","abort","what","RuntimeError","dataURIPrefix","isDataURI","wasmBinaryFile","findWasmBinary","f","getBinarySync","file","getBinaryPromise","binaryFile","instantiateArrayBuffer","imports","receiver","instantiate","reason","instantiateAsync","instantiateStreaming","getWasmImports","wasmImports","Proxy","GOTHandler","createWasm","info","receiveInstance","instance","wasmExports","relocateExports","metadata","getDylinkMetadata","neededDynlibs","mergeLibSymbols","LDSO","loadDylibs","ASM_CONSTS","ExitStatus","message","GOT","currentModuleWeakSymbols","Set","get","obj","symName","rtn","Global","has","required","LE_HEAP_LOAD_F32","byteOffset","getFloat32","LE_HEAP_LOAD_F64","getFloat64","LE_HEAP_LOAD_I16","getInt16","LE_HEAP_LOAD_I32","getInt32","LE_HEAP_LOAD_U32","getUint32","LE_HEAP_STORE_F32","setFloat32","LE_HEAP_STORE_F64","setFloat64","LE_HEAP_STORE_I16","setInt16","LE_HEAP_STORE_I32","setInt32","LE_HEAP_STORE_U32","setUint32","callbacks","UTF8Decoder","TextDecoder","UTF8ArrayToString","heapOrArray","idx","maxBytesToRead","endIdx","endPtr","decode","subarray","str","u0","u1","u2","fromCharCode","ch","offset","getLEB","mul","byte","getString","failIf","condition","dylinkSection","customSections","int32View","section_size","customSection","tlsExports","weakImports","memorySize","memoryAlign","tableSize","tableAlign","neededDynlibsCount","libname","subsectionType","subsectionSize","count","symname","add","getValue","ptr","type","endsWith","newDSO","handle","syms","dso","refcount","Infinity","global","loadedLibsByName","loadedLibsByHandle","___heap_base","zeroMemory","address","fill","alignMemory","alignment","Math","ceil","getMemory","_malloc","isInternalSym","includes","uleb128Encode","n","target","sigToWasmTypes","sig","typeNames","parameters","results","generateFuncType","sigRet","sigParam","typeCodes","convertJsFunctionToWasm","func","Function","typeSectionBody","bytes","Instance","wasmTableMirror","wasmTable","Table","getWasmTableEntry","funcPtr","updateTableMap","functionsInTableMap","item","set","getFunctionAddress","WeakMap","freeTableIndexes","getEmptyTableSlot","pop","grow","RangeError","setWasmTableEntry","addFunction","wrapped","updateGOT","split","memoryBase","relocated","isSymbolDefined","existing","stub","dynCallLegacy","dynCall","stackSave","_emscripten_stack_get_current","stackRestore","val","__emscripten_stack_restore","createInvokeFunction","sp","_setThrew","resolveGlobalSymbol","direct","sym","UTF8ToString","loadWebAssemblyModule","flags","libName","localScope","loadModule","firstLoad","memAlign","pow","tableBase","tableGrowthNeeded","moduleExports","resolveSymbol","resolved","proxyHandler","stubs","prop","proxy","postInstantiation","addEmAsm","addr","body","arity","indexOf","eval","allowUndefined","reportUndefinedSymbols","stop","jsString","addEmJs","cSig","jsArgs","jsArg","parts","applyRelocs","loadAsync","reduce","chain","dynNeeded","loadDynamicLibrary","needed","exp","entries","setImport","main_alias","asyncLoad","noRunDep","dep","nodelete","loadLibData","dataSize","libData","libFile","getExports","moduleLoaded","entry","lib","noExitRuntime","setValue","___memory_base","___stack_pointer","___table_base","__abort_js","nowIsMonotonic","__emscripten_get_now_is_monotonic","__emscripten_memcpy_js","dest","num","copyWithin","_emscripten_date_now","Date","now","_emscripten_get_now","performance","getHeapMax","growMemory","pages","byteLength","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","x","cutDown","overGrownHeapSize","min","newSize","max","_fd_close","fd","convertI32PairToI53Checked","lo","hi","NaN","_fd_seek","offset_low","offset_high","whence","newOffset","printCharBuffers","printChar","stream","curr","_fd_write","iov","iovcnt","pnum","j","_tree_sitter_log_callback","isLexMessage","messageAddress","currentLogCallback","_tree_sitter_parse_callback","inputBufferAddress","row","column","lengthAddress","currentParseCallback","stringToUTF16","runtimeKeepaliveCounter","keepRuntimeAlive","_proc_exit","exitJS","implicit","handleException","lengthBytesUTF8","c","stringToUTF8Array","heap","outIdx","maxBytesToWrite","startIdx","u","stringToUTF8","outPtr","stackAlloc","sz","__emscripten_stack_alloc","stringToUTF8OnStack","startPtr","numCharsToWrite","codeUnit","AsciiToString","__heap_base","__indirect_function_table","__memory_base","__stack_pointer","__table_base","_abort_js","_emscripten_get_now_is_monotonic","_emscripten_memcpy_js","emscripten_get_now","emscripten_resize_heap","fd_close","fd_seek","fd_write","memory","tree_sitter_log_callback","tree_sitter_parse_callback","___wasm_call_ctors","___wasm_apply_data_relocs","a0","_calloc","a1","_realloc","_free","_ts_language_symbol_count","_ts_language_state_count","_ts_language_version","_ts_language_field_count","_ts_language_next_state","a2","_ts_language_symbol_name","_ts_language_symbol_for_name","a3","_strncmp","_ts_language_symbol_type","_ts_language_field_name_for_id","_ts_lookahead_iterator_new","_ts_lookahead_iterator_delete","_ts_lookahead_iterator_reset_state","_ts_lookahead_iterator_reset","_ts_lookahead_iterator_next","_ts_lookahead_iterator_current_symbol","_memset","_memcpy","_ts_parser_delete","_ts_parser_reset","_ts_parser_set_language","_ts_parser_timeout_micros","_ts_parser_set_timeout_micros","_ts_parser_set_included_ranges","_memmove","_memcmp","_ts_query_new","a4","_ts_query_delete","_iswspace","_iswalnum","_ts_query_pattern_count","_ts_query_capture_count","_ts_query_string_count","_ts_query_capture_name_for_id","_ts_query_string_value_for_id","_ts_query_predicates_for_pattern","_ts_query_disable_capture","_ts_tree_copy","_ts_tree_delete","_ts_init","_ts_parser_new_wasm","_ts_parser_enable_logger_wasm","_ts_parser_parse_wasm","_ts_parser_included_ranges_wasm","_ts_language_type_is_named_wasm","_ts_language_type_is_visible_wasm","_ts_tree_root_node_wasm","_ts_tree_root_node_with_offset_wasm","_ts_tree_edit_wasm","_ts_tree_included_ranges_wasm","_ts_tree_get_changed_ranges_wasm","_ts_tree_cursor_new_wasm","_ts_tree_cursor_delete_wasm","_ts_tree_cursor_reset_wasm","_ts_tree_cursor_reset_to_wasm","_ts_tree_cursor_goto_first_child_wasm","_ts_tree_cursor_goto_last_child_wasm","_ts_tree_cursor_goto_first_child_for_index_wasm","_ts_tree_cursor_goto_first_child_for_position_wasm","_ts_tree_cursor_goto_next_sibling_wasm","_ts_tree_cursor_goto_previous_sibling_wasm","_ts_tree_cursor_goto_descendant_wasm","_ts_tree_cursor_goto_parent_wasm","_ts_tree_cursor_current_node_type_id_wasm","_ts_tree_cursor_current_node_state_id_wasm","_ts_tree_cursor_current_node_is_named_wasm","_ts_tree_cursor_current_node_is_missing_wasm","_ts_tree_cursor_current_node_id_wasm","_ts_tree_cursor_start_position_wasm","_ts_tree_cursor_end_position_wasm","_ts_tree_cursor_start_index_wasm","_ts_tree_cursor_end_index_wasm","_ts_tree_cursor_current_field_id_wasm","_ts_tree_cursor_current_depth_wasm","_ts_tree_cursor_current_descendant_index_wasm","_ts_tree_cursor_current_node_wasm","_ts_node_symbol_wasm","_ts_node_field_name_for_child_wasm","_ts_node_children_by_field_id_wasm","_ts_node_first_child_for_byte_wasm","_ts_node_first_named_child_for_byte_wasm","_ts_node_grammar_symbol_wasm","_ts_node_child_count_wasm","_ts_node_named_child_count_wasm","_ts_node_child_wasm","_ts_node_named_child_wasm","_ts_node_child_by_field_id_wasm","_ts_node_next_sibling_wasm","_ts_node_prev_sibling_wasm","_ts_node_next_named_sibling_wasm","_ts_node_prev_named_sibling_wasm","_ts_node_descendant_count_wasm","_ts_node_parent_wasm","_ts_node_descendant_for_index_wasm","_ts_node_named_descendant_for_index_wasm","_ts_node_descendant_for_position_wasm","_ts_node_named_descendant_for_position_wasm","_ts_node_start_point_wasm","_ts_node_end_point_wasm","_ts_node_start_index_wasm","_ts_node_end_index_wasm","_ts_node_to_string_wasm","_ts_node_children_wasm","_ts_node_named_children_wasm","_ts_node_descendants_of_type_wasm","a5","a6","_ts_node_is_named_wasm","_ts_node_has_changes_wasm","_ts_node_has_error_wasm","_ts_node_is_error_wasm","_ts_node_is_missing_wasm","_ts_node_is_extra_wasm","_ts_node_parse_state_wasm","_ts_node_next_parse_state_wasm","_ts_query_matches_wasm","a7","a8","a9","a10","_ts_query_captures_wasm","_iswalpha","_iswblank","_iswdigit","_iswlower","_iswupper","_iswxdigit","_memchr","_strlen","_strcmp","_strncat","_strncpy","_towlower","_towupper","dynCall_jiji","_orig$ts_parser_timeout_micros","_orig$ts_parser_set_timeout_micros","calledRun","callMain","entryFunction","argc","argv_ptr","doRun","shouldRunNow","runCaller","C","INTERNAL","SIZE_OF_INT","SIZE_OF_CURSOR","SIZE_OF_NODE","SIZE_OF_POINT","SIZE_OF_RANGE","ZERO_POINT","QUERY_WORD_REGEX","PREDICATE_STEP_TYPE_CAPTURE","PREDICATE_STEP_TYPE_STRING","LANGUAGE_FUNCTION_REGEX","VERSION","MIN_COMPATIBLE_VERSION","TRANSFER_BUFFER","ParserImpl","setLanguage","language","Language","getLanguage","oldTree","_","logCallback","rangeCount","rangeAddress","includedRanges","marshalRange","treeAddress","Tree","reset","getIncludedRanges","unmarshalRange","getTimeoutMicros","setTimeoutMicros","setLogger","getLogger","internal","textCallback","assertInternal","copy","edit","marshalEdit","rootNode","unmarshalNode","rootNodeWithOffset","offsetBytes","offsetExtent","marshalPoint","walk","getChangedRanges","other","Node","tree","typeId","marshalNode","grammarId","types","grammarType","endPosition","unmarshalPoint","endIndex","text","getText","startIndex","parseState","nextParseState","isNamed","hasError","hasChanges","isError","isMissing","isExtra","equals","child","namedChild","childForFieldId","fieldId","childForFieldName","fieldName","fields","fieldNameForChild","childrenForFieldName","childrenForFieldId","firstChildForIndex","firstNamedChildForIndex","childCount","namedChildCount","firstChild","firstNamedChild","lastChild","lastNamedChild","children","_children","namedChildren","_namedChildren","descendantsOfType","startPosition","symbols","typesBySymbol","symbolsAddress","descendantCount","descendantAddress","nextSibling","previousSibling","nextNamedSibling","previousNamedSibling","parent","descendantForIndex","namedDescendantForIndex","descendantForPosition","isPoint","namedDescendantForPosition","TreeCursor","unmarshalTreeCursor","marshalTreeCursor","resetTo","cursor","nodeType","nodeTypeId","nodeStateId","nodeId","nodeIsNamed","nodeIsMissing","nodeText","currentNode","currentFieldId","currentFieldName","currentDepth","currentDescendantIndex","gotoFirstChild","gotoLastChild","gotoFirstChildForIndex","goalIndex","gotoFirstChildForPosition","goalPosition","gotoNextSibling","gotoPreviousSibling","gotoDescendant","goalDescendantindex","gotoParent","fieldCount","stateCount","fieldIdForName","fieldNameForId","idForNodeType","named","typeLength","typeAddress","nodeTypeCount","nodeTypeForId","nodeTypeIsNamed","nodeTypeIsVisible","nextState","stateId","lookaheadIterator","LookaheadIterable","query","sourceLength","sourceAddress","errorId","errorByte","errorIndex","suffix","word","match","SyntaxError","stringCount","captureCount","patternCount","captureNames","stringValues","nameAddress","nameLength","valueAddress","setProperties","assertedProperties","refutedProperties","predicates","textPredicates","predicatesAddress","stepCount","steps","stepAddress","stepType","stepValueId","operator","captureName","isPositive","matchAll","captureName1","captureName2","captures","nodes1","nodes2","compare","n1","n2","positive","every","some","stringValue","matches","doesNotMatch","nodes","RegExp","s","properties","values","map","operands","freeze","Query","load","input","mod","symbolNames","keys","functionName","find","languageAddress","currentTypeId","currentType","resetState","Symbol","iterator","next","done","exceededMatchLimit","matchLimit","maxStartDepth","timeoutMicros","rawCount","startAddress","didExceedMatchLimit","Boolean","filteredCount","pattern","unmarshalCaptures","p","captureIndex","capture","predicatesForPattern","patternIndex","disableCapture","captureNameLength","captureNameAddress","point","range","oldEndPosition","newEndPosition","oldEndIndex","newEndIndex","getOwnPropertyNames","defineProperty","enumerable","writable","onRuntimeInitialized","Dumper","Inline","Utils","indentation","dump","inline","exceptionOnInvalidType","objectEncoder","output","prefix","willBeInlined","strRepeat","Escaper","Pattern","LIST_ESCAPEES","LIST_ESCAPED","MAPPING_ESCAPEES_TO_ESCAPED","mapping","ref","PATTERN_CHARACTERS_TO_ESCAPE","PATTERN_MAPPING_ESCAPEES","PATTERN_SINGLE_QUOTING","requiresDoubleQuoting","escapeWithDoubleQuotes","_this","requiresSingleQuoting","escapeWithSingleQuotes","DumpException","hasProp","superClass","parsedLine","snippet","ctor","__super__","extend","ParseException","ParseMore","Unescaper","l","REGEX_QUOTED_STRING","PATTERN_TRAILING_COMMENTS","PATTERN_QUOTED_SCALAR","PATTERN_THOUSAND_NUMERIC_SCALAR","PATTERN_SCALAR_BY_DELIMITERS","settings","configure","objectDecoder","context","trim","parseSequence","parseMapping","parseScalar","toISOString","dumpObject","isDigits","parseInt","isNumeric","parseFloat","isNaN","PATTERN_DATE","toLowerCase","objectSupport","len1","scalar","delimiters","stringDelimiters","evaluate","joinedDelimiters","ref1","strpos","parseQuotedScalar","ltrim","exec","rtrim","evaluateScalar","unescapeDoubleQuotedString","unescapeSingleQuotedString","sequence","isQuoted","shouldContinueWhileLoop","cast","date","firstSpace","raw","scalarLower","subValue","trimmedScalar","parseBoolean","stringToDate","hexDec","octDec","lines","currentLineNb","currentLine","refs","PATTERN_FOLDED_SCALAR_ALL","PATTERN_FOLDED_SCALAR_END","PATTERN_SEQUENCE_ITEM","PATTERN_ANCHOR_VALUE","PATTERN_COMPACT_NOTATION","PATTERN_MAPPING_ITEM","PATTERN_DECIMAL","PATTERN_INDENT_SPACES","PATTERN_TRAILING_LINES","PATTERN_YAML_HEADER","PATTERN_LEADING_COMMENTS","PATTERN_DOCUMENT_MARKER_START","PATTERN_DOCUMENT_MARKER_END","PATTERN_FOLDED_SCALAR_BY_INDENTATION","CONTEXT_NONE","CONTEXT_SEQUENCE","CONTEXT_MAPPING","alias","allowOverwrite","block","isRef","k","lastKey","len2","len3","lineCount","m","mergeNode","parsed","parsedItem","parser","ref2","refName","refValue","cleanup","moveToNextLine","isCurrentLineEmpty","getRealCurrentLineNb","isNextLineUnIndentedCollection","getNextEmbedBlock","leadspaces","getCurrentLineIndentation","isNextLineIndented","parseValue","includeUnindentedCollection","isItUnindentedCollection","newIndent","removeComments","removeCommentsPattern","unindentedEmbedBlock","isStringUnIndentedCollectionItem","isCurrentLineComment","isCurrentLineBlank","moveToPreviousLine","foldedIndent","modifiers","pos","abs","parseFoldedScalar","separator","indicator","line","newText","notEOF","ignoreComments","EOF","currentIndentation","trimmedLine","smallestIndent","trimmedValue","replaceAll","subStrCount","rawRegex","_char","capturingBracketNumber","cleanedRegex","part","subChar","lastIndex","replacement","limit","PATTERN_ESCAPED_CHARACTER","_unescapeCallback","unescapeCharacter","utf8chr","REGEX_LEFT_TRIM_BY_CHAR","REGEX_RIGHT_TRIM_BY_CHAR","REGEX_SPACES","REGEX_DIGITS","REGEX_OCTAL","REGEX_HEXADECIMAL","LOCAL_TIMEZONE_OFFSET","getTimezoneOffset","regexLeft","regexRight","isEmptyObject","subString","sublen","strict","lowerInput","day","fraction","hour","minute","month","tz_offset","year","UTC","tz","tz_hour","tz_minute","tz_sign","setTime","getTime","number","getStringFromFile","ActiveXObject","onreadystatechange","readyState","responseText","Yaml","parseFile","yaml","YAML","jsonDoc","getElementById","jqQuery","jqResult","logError","innerHTML","runQuery","parsedJson","jq","catch","addEventListener","curlExecute","curlCommand","curlErrors","runCurl","jsCode","promise","async","_percentEncode","encode","padStart","percentEncode","newTokens","token","tokens","percentEncodePlus","wordDecodeURIComponent","decodeURIComponent","parseQueryString","asList","param","decodedKey","decodedVal","URIError","roundTripKey","roundTripVal","eq","keyWords","uniqueKeys","prevKey","keyStr","asDict","COMMA_SEPARATED","h","SEMICOLON_SEPARATED","Headers","headerArgs","warnings","argName","headers","header","headerValue","toBool","removeFirstChar","Word","uniqueHeaders","lowerName","repeatedHeaders","lastRepeat","nonEmptyHeaders","filter","mergeChar","merged","lookup","v","getContentType","contentTypeHeader","setIfMissing","prependIfMissing","searchHeader","splice","clearNulls","MAX_IP6LEN","isIpv6","glob","isSpace","getParamWord","curChar","nextChar","trailingData","sepIdx","getParamPart","formParam","supported","content","contentEnd","contentType","filenameEnd","encoder","encoderEnd","headersEnd","headerFiles","parseDetails","buildURL","global_","config","uploadFile","outputFile","stdin","stdinFile","originalUrl","_a","scheme","host","port","fragment","globoff","isString","prev","cur","warnAboutGlobs","schemeMatch","schemeAndSlashes","hostMatch","indexOfFirstChar","fragmentIndex","queryIndex","authMatch","auth","user","password","parseurl","prepend","urlWithOriginalQuery","urlQueryArray","queryArray","queryStrReadsFile","queryStr","queryParts","buildData","urlWithoutQueryArray","urlWithoutQueryList","queryList","queryDict","method","request","head","requestUrl","urlObj","queryReadsFile","pass","configData","dataStrState","append","splitOn","dataParam","filetype","dataStrReadsFile","dataStr","d","parseContentType","semi","rest","params","parsedParams","parsedParam","buildRequests","configs","_b","proxyHeaders","cookies","cookieFiles","cookieHeader","parsedCookies","cookieString","cookie","parseCookiesStrict","cookieStrings","parseCookies","refererAuto","referer","timecond","urls","uploadFiles","outputFiles","authType","authtype","proxyAuthType","proxyauthtype","disallowUsernameInUrl","pathAsIs","cookieJar","junkSessionCookies","compressed","transferEncoding","form","multipartUploads","depth","multipartArgument","contentFile","parseForm","exactContentType","boundary","parseBoundary","endBoundary","roundtrips","seenContentDisposition","contentDisposition","extra","paramName","paramValue","parseRawForm","parsedForm","roundtrip","multipartUploadsDoesntRoundtrip","formEscape","awsSigV4","bearer","oauth2Bearer","delegation","krb","saslAuthzid","saslIr","negotiate","serviceName","dataReadsFile","dataArray","isDataRaw","isDataBinary","proto","protoRedir","protoDefault","tcpFastopen","localPort","ignoreContentLength","interface","ciphers","curves","insecure","certStatus","cert","colon","search","_c","certType","keyType","cacert","caNative","sslAllowBeast","capath","crlfile","pinnedpubkey","randomFile","egdFile","hsts","alpn","tlsVersion","tlsMax","tls13Ciphers","tlsauthtype","tlspassword","tlsuser","sslAutoClientCert","sslNoRevoke","sslReqd","sslRevokeBestEffort","ssl","sslv2","sslv3","dohUrl","dohInsecure","dohCertStatus","proxyType","proxyAuth","proxytunnel","noproxy","preproxy","proxyAnyauth","proxyBasic","proxyDigest","proxyNegotiate","proxyNtlm","proxyCaNative","proxyCacert","proxyCapath","proxyCertType","proxyCert","proxyCiphers","proxyCrlfile","proxyInsecure","proxyKey","proxyKeyType","proxyPass","proxyPinnedpubkey","proxyServiceName","proxySslAllowBeast","proxySslAutoClientCert","proxyTls13Ciphers","proxyTlsauthtype","proxyTlspassword","proxyTlsuser","proxyTlsv1","proxyUser","socks5Basic","socks5GssapiNec","socks5GssapiService","socks5Gssapi","haproxyClientIp","haproxyProtocol","connectTimeout","expect100Timeout","happyEyeballsTimeoutMs","speedLimit","speedTime","limitRate","maxFilesize","keepAlive","keepalive","keepAliveTime","altSvc","followRedirects","followRedirectsTrusted","maxRedirects","post301","post302","post303","fail","retry","retryMaxTime","ftpSkipPasvIp","httpVersion","http2","http3","http0_9","connectTo","unixSocket","abstractUnixSocket","netrc","netrcFile","useAscii","continueAt","crlf","clobber","remoteTime","verbose","silent","buildRequest","warnf","warning","underline","lineStart","underlineLength","lineEnd","underlineCursor","underlineNode","command","warnIfPartsIgnored","support","multipleUrls","CURLAUTH_BASIC","CURLAUTH_DIGEST","CURLAUTH_NEGOTIATE","CURLAUTH_NTLM","CURLAUTH_NTLM_WB","CURLAUTH_BEARER","CURLAUTH_AWS_SIGV4","CURLAUTH_ANY","pickAuth","mask","auths","authName","curlLongOpts","expand","removed","ftpport","environment","curlLongOptsShortened","opt","shortenedOpt","COMMON_SUPPORTED_ARGS","toBoolean","curlShortOpts","changedShortOpts","t","Z","canBeList","checkSupported","longArg","supportedOpts","pushProp","pushArgValue","setArgValue","toggle","parseArgs","longOpts","shortenedLongOpts","shortOpts","seen","stillflags","shellToken","syntaxNode","argStr","shortFor","jthChar","isOrBeginsWith","cfg","javaScriptSupportedArgs","FORBIDDEN_METHODS","FORBIDDEN_HEADERS","reprObj","escaped","reprPairs","list","repr","reprAsStringToStringDict","reprAsStringTuples","regexEscape","esc","reprStr","addImport","w","reprFetch","isNode","bySecondElem","a","localeCompare","toURLSearchParams","q","toFormData","fetchImports","getDataString","originalStringRepr","delete","getData","encoding","joiner","requestToJavaScriptOrNode","dataString","commentedOutDataString","fn","methodStr","optionsCode","headerName","protocol","_toJavaScriptOrNode","requests","r","importCode","sort","varName","imp","_toJavaScript","toJavaScriptWarn","toJavaScript","clip","maxLength","findCommands","supportedArgs","curlCommands","globalConfig","valueOf","indexStart","indexEnd","trimStart","trimEnd","firstShellToken","lastToken","it","itToken","otherToken","mergeWords","words","joinWords","joinChar","BACKSLASHES","removeBackslash","DOUBLE_QUOTE_BACKSLASHES","removeDoubleQuoteBackslashes","ANSI_BACKSLASHES","removeAnsiCBackslashes","codePointAt","fromCodePoint","toTokens","vals","subVal","prevEnd","toWord","traverseLookingForBadNodes","reachedRoot","retracing","warnAboutBadNodes","ast","badNode","underlinedNode","warnAboutUselessBackslash","curlCommandLines","lastCommandLine","impromperBackslash","extractRedirect","redirects","redirect","heredocBody","_findCurlInPipeline","commandName","commandNameWord","redirCommand","redirStdin","redirStdinFile","nestedCommand","nestedStdin","nestedStdinFile","findCurlInPipeline","extractCommandNodes","sawComment","commands","toNameAndArgv","nameToWord","nameNode","nameWord","nameWordStr","cmdNameShellToken","tokenize","commandNodes","scriptName","Bash","CCError","UTF8encoder","TextEncoder","isInt","__webpack_module_cache__","webpackQueues","webpackExports","webpackError","resolveQueue","__webpack_require__","moduleId","cachedModule","__webpack_modules__","hasAwait","currentDeps","outerResolve","depQueues","rej","deps","wrapDeps","getResult","fnQueue","definition","o","__webpack_exports__"],"sourceRoot":""}